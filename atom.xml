<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://adamshang2333.github.io</id>
    <title>一位Blog</title>
    <subtitle>bit =&gt;byte KB MB GB TB ... 积跬步而行千里</subtitle>
    <icon>http://adamshang2333.github.io/images/favicon.ico</icon>
    <link href="http://adamshang2333.github.io" />
    <author>
      <name>别人都叫我老范</name>
    </author>
    <updated>2023-03-13T03:31:26.132Z</updated>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/zhong-jian-jian/redis/</id>
        <title>redis基础</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/zhong-jian-jian/redis/"/>
        <content type="html">&lt;h2 id=&#34;一-redis特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-redis特性&#34;&gt;#&lt;/a&gt; 一. Redis 特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;速度快&lt;/p&gt;
&lt;p&gt;基于内存，C 语言实现，单线程架构，集性能和优雅于一身的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于键值对的数据结构服务器&lt;/p&gt;
&lt;p&gt;REmote DIctionary Server. 值可以是字符串 / 哈希 / 列表 / 集合 / 有序集合，Bitmap 等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;丰富的功能&lt;/p&gt;
&lt;p&gt;键过期功能。发布 - 订阅功能 (实现消息系统), Lua 脚本，简单的事务，流水线 (Pipeline)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单稳定&lt;/p&gt;
&lt;p&gt;代码少，早期版本 2 万行. 3.0 版本以后加入集群功能，5 万行。单线程模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端语言多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久化&lt;/p&gt;
&lt;p&gt;(RDB 和 AOF 方式) 存放到硬盘中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从复制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高可用和分布式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二-redis使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-redis使用场景&#34;&gt;#&lt;/a&gt; 二. Redis 使用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缓存 /session&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排行榜系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计数器应用&lt;/p&gt;
&lt;p&gt;视频的播放 / 浏览次数。并发量太大，对传统数据库挑战较大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社交网络&lt;/p&gt;
&lt;p&gt;赞 / 踩，粉丝，共同好友 / 喜好等等杂的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列系统&lt;/p&gt;
&lt;p&gt;主要用于业务解耦&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三-redis安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-redis安装&#34;&gt;#&lt;/a&gt; 三. Redis 安装&lt;/h2&gt;
&lt;p&gt;使用 docker 安装 redis&lt;/p&gt;
&lt;h2 id=&#34;四-redis-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-redis-shell&#34;&gt;#&lt;/a&gt; 四. Redis Shell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;redis-server 启动 Redis&lt;/p&gt;
&lt;p&gt;默认端口 6379, 使用 &lt;code&gt;--port xxx&lt;/code&gt;  指定端口号&lt;br /&gt;
指定配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;redis-cli 命令行接口&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;五-redis使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-redis使用&#34;&gt;#&lt;/a&gt; 五. Redis 使用&lt;/h2&gt;
&lt;h3 id=&#34;1-全局命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-全局命令&#34;&gt;#&lt;/a&gt; 1. 全局命令&lt;/h3&gt;
&lt;p&gt;keys *&lt;/p&gt;
&lt;p&gt;dbsize&lt;/p&gt;
&lt;p&gt;exists key&lt;/p&gt;
&lt;p&gt;del key&lt;/p&gt;
&lt;p&gt;expire key seconds&lt;/p&gt;
&lt;p&gt;type key&lt;/p&gt;
&lt;h3 id=&#34;2-数据结构和内部编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-数据结构和内部编码&#34;&gt;#&lt;/a&gt; 2. 数据结构和内部编码&lt;/h3&gt;
&lt;h4 id=&#34;21-数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-数据结构&#34;&gt;#&lt;/a&gt; 2.1 数据结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;string 字符串&lt;/p&gt;
&lt;p&gt;key 都是字符串类型，而且其他几种数据结构都是在字符串类型基础上构建的.&lt;/p&gt;
&lt;p&gt;字符串类型的值实际上可以是简单或复杂的字符串 (JSON/XML), 数字，甚至是二进制 (图片，音频，视频，最大 512M)&lt;/p&gt;
&lt;p&gt;mset, 批量设置值，可以提高开发效率&lt;br /&gt;
 mget, 批量获取值&lt;/p&gt;
&lt;p&gt;计数，&lt;br /&gt;
incr key, ++&lt;br /&gt;
decr key, --&lt;br /&gt;
incrby key xx,&lt;br /&gt;
decrby key xx&lt;/p&gt;
&lt;p&gt;开发中合理的 key 名，业务名：对象名🆔属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash 哈希&lt;/p&gt;
&lt;p&gt;hset key field value&lt;br /&gt;
hget key field&lt;br /&gt;
hdel key field&lt;br /&gt;
hlen key&lt;br /&gt;
hmget key field&lt;br /&gt;
hmset key field value&lt;br /&gt;
hexists key field&lt;br /&gt;
hkeys key&lt;br /&gt;
hvals key&lt;br /&gt;
hgetall key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list 列表&lt;/p&gt;
&lt;p&gt;存储多个有序的字符串&lt;br /&gt;
 rpush key value ... 右边插入元素&lt;br /&gt;
 lpush key value ... 左边&lt;br /&gt;
 lrange key start end&lt;br /&gt;
lpop key 左侧 pop&lt;br /&gt;
lrem key count value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set 集合&lt;/p&gt;
&lt;p&gt;不允许有重复元素.&lt;/p&gt;
&lt;p&gt;同时处理多个集合的交集 / 并集 / 差集&lt;/p&gt;
&lt;p&gt;sadd key element ...&lt;br /&gt;
exists key&lt;br /&gt;
srem key element ... 删除元素&lt;br /&gt;
 scard key 元素个数&lt;br /&gt;
 sismember key element 判断是否在集合中&lt;br /&gt;
 smembers key 所有元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zset 有序集合&lt;/p&gt;
&lt;p&gt;zadd key score member [score member...]&lt;br /&gt;
zcard key&lt;br /&gt;
zscore key member&lt;br /&gt;
zrem key member&lt;br /&gt;
zincrby key score member&lt;br /&gt;
zrevrange key start end&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-03-13T03:31:26.132Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/zhong-jian-jian/mybatis/</id>
        <title>Mybatis</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/zhong-jian-jian/mybatis/"/>
        <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;重要组成部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重要组成部分&#34;&gt;#&lt;/a&gt; 重要组成部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SqlSessionFactory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SqlSession&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sqlsessionfactory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlsessionfactory&#34;&gt;#&lt;/a&gt; SqlSessionFactory&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;是用来创建 SqlSession 对象的 ，而 SqlSession 用来操作数据库的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SqlSessionFactory 是线程安全的&lt;/strong&gt;，它一旦被创建，应该在应用执行期间都存在。在应用运行期间不要重复创建多次，建议使用单例模式。&lt;/li&gt;
&lt;li&gt;SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的 Configuration 的实例构建出 SqlSessionFactory 的实例.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 定义配置文件的路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; resource &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;org/mybatis/example/mybatis-config.xml&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 通过 Mybatis 中的工具类 Resources 获取一个流&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;InputStream&lt;/span&gt; inputStream &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Resources&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resource&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 实例化一个 SqlSessionFactory&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactory&lt;/span&gt; sqlSessionFactory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inputStream&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;sqlsession&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlsession&#34;&gt;#&lt;/a&gt; SqlSession&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Mybatis 中的核心&lt;br /&gt;
 Mybatis 工作最重要的  java 接口，通过这个接口来执行命令，获取 mapper 以及管理事务&lt;br /&gt;
 sqlSession，顾名思义，就是 sql 的一个会话，&lt;br /&gt;
&lt;strong&gt;在这个会话中发生的事不影响别的会话，如果会话提交，则生效，不提交不生效&lt;/strong&gt;。&lt;br /&gt;
　  　---&amp;gt; 即: &lt;mark&gt;&lt;strong&gt;如果在事务里，则 Spring 给你的 sqlSession 是一个；&lt;br /&gt;
　　　　否则，每一个 sql 给你一个新的 sqlSession , 且每次都会提交&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;configuration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#configuration&#34;&gt;#&lt;/a&gt; configuration&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用来设置 Mybatis 的各项，配置文件包含了会深深影响 MyBatis 行为的设置和属性信息&lt;br /&gt;
其中，envirments -- datasources &amp;amp; transactionManager ; mappers 都是最基础和重要的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;配置文档的层级结构:
 configuration（配置）
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;properties（属性）
settings（设置 !!）
typeAliases（类型别名 !）
typeHandlers（类型处理器 !）
objectFactory（对象工厂）
plugins（插件）
environments（环境配置 !!!)
   environment（环境变量）
      transactionManager（事务管理器）
      dataSource（数据源）
databaseIdProvider（数据库厂商标识）
mappers（映射器 !!!）
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;配置文件实例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;configuration&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token name&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-//mybatis.org//DTD Config 3.0//EN&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;http://mybatis.org/dtd/mybatis-3-config.dtd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 选择 mybatis 的运行环境 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 在该标签下可以创建多个配置，例如开发环境 (localhost) 和生产环境 (部署后)--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;environments&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;development&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;environment&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;development&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 选择事务管理器，默认使用 JDBC 的事务管理器 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;transactionManager&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;JDBC&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 配置数据源，实际上就是数据库连接池 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dataSource&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;POOLED&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;driver&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;url&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;username&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;password&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dataSource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;environments&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mappers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--mappers 元素则是包含一组映射器（mapper），&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 映射器的作用就是将 xml 中的文件和命名空间中对应的接口类做映射  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  生成相应的接口实现类 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mapper&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;BookMapper.xml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mapper&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;CategoryMapper.xml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mapper&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UserMapper.xml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;mappers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;mybatis-xml配置-environmentsmapperdatasourcesetting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis-xml配置-environmentsmapperdatasourcesetting&#34;&gt;#&lt;/a&gt; Mybatis XML 配置  (environments&amp;amp;mapper&amp;amp;datasource&amp;amp;setting)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意！！&lt;/strong&gt;:&lt;br /&gt;
 在 Mybatis 的  &lt;code&gt;&amp;lt;configuration&amp;gt; &lt;/code&gt;  中配置的其他子标签是有顺序的&lt;br /&gt;
　即: setting --&amp;gt; typeAliases --&amp;gt; typeHandlers --&amp;gt; environments --&amp;gt; mappers&lt;br /&gt;
&lt;mark&gt; 如果不按照顺序，那么会报错 无法创建 SessionFactory&lt;/mark&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;setting-配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setting-配置&#34;&gt;#&lt;/a&gt; Setting 配置&lt;/h3&gt;
&lt;p&gt;setting 是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为&lt;/p&gt;
&lt;h4 id=&#34;setting-常用配置表格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setting-常用配置表格&#34;&gt;#&lt;/a&gt; Setting 常用配置表格&lt;/h4&gt;
&lt;p&gt;以下是部分设置，标记高亮的是常用设置:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;设置名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;有效值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cacheEnabled&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true / false&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lazyLoadingEnabled&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true / false&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;false&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;&lt;mark&gt;useGeneratedKeys&lt;/mark&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true / false&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;False&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;autoMappingBehavior&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;NONE, PARTIAL, FULL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PARTIAL&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;defaultStatementTimeout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;设置超时时间，它决定驱动等待数据库响应的秒数。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;任意正整数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未设置 (null)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;&lt;mark&gt;mapUnderscoreToCamelCase&lt;/mark&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;true / false&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;False&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;mark&gt;&lt;strong&gt;logImpl&lt;/strong&gt;&lt;/mark&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定 MyBatis 所用日志的具体实现，未指定时将自动查找。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SLF4J  / LOG4J/LOG4J2 / JDK_LOGGING / COMMONS_LOGGING / STDOUT_LOGGING / NO_LOGGING&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvY29uZmlndXJhdGlvbi5odG1sI3NldHRpbmdz&#34;&gt;完整的 setting 设置链接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setting 的 Demo&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;settings&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 开启 Mybatis 缓存 (默认开启一级缓存)--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        一级缓存：同一个 sqlSession 才会从缓存中获取数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        二级缓存：不同的 sqlSession 也会从缓存中获取数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;setting&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;cacheEnabled&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 开启下划线形式的列名与小驼峰形式的属性名自动映射；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        和在 mapper.xml 中设置 resultMap 属性 autoMapping = true 效果一样 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;setting&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mapUnderscoreToCamelCase&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;setting&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;logImpl&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;LOG4J&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;settings&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;mybatis数据库缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mybatis数据库缓存&#34;&gt;#&lt;/a&gt; Mybatis 数据库缓存&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;关于 Mybatis 数据库的缓存&lt;/strong&gt;&lt;br /&gt;
缓存的目的 :&lt;br /&gt;
 避免频繁的与数据库进行交互，尤其是在查询越多、缓存命中率越高的情况下， 使用缓存对性能的提高更明显&lt;/p&gt;
&lt;p&gt;mybatis 也提供了对缓存的支持， 分为一级缓存和二级缓存。&lt;br /&gt;
在默认的情况下， Mybatis 开启一级缓存 (SQLSession 缓存)&lt;br /&gt;
&lt;strong&gt; 一级缓存是对同一个 SqlSession 而言的，二级缓存对不同的 SqlSession 而言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一级缓存 (SqlSession 级别):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1   &lt;strong&gt;同一个 SqlSession 对象&lt;/strong&gt;，调用同一个 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;  标签，只有第一次执行 SQL 语句，&lt;br /&gt;
　　第一次的查询结果会缓存到 SQLSession 的缓存区 (内存) 中&lt;br /&gt;
　　---&amp;gt; 所以被查询的实体类要实现序列化的接口以便缓存&lt;br /&gt;
　　&lt;strong&gt;有效范围：同一个 sqlSession 对象&lt;/strong&gt;&lt;br /&gt;
 2   缓存的是 Statement 对象 (一个 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;  对应一个 statement )&lt;br /&gt;
　　&lt;strong&gt;也就是说，即使 SQL 语句一样 有可能也不会走缓存，只看  &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;  标签的 id 值&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二级缓存 (SqlSessionFactory 级别):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1  二级缓存和一级缓存使用的是不同的内存空间，&lt;br /&gt;
　&lt;mark&gt;只有在 SQLSession.commit () 或者 sqlSession.close () 的时候，&lt;br /&gt;
　才会从一级缓存放入二级缓存中&lt;/mark&gt;&lt;br /&gt;
　有效范围：同一个 SqlSessionFactory 中的任一 sqlSession 对象&lt;br /&gt;
 2  当数据频繁被使用，很少被修改的时候，适合开启二级缓存，&lt;mark&gt;&lt;strong&gt; 频繁修改一定不要开二级！！&lt;/strong&gt;&lt;/mark&gt;&lt;br /&gt;
　数据被修改的时候，缓存在内存中的数据没有及时同步，会产生 &amp;quot;落后&amp;quot; 的&lt;strong&gt;脏数据&lt;/strong&gt;&lt;br /&gt;
　那么再次查询时，读取缓存中的数据与数据库中的就会不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;开启二级缓存的方式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 xxxmapper.xml 中添加 &lt;code&gt;&amp;lt;cache readOnly = &amp;quot;true&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 xxxmapper.xml 中添加 &lt;code&gt;&amp;lt;cache/&amp;gt;&lt;/code&gt;  ; 并且结果集对应实体类实现序列化接口&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;cache&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token attr-name&#34;&gt;eviction&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;FIFO&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token attr-name&#34;&gt;&amp;lt;!--回收策略为先进先出--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flushInterval=&#34;60000&#34; &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 自动刷新时间 60s--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;size=&#34;512&#34; &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 最多缓存 512 个引用对象 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;readOnly=&#34;true&#34;/&gt; &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 只读 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;typealiases-别名配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typealiases-别名配置&#34;&gt;#&lt;/a&gt; typeAliases (别名) 配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为 Java 类型设置一个短的名字。&lt;br /&gt;
它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的有两种配置方式:&lt;br /&gt;
1 精确的指定别名&lt;br /&gt;
 2 扫描指定包下的所有 bean&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名；&lt;br /&gt;
 若有注解，则别名为其 javaBean 类上的注解值 (@Alias (&amp;quot;author&amp;quot;) )&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;typeAliases&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--xml 映射文件中，将类起一个别名 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 为某个包下的所有类都自动设置别名，Mybatis 可以正确的识别出来&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        默认的别名为类名，与大小写无关&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        可以两种混用 但是 typeAlias 需要写在 package 前面&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 方式一 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;typeAlias&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Book&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;book&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;typeAlias&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Permission&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;permission&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;typeAlias&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Category&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;alias&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;category&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 方式二 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;package&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;typeAliases&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;typehandlers类型处理器配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typehandlers类型处理器配置&#34;&gt;#&lt;/a&gt; typeHandlers (类型处理器) 配置&lt;/h3&gt;
&lt;p&gt;typeHandler 一般在两个地方会用到:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由 java 向 DB 传入参数时 (java 类型 --&amp;gt;JDBC 类型 )&lt;/li&gt;
&lt;li&gt;将结果集中的 JDBC 数据类型转换成 java 中的对应类型&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;   设置一个 Money 类的 typeHandler&lt;br /&gt;
java bean&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;public class Product &amp;#123;&lt;br /&gt;
private Integer id;&lt;br /&gt;
private String name;&lt;br /&gt;
private String currencyUnit;&lt;br /&gt;
private Money money;&lt;br /&gt;
&amp;#125;&lt;br /&gt;
public class Money &amp;#123;&lt;br /&gt;
private long value;&lt;br /&gt;
&amp;#125;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;mapper.xml
&amp;gt;```xml
&amp;gt;&amp;lt;!--设置好Money类的typeHandler后,可以直接以#&amp;#123;money&amp;#125;的方式传入参数--&amp;gt;
&amp;gt;&amp;lt;!--没设置的话,只能以#&amp;#123;money.value&amp;#125;的方式传入--&amp;gt;
&amp;gt;&amp;lt;insert id=&amp;quot;add&amp;quot;&amp;gt;
        insert into tb_product 
          values (null,#&amp;#123;name&amp;#125;,#&amp;#123;currencyUnit&amp;#125;,#&amp;#123;money&amp;#125;)
&amp;lt;/insert&amp;gt;
&amp;gt;```
&amp;gt;mybatis-config.xml  
&amp;gt;&amp;gt;在配置mybatis的xml中设置typeHandler   
&amp;gt;**注意, 和 typeAliases一样 , package要在 typeHanlder后面**
&amp;gt;
&amp;gt;```xml
&amp;gt;&amp;lt;typeHandlers&amp;gt;
        &amp;lt;typeHandler handler=&amp;quot;com.lanou.demo.handler.JodaMoneyTypeHandler&amp;quot;/&amp;gt;
        &amp;lt;!--和配置typeAliases一样,也可以直接扫描包--&amp;gt;
        &amp;lt;package name=&amp;quot;com.lanou.demo.handler&amp;quot;/&amp;gt;
&amp;lt;/typeHandlers&amp;gt;
&amp;gt;```
&amp;gt;MoneyTypeHandler
&amp;gt;&amp;gt;继承BaseTypeHandler,重写其中的setxxx和getxxx的方法  
&amp;gt;&amp;gt;两种方法就是在对应向DB传入参数和取出参数
&amp;gt;
&amp;gt;```java
/**
 * 继承BaseTypeHandler (TypeHandler的一个子类)
 * 所填入的泛型,是要处理的类型(java中哪个类型的变量 要对应jdbc中的数据类型)
 */
public class MoneyTypeHandler extends BaseTypeHandler &amp;lt;Money&amp;gt;&amp;#123;
    /**
     * 设置传入参数时, java中数据类型与jdbc中数据类型的对应关系
     * JDBJ中设置传入参数的方法:
     * prepareStatement ps = conn.getPrepareStatement(&amp;quot;insert into xxx values (null,?,?)&amp;quot;)
     * ps.setString(1,aaa);
     * ps.setLong(2,bbb);
     * ****************************************
     * @param ps prepareStatement sql语句编译预处理对象
     * @param i 要处理的参数是传入的第几个
     * @param parameter 要交给类型处理器处理的属性参数
     * @param jdbcType 对应的jdbc类型
     * @throws SQLException
     * 设置好后, 在mapper.xml中使用参数 不用按照#&amp;#123;price.value&amp;#125;的形式来使用参数 可以直接#&amp;#123;price&amp;#125;了
     */
    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, Money parameter, JdbcType jdbcType) throws SQLException &amp;#123;
        ps.setLong(i,parameter.getValue());
    &amp;#125;
    /**
     * @param columnName 列名(方法中指定了泛型Money的列)
     * @return 返回对应处理的java类型
     */
    @Override
    public Money getNullableResult(ResultSet rs, String columnName) throws SQLException &amp;#123;
        long value = rs.getLong(columnName);
        Money money = new Money();
        money.setValue(value);
        return money;
    &amp;#125;
    /**
     * @param columnIndex 第几列(方法中指定了泛型Money的列)
     * @return 返回对应处理的java类型
     */
    @Override
    public Money getNullableResult(ResultSet rs, int columnIndex) throws SQLException &amp;#123;
        long value = rs.getLong(columnIndex);
        Money money = new Money();
        money.setValue(value);
        return money;
    &amp;#125;
    /**
     * 在存储过程中使用,与上面的用法基本一致
     * @param cs 可以看做prepareStatement来使用
     * @param columnIndex 第几列
     * @return
     */
    @Override
    public Money getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &amp;#123;
        long value = cs.getLong(columnIndex);
        Money money = new Money();
        money.setValue(value);
        return money;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;environments环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#environments环境配置&#34;&gt;#&lt;/a&gt; environments (环境) 配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。&lt;br /&gt;
例如，开发、测试和生产环境需要有不同的配置；&lt;br /&gt;
或者想在具有相同 Schema 的多个生产数据库中 使用相同的 SQL 映射。&lt;br /&gt;
&lt;strong&gt;&lt;mark&gt;不过：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;指定加载环境 :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//.build 方法可以接收一个环境参数，如果忽略了环境参数，那么加载 xml 的默认环境&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactory&lt;/span&gt; factory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reader&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; environment&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactory&lt;/span&gt; factory &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reader&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; environment&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; properties&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;xml 中配置加载环境:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;environments&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dev&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;environment&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;dev&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 选择事务管理器，默认使用 JDBC 的事务管理器 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;transactionManager&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;JDBC&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 配置数据源，实际上就是数据库连接池 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dataSource&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;POOLED&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;jdbc:mysql://localhost:3306/db_1021&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;123456&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dataSource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 生产环境的配置 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;environment&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;prop&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;transactionManager&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;JDBC&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dataSource&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;POOLED&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;driver&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;url&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;username&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$&amp;#123;password&amp;#125;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dataSource&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;environments&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mappers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;注意这里的关键点:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;默认使用的环境 ID（比如：default=&amp;quot;development&amp;quot;）。&lt;br /&gt;
&lt;strong&gt;至少要有一个  &lt;code&gt;&amp;lt;environment&amp;gt;&lt;/code&gt;  的 id 值与  &lt;code&gt;&amp;lt;environments&amp;gt;&lt;/code&gt;  的 default 值匹配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个 environment 元素定义的环境 ID（比如：id=&amp;quot;development&amp;quot;）。&lt;/li&gt;
&lt;li&gt;事务管理器的配置（比如：type=&amp;quot;JDBC&amp;quot;）。&lt;/li&gt;
&lt;li&gt;数据源的配置（比如：type=&amp;quot;POOLED&amp;quot;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;===&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;transactionManager (事务管理器)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）&lt;br /&gt;
JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。&lt;br /&gt;
MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;提示:&lt;/code&gt; &lt;br /&gt;
&lt;em&gt;&lt;strong&gt; 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，&lt;br /&gt;
　因为 Spring 模块会使用自带的管理器来覆盖前面的配置。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;dataSource type (数据源类型)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多 MyBatis 的应用程序会按示例中的例子来配置数据源。&lt;br /&gt;
虽然这是可选的，但为了使用延迟加载，数据源是必须配置的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UNPOOLED&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个数据源的实现只是每次被请求时打开和关闭连接。&lt;br /&gt;
虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。&lt;br /&gt;
不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置属性 :&lt;br /&gt;
driver – 这是 JDBC 驱动的 Java 类的完全限定名&lt;br /&gt;
（并不是 JDBC 驱动中可能包含的数据源类）。&lt;br /&gt;
url – 这是数据库的 JDBC URL 地址。&lt;br /&gt;
username – 登录数据库的用户名。&lt;br /&gt;
password – 登录数据库的密码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POOLED&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这种数据源的实现利用 “池” 的概念将 JDBC 连接对象组织起来，&lt;br /&gt;
避免了创建新的连接实例时所必需的初始化和认证时间。&lt;br /&gt;
这是一种使得并发 Web 应用快速响应请求的流行处理方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JNDI&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，&lt;br /&gt;
容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。&lt;br /&gt;
这种数据源配置只需要两个属性 : initial_context , data_source&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;mappers (映射器)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mappers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 根据接口类来找同名的 xml 文件 (xml 文件和接口类要放在同一个包下面才会生效！！)--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 在 resources 中 建立多级目录的时候，需要使用 / 而不是 &#34;.&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         ==&gt; &#34;.&#34; 创建的文件夹只有一个，名字是 com.lanou.demo --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--        &amp;lt;mapper class=&#34;com.lanou.demo.mapper.BookMapper&#34;/&gt;--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--        &amp;lt;mapper resource=&#34;BookMapper.xml&#34;/&gt;--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--        &amp;lt;mapper resource=&#34;CategoryMapper.xml&#34;/&gt;--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--        &amp;lt;mapper resource=&#34;UserMapper.xml&#34;/&gt;--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 扫描包下面的所有 xml 映射文件 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;package&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.demo.mapper&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;mappers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;xml映射xxxmapperxml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml映射xxxmapperxml&#34;&gt;#&lt;/a&gt; XML 映射 (XXXMapper.xml)&lt;/h2&gt;
&lt;p&gt;最常见和使用的就是 xml 形式的结果集映射，也可以做注解形式的配置&lt;br /&gt;
但是 sql 语句过长和复杂的时候，代码的可读性会下降&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注解形式，在方法上面使用 @select/@insert 注解就行，value 值填入 sql 语句&lt;/li&gt;
&lt;li&gt;XML 形式，使用 select /insert/update /delete/resultMap 标签来完成映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;xml 映射文件结构&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;mapper&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token name&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-//mybatis.org//DTD Mapper 3.0//EN&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token string&#34;&gt;&#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 一个接口类对应一个 mapper--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 具体对应哪个接口类的实现，通过 namespace 来指明 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mapper&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.demo.mapper.BookMapper&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--select 是最常用的标签，resultType 和 resultMap 是做结果集映射的 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    id: 与接口类的方法名一致；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    resultType: 指明结果集映射的实体对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    resultMap: 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;select&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findOne&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resultType&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Book&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;resultMap&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findWithCategory&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Book&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;resultMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;select&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findWithCategory&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resultMap&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findWithCategory&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;insert&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;addOne&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;delete&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;del&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;update&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;update&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;mapper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;xml 映射文件中的配置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键返回 (insert 和 update)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--  useGeneratedKeys 是否使用生成的主键；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      keyColumn 主键在表中的列名；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      keyProperty 主键在属性中对应的属性名 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 在方法中调用 addOne 方法之后，会将传入的参数重新赋值 把自增的主键补全 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;insert&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;addOne&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;useGeneratedKeys&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token attr-name&#34;&gt;keyColumn&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;keyProperty&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        insert into tb_book (name, id, author,category_id)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        values (#&amp;#123;name&amp;#125;, null, #&amp;#123;author&amp;#125;,#&amp;#123;categoryId&amp;#125;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;insert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;缓存刷新 (使用默认值即可，不用配置)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!--flushCache=&#34;true&#34; 增删改中默认为 true 查询默认为 false ;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    设置为 true , 会在增删改的时候 清空所有的缓存内容 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;update&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;flushCache&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        update tb_book&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        set name   = #&amp;#123;name&amp;#125;,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            author = #&amp;#123;author&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        where id = #&amp;#123;id&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;update&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;复杂结果映射&lt;/strong&gt;&lt;br /&gt;
常见的结果映射可能会出现非基本数据类型，&lt;br /&gt;
 比如会有某个属性是引用的其他类:   &lt;code&gt;private Address address;&lt;/code&gt; &lt;br /&gt;
 或者某个属性是一个集合 (具有泛型):  &lt;code&gt;private List&amp;lt;Role&amp;gt; roles;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结果集要映射的实体类:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; username&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 引用类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Address&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 引用的集合类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; roles&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这种时候，需要使用  &lt;code&gt;&amp;lt;resultMap&amp;gt;&lt;/code&gt;  来做高级映射 :&lt;br /&gt;
 对于一对一或者一对多，使用  &lt;code&gt;&amp;lt;association&amp;gt;&lt;/code&gt; &lt;br /&gt;
 对于多对多，使用  &lt;code&gt;&amp;lt;collection&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;resultMap&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findOneDetailsWithAddress&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.User&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;uid&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;association&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;javaType&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Address&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;association&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;collection&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;roles&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ofType&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Role&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rid&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rcode&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rname&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;collection&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;permissions&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ofType&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Permission&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;pid&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;pname&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;result&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;column&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;purl&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;collection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;collection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;resultMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;动态sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态sql&#34;&gt;#&lt;/a&gt; 动态 SQL&lt;/h2&gt;
&lt;p&gt;实例 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 根据条件进行动态查询
    // 可以根据书名/作者来进行查询, 条件的数量是不确定的

    /**
     * 无条件时: select * from tb_book
     * 有书名时: select * from tb_book where name like %书名%;
     * 有作者时: select * from tb_book where author like %作者%;
     * 有书名和作者时: select * from tb_book
                      where name like %作者% and author like %作者%;
     */
    List&amp;lt;Book&amp;gt; findByCondition(Book book);
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;select&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;findByCondition&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;resultType&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;com.lanou.pojo.Book&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        select * from tb_book&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;where&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 如果里面有标签，拼接上 where--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 接口方法参数对象中的属性名 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 直接传入的直接写属性，引用类型的属性用 A.B 的方法写属性名 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;if&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;name != null and name.trim().length()&gt;0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                name like concat (&#39;%&#39;,#&amp;#123;name&amp;#125;,&#39;%&#39;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;if&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;author != null&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                and author like #&amp;#123;author&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;where&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;where-标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#where-标签&#34;&gt;#&lt;/a&gt;  &lt;code&gt;&amp;lt;where&amp;gt;&lt;/code&gt;  标签&lt;/h4&gt;
&lt;p&gt;自动去除第一个 and , 如果 where 内没有内容 自身会被清除&lt;/p&gt;
&lt;h4 id=&#34;if-标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if-标签&#34;&gt;#&lt;/a&gt;  &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt;  标签&lt;/h4&gt;
&lt;p&gt;做判断用，符合条件的才会执行  &lt;code&gt;&amp;lt;if&amp;gt; &amp;lt;/if&amp;gt;&lt;/code&gt;  中包裹的 sql 语句&lt;br /&gt;
&lt;mark&gt;&lt;strong&gt;注意 :&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;if 中的 test =&amp;quot; &amp;quot; 使用的是 OGNL 表达式进行的判断&lt;br /&gt;
　　----&amp;gt; 可以直接写传入参数的 Key 或者传入对象的属性名 不需要添加任何特殊符号&lt;br /&gt;
　　即：不要像 mybatis 中那样，使用 #{ } 或者 $&lt;/li&gt;
&lt;li&gt;test 中要使用 &lt;strong&gt;and&lt;/strong&gt; 和 &lt;strong&gt;or&lt;/strong&gt;  , 不要使用 &amp;amp;&amp;amp; , ||&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;choose-when-otherwise标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#choose-when-otherwise标签&#34;&gt;#&lt;/a&gt;  &lt;code&gt; &amp;lt;choose&amp;gt;&lt;/code&gt;  , &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt;  ,  &lt;code&gt;&amp;lt;otherwise&amp;gt;&lt;/code&gt;  标签&lt;/h4&gt;
&lt;p&gt;只要有一个标签中的内容成立，下面其他的 sql 语句都不会被执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;choose&amp;gt;
    &amp;lt;where test = &amp;quot; &amp;quot;&amp;gt;
    &amp;lt;/where&amp;gt;
    &amp;lt;where test = &amp;quot; &amp;quot;&amp;gt;
    &amp;lt;/where&amp;gt;
&amp;lt;/choose&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;set标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set标签&#34;&gt;#&lt;/a&gt;  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  标签&lt;/h4&gt;
&lt;p&gt;常常用在修改中&lt;br /&gt;
作用：去掉最后一个 &amp;quot;,&amp;quot; 如果 set 中没有内容 自身会被清除&lt;br /&gt;
&lt;mark&gt;&lt;strong&gt;注意 :&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;set 标签在进行修改的时候，&lt;br /&gt;
&lt;strong&gt; 如果里面包含的内容为空 sql 语法会不合规 导致报错&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;修改中没有 set 从句，属于 sql 的语法错误！！&lt;/strong&gt;&lt;br /&gt;
　解决：set 中添加一个固定值，保证不为空 :&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;update user &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 添加一条绝对成立的条件，保证 sql 的正确 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  id = #&amp;#123;id&amp;#125;,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;if&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;pwd != null&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pwd&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      pwd = #&amp;#123;pwd&amp;#125;,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;if&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;email != null&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      email = #&amp;#123;email&amp;#125;,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
</content>
        <updated>2023-03-13T03:31:26.116Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/spring/springmvc-lan-jie-qi-fang-fa-can-shu-jie-xi-qi/</id>
        <title>SpringMVC 拦截器&amp;方法参数解析器</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/spring/springmvc-lan-jie-qi-fang-fa-can-shu-jie-xi-qi/"/>
        <content type="html">&lt;h2 id=&#34;springmvc-拦截器方法参数解析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc-拦截器方法参数解析器&#34;&gt;#&lt;/a&gt; SpringMVC 拦截器 &amp;amp; 方法参数解析器&lt;/h2&gt;
&lt;h3 id=&#34;拦截器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拦截器&#34;&gt;#&lt;/a&gt; 拦截器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;拦截器是 SpringMVC 中的技术&lt;br /&gt;
　　　针对 Handler (处理器) 进行的拦截；&lt;br /&gt;
 过滤器是 Serlvet 中的技术&lt;br /&gt;
　　　针对 Request (请求) 进行拦截&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;常见使用:实现HandlerInterceptor接口,重写preHandle 判断请求是否可以进入Handler&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    拦截器&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    拦截器是对处理器 (Handler) 进行拦截&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Component&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyInterceptor&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HandlerInterceptor&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 返回 true: 可以进入 Handler&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 返回 false: 不可以进入 Handler&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 该方法会在请求进入 Handler 之前执行，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 返回值表示请求是否会继续往下执行 可以做一些权限的拦截&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                              &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; handler&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果是使用 ReqestMapping 注解形式创建的 handler,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 那么方法参数中 handler 对象的真正类型是: HandlerMethod&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 所以可以针对 @RequestMapping 类型的请求进行 Handler 的类型转换&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// HandlerMethod 对象可以拿到 controller 中的注解。参数等信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;HandlerMethod&lt;/span&gt; hm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HandlerMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; handler&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    在处理器 Handler 刚执行完毕之后，该方法会被调用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    方法参数有: Handler 和 ModelAndView 对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;postHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                           &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                           &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; handler&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                           &lt;span class=&#34;token class-name&#34;&gt;ModelAndView&lt;/span&gt; modelAndView&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    响应已经返回给用户之后，该方法会执行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    用的很少，可能会做一些资源释放 / 日志打印等等&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;afterCompletion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpServletResponse&lt;/span&gt; response&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; handler&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; ex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;方法参数解析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法参数解析器&#34;&gt;#&lt;/a&gt; 方法参数解析器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方法参数解析器的作用&lt;br /&gt;
就是在 Controller 中，能在接口方法传入的参数中设置任意的类&lt;br /&gt;
并且通过框架能直接在方法中调用传入的参数 (类).&lt;br /&gt;
 对传入参数映射到对应类型的过程 就需要方法参数解析器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Step1 自定义一个注解,标识执行自定义方法参数解析器的实体类&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 一个简单的标记注解&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 只是标识一下哪个参数是要使用自定义的方法参数解析器来进行处理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @author OldFun&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @date 2019-10-15 16:58&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Target&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ElementType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PARAMETER&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Retention&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;RUNTIME&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token annotation punctuation&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CurrentUser&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;Step2 自定义方法参数解析的接口实现类&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CurrentUserMethodArgumentResolver&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/*  数据校验和方法参数解析器都是&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        @requestMapping 中的方法扩展&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        是 SpringMVC 中的技术&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 用来确定该解析器能处理什么规则的方法参数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 这个规则需要我们自己进行定义&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;supportsParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MethodParameter&lt;/span&gt; methodParameter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 规则:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 1. 必须有 @Current 注解&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 方法的参数类型必须是 User 类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 两个条件必须同时满足 (使用短路机制，提高运行效率)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; methodParameter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasParameterAnnotation&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CurrentUser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; methodParameter&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getParameterType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 表示如何为满足上面条件的对象赋值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param methodParameter&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param modelAndViewContainer&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param nativeWebRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param webDataBinderFactory&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return 返回被赋值后的对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @throws Exception&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;resolveArgument&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MethodParameter&lt;/span&gt; methodParameter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                  &lt;span class=&#34;token class-name&#34;&gt;ModelAndViewContainer&lt;/span&gt; modelAndViewContainer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                  &lt;span class=&#34;token class-name&#34;&gt;NativeWebRequest&lt;/span&gt; nativeWebRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                  &lt;span class=&#34;token class-name&#34;&gt;WebDataBinderFactory&lt;/span&gt; webDataBinderFactory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 从 session 中取出当前登录用户，并且返回即可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 先获取到当前的请求对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt; request &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nativeWebRequest&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getNativeRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;request &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;HttpSession&lt;/span&gt; session &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSession&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; user &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果不登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;user &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; user&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;Step3 在接口中,使用自定义注解标识使用自定义方法参数解析器的类&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/book/add&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JsonResoult&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Book&lt;/span&gt; book&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token annotation punctuation&#34;&gt;@CurrentUser&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; user&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HttpSession&lt;/span&gt; session&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;session&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;book&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;添加成功&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-03-13T03:31:25.976Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/spring/spring-jdbc/</id>
        <title>Spring JDBC</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/spring/spring-jdbc/"/>
        <content type="html">&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;是封装了 JDBC 操作的一个框架 必须依赖 Spring&lt;/p&gt;
&lt;p&gt;SpringJDBC 本身就是基于模板模式进行开发，提供一个 JDBCTemplate 类&lt;/p&gt;
&lt;h2 id=&#34;jdbc操作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdbc操作流程&#34;&gt;#&lt;/a&gt; JDBC 操作流程&lt;/h2&gt;
&lt;h3 id=&#34;1-加载驱动类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-加载驱动类&#34;&gt;#&lt;/a&gt; 1  加载驱动类&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;原生jdbc: Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;被封装成了 DateSource , 放入了连接池&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-建立连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-建立连接&#34;&gt;#&lt;/a&gt; 2  建立连接&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;原生jdbc: Connection con = DriverManager.getConnection(&amp;quot;jdbc:mysql:/&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-创建语句集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-创建语句集&#34;&gt;#&lt;/a&gt; 3  创建语句集&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PreparedStatement pstm = con.prepareStatement(&amp;quot;select ... &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-执行语句集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-执行语句集&#34;&gt;#&lt;/a&gt; 4  执行语句集&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ResultSet rs = pstm.executeQuery()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-获取结果集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-获取结果集&#34;&gt;#&lt;/a&gt; 5  获取结果集&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rs.get...&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;被封装成了 ORM 过程 (Object Relation Mapping)&lt;/p&gt;
&lt;p&gt;思路：将 result 对象中的对象 使用反射转换到 javaBean 中&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <updated>2023-03-13T03:31:25.944Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/java-de-nei-bu-lei/</id>
        <title>java的内部类</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/java-de-nei-bu-lei/"/>
        <content type="html">&lt;h2 id=&#34;前言-类的成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言-类的成员&#34;&gt;#&lt;/a&gt; 前言 -- 类的成员&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个类的成员，包含如下内容:&lt;br /&gt;
 属性&lt;br /&gt;
方法&lt;br /&gt;
类&lt;br /&gt;
静态代码块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内部类可以看做一个外部类的属性，&lt;br /&gt;
 在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。与之对应，包含内部类的类被称为外部类。&lt;br /&gt;
优势：内部类提供了更好的封装，可以把内部类隐藏在外部类之内，通过访问修饰符控制其他类对内部类的访问，更好的实现了信息隐藏&lt;br /&gt;
分类：成员内部类、静态内部类、方法内部类、匿名内部类&lt;/p&gt;
&lt;h2 id=&#34;内部类的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内部类的分类&#34;&gt;#&lt;/a&gt; 内部类的分类&lt;/h2&gt;
&lt;p&gt;内部类可以分为:&lt;br /&gt;
&lt;strong&gt; 普通内部类&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;静态内部类&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;匿名内部类&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;局部内部类&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;普通内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#普通内部类&#34;&gt;#&lt;/a&gt; 普通内部类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;特点 :&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内部类可以直接访问外部类的成员；&lt;br /&gt;
　　如果出现同名属性或者方法，优先访问内部类中定义的  (默认存在 this)&lt;/li&gt;
&lt;li&gt;可以使用 &lt;strong&gt;外部类.this. 成员&lt;/strong&gt; 的方式，访问外部类中同名的信息 (成员属性和成员方法)&lt;/li&gt;
&lt;li&gt;外部类访问内部类信息，需要通过内部类实例，无法直接访问&lt;/li&gt;
&lt;li&gt;一个外部类可以有多个内部类对象 (引用的内存地址不同)&lt;br /&gt;
　　&lt;strong&gt;注：当一个类还有内部类引用的时候，这个类不会被 JVM 回收&lt;/strong&gt;&lt;br /&gt;
　　　　　　可以类比为数据库的外键约束，有引用的情况下不能被删除&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;创建类示例 :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Outer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; outer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 外部类的构造方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;外部类&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;outer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;我是大佬&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是外部类&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是外部类,调用内部类方法:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 调用内部类的方法，需要 new 一个内部类对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;inter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &#34; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 声明为内部类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Data&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 内部类属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; inter&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 内部类的构造方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;内部类&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;inter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;我是菜鸡&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是内部类&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reflect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是内部类,调用外部类方法:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;outer = &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; outer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;一个类可以创建多个内部类对象:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Outer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Inter&lt;/span&gt; inter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; outer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Outer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Inter&lt;/span&gt; inter2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; outer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 输出: false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inter&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;inter2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;静态内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态内部类&#34;&gt;#&lt;/a&gt; 静态内部类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们知道，&lt;strong&gt; 一个类的静态成员独立于这个类的任何一个对象存在.&lt;/strong&gt;&lt;br /&gt;
 只要在具有访问权限的地方，&lt;br /&gt;
我们就可以通过 &lt;mark&gt;&lt;strong&gt;类名。静态成员名&lt;/strong&gt;&lt;/mark&gt; 的形式来访问这个静态成员，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同样的，静态内部类也是作为一个外部类的静态成员而存在，&lt;br /&gt;
&lt;strong&gt; 创建一个类的静态内部类对象不需要依赖其外部类对象。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特点 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建无需依赖外部类对象，通过类来创建即可&lt;/li&gt;
&lt;li&gt;只能访问外部类的静态成员变量&lt;/li&gt;
&lt;li&gt;外部类依然可以访问静态内部类对象的所有访问权限的成员&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义静态内部类:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 外部类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Outer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 普通成员变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; outer&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 静态成员变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; slogen&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 静态内部类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StaticInter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我是静态内部类&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getOuterFiled&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Outer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;slogen&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// System.out.println(Outer.name);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-03-13T03:31:25.836Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/basics/java-ji-chu/</id>
        <title>IO基础</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/basics/java-ji-chu/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;IO 概念&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="java" scheme="http://adamshang2333.github.io/categories/java/" />
        <category term="基础" scheme="http://adamshang2333.github.io/categories/java/basics/" />
        <updated>2023-03-13T03:31:16.972Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/javaweb-ji-chu/</id>
        <title>JavaWeb基础</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/javaweb-ji-chu/"/>
        <content type="html">&lt;h2 id=&#34;应用组成结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用组成结构&#34;&gt;#&lt;/a&gt; 应用组成结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://images0.cnblogs.com/i/289233/201405/172304056712920.png&#34; alt=&#34;组成&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注: !!! 在 JavaWeb 中，没有明显的主函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WEB-INF&lt;/strong&gt; 　－－＞&amp;quot;安全区&amp;quot; 后端判断有无权限获取该文件夹下的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WEB-INF 文件夹 是一个对前端隐藏的文件夹&lt;br /&gt;
即，前端没法通过访问 WEB-INF 路径访问里面的内容 --&amp;gt;&lt;br /&gt;
 如果必须要访问，只能通过后台代码转发.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;web.xml&lt;/strong&gt;　－－＞配置文件设置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 javaWeb 程序启动时，最早加载的配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;webxml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webxml&#34;&gt;#&lt;/a&gt; web.xml&lt;/h2&gt;
&lt;p&gt;.xml 代码示例 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&amp;quot;
         version=&amp;quot;4.0&amp;quot;&amp;gt;
      
     // 配置servlet    
     // Step 1 : servlet的本地设置
    &amp;lt;servlet&amp;gt;
        // 给每个servlet起别名(外号)
        &amp;lt;servlet-name&amp;gt;mservlet&amp;lt;/servlet-name&amp;gt;  //*关联,须一致*
        // 指定servlet的类(Java类 关联)
        &amp;lt;servlet-class&amp;gt;com.oldFun.controller.MainServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;/servlet&amp;gt;
    //  Step 2 : 创建和服务器的映射
    &amp;lt;servlet-mapping&amp;gt;
        // 和本地的&amp;quot;外号&amp;quot;关联
        &amp;lt;servlet-name&amp;gt;mservlet&amp;lt;/servlet-name&amp;gt;  //*关联,须一致*
        // 指定访问的地址(起一个名字,别忘了&amp;quot;/&amp;quot;!!!)
        &amp;lt;url-pattern&amp;gt;/main&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
    
    &amp;lt;servlet&amp;gt;
        // 起名字(外号)
        &amp;lt;servlet-name&amp;gt;helloServlet&amp;lt;/servlet-name&amp;gt;
        // 指定servlet的类
        &amp;lt;servlet-class&amp;gt;com.oldFun.controller.HelloServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;/servlet&amp;gt;
    // 映射
    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;helloServlet&amp;lt;/servlet-name&amp;gt;
        // 指定地址
        &amp;lt;url-pattern&amp;gt;/suibian&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;

&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;servlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet&#34;&gt;#&lt;/a&gt; Servlet&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;背景 &lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sun 公司提供的一门用于开发动态 web 资源的技术&lt;br /&gt;
 Sun 公司在其 API 中提供了一个 servlet 接口，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;实现&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户若想用发一个动态 web 资源 (即开发一个 Java 程序向浏览器输出数据)&lt;br /&gt;
 需要完成以下 2 个步骤：&lt;br /&gt;
　　&lt;strong&gt;1、编写一个 Java 类，实现 servlet 接口。&lt;br /&gt;
　　2、把开发好的 Java 类部署到 web 服务器中。&lt;/strong&gt;&lt;br /&gt;
　　　　按照一种约定俗成的称呼习惯，&lt;strong&gt;通常也把实现了 servlet 接口的 java 程序，称之为 Servlet&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;作用&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servlet 接口就是处理网络请求的一套规范，&lt;br /&gt;
负责连接 web 服务器（如 tomcat 服务器)，存取数据&lt;br /&gt;
交互式的生成动态的 web 内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servlet : JavaWeb 负责处理所有请求的类&lt;br /&gt;
每一个请求，对应一个 servlet 对象；每一个 servlet 类 只有一个对象 (单例设计模式)&lt;br /&gt;
－－＞ &lt;strong&gt;每一个请求，对应一个 Servlet 类&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;servlet实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet实现方式&#34;&gt;#&lt;/a&gt; Servlet 实现方式&lt;/h3&gt;
&lt;h4 id=&#34;1-通过接口实现-需要实现所有的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-通过接口实现-需要实现所有的方法&#34;&gt;#&lt;/a&gt; 1.    通过接口实现 －－＞ 需要实现所有的方法！！！&lt;/h4&gt;
&lt;p&gt;​	 &lt;code&gt;常用重要方法&lt;/code&gt; &lt;br /&gt;
​&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;init 方法 : 初始化方法,只执行一次(创建servlet对象的时候执行.)  
　     作用：做一些设置和初始化工作    
&amp;gt;
&amp;gt;service 方法 : 会被执行多次  
　     作用：负责每次请求要显示的内容    
&amp;gt;
&amp;gt;destroy 方法 : 当servlet对象被销毁时执行 (服务器停止运行时, 对象被销毁)  
　     作用：做一些资源释放的操作 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//** implements 来实现:
public class HelloServlet implements Servlet &amp;#123;

    /**
     * 该方法是servlet对象的初始化方法, 只会执行一次
     * 在创建servlet对象的时候执行.
     * 作用: 做一些设置和初始化工作
     * @param servletConfig
     * @throws ServletException
     */
    @Override
    public void init(ServletConfig servletConfig) throws ServletException &amp;#123;
        System.out.println(&amp;quot;HelloServlet初始化&amp;quot;);
    &amp;#125;

    @Override
    public ServletConfig getServletConfig() &amp;#123;
        return null;
    &amp;#125;

    /**
     * 这个方法会被执行多次,负责每次请求要显示的内容
     * @param servletRequest  请求
     * @param servletResponse 响应
     * @throws ServletException
     * @throws IOException
     */
    @Override
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &amp;#123;
        System.out.println(&amp;quot;service方法执行&amp;quot;);
    &amp;#125;

    @Override
    public String getServletInfo() &amp;#123;
        return null;
    &amp;#125;

    /**
     * 当servlet对象被销毁时执行该方法
     * 服务器停止运行时, 对象被销毁
     * 做一些资源释放的操作
     */
    @Override
    public void destroy() &amp;#123;
        System.out.println(&amp;quot;helloServlet被销毁&amp;quot;);
    &amp;#125;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-通过继承实现-&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-通过继承实现-&#34;&gt;#&lt;/a&gt; 2.    通过继承实现  －－＞&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;继承来实现，设计模式上属于适配器模式&lt;br /&gt;
适用场景：接口过多，但是常用的方法很少&lt;br /&gt;
优点：不常用的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;继承父类: &lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;21-继承genericservlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-继承genericservlet&#34;&gt;#&lt;/a&gt; 2.1 继承 GenericServlet&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;常用于重写 &lt;strong&gt;service&lt;/strong&gt; 方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class MainServlet  extends GenericServlet &amp;#123;

    @Override
    public void service (ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &amp;#123;
        // 给页面显示一点内容
        System.out.println(&amp;quot;service方法&amp;quot;);
        // 开启一个字符流
        PrintWriter writer = servletResponse.getWriter();
        writer.println(&amp;quot;&amp;lt;h1&amp;gt;hello servlet&amp;lt;/h1&amp;gt;&amp;quot;);
        // 关闭字符流
        writer.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;或者&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-继承httpservlet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-继承httpservlet&#34;&gt;#&lt;/a&gt; 2.2 继承 HttpServlet&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;重写 &lt;strong&gt;doPost&lt;/strong&gt;  &lt;strong&gt;doGet&lt;/strong&gt; 方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;继承HttpServlet更常用,使用时注意删除super.doGet ;  super.doGet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// @WebServlet -- 快速配置 不用在xml中再配置了
// !!!!url 中的&amp;quot;/&amp;quot;要记得写,不然很多的请求中报错很难找
// !!!url中的大小写有要求,会按照大小写区分
@WebServlet(urlPatterns = &amp;quot;/home&amp;quot;)
public class IntroServlet  extends HttpServlet &amp;#123;

    @Override
    protected void doGet(HttpServletRequest req,
                         HttpServletResponse resp) throws ServletException, IOException &amp;#123;
         // super.doGet(req, resp);  必须删掉 不然会不支持这个请求
                 
         // 在头部文件指明发送给浏览器的内容以及格式
         // resp设置响应头, 方便浏览器直接判断响应的内容
        resp.setHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/html;charset=utf-8&amp;quot;);

        ServletContext context = this.getServletContext();

        // 读取context中的数据
        Object name = context.getAttribute(&amp;quot;name&amp;quot;);
        // 需要先访问存值的页面, 再访问取值的页面 才能取到context中的值
        System.out.println(&amp;quot;从context中读取的数据&amp;quot;+name);
        // 删除context保存的数据
        context.removeAttribute(&amp;quot;name&amp;quot;);
        System.out.println(&amp;quot;删除context的数据&amp;quot;);
        PrintWriter pw = resp.getWriter();
        pw.write(&amp;quot;&amp;lt;div&amp;gt;第一个请求&amp;lt;/div&amp;gt;&amp;quot;);
        pw.close();
    &amp;#125;

    @Override
    protected void doPost(HttpServletRequest req,
                          HttpServletResponse resp) throws ServletException, IOException &amp;#123;
          // 从父类继承过来的doPost方法需要删除
          // ?? : 父类中默认不支持 doPost 和 dpGet
//        super.doPost(req, resp);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;servlet的常用三大对象requset-session-servletcontext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet的常用三大对象requset-session-servletcontext&#34;&gt;#&lt;/a&gt; Servlet 的常用三大对象 (requset ; session ; servletContext)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;获取方法&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三大常用对象，&lt;br /&gt;
 都是通过&lt;strong&gt; request 调用 get 方法&lt;/strong&gt;来得到一个对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;区别&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;种类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;生命周期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;request&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpServletRequest&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;本次请求有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSession&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前浏览器有效，可以跨页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;servletContext&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletContext&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整个项目有效，可以跨页面&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;``&lt;/p&gt;
&lt;h4 id=&#34;servletcontext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servletcontext&#34;&gt;#&lt;/a&gt; servletContext&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;一个项目只有一个 servletContext 对象  (全局)&lt;br /&gt;
 在项目启动期间，保存在 servletContext 中的数据可以一直使用 (跨页面)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;生命周期&lt;/code&gt; &lt;br /&gt;
项目启动到关闭，服务器重启时 会被销毁&lt;/p&gt;
</content>
        <updated>2023-03-13T03:31:16.084Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/java-fan-she/</id>
        <title>Java反射</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/java-fan-she/"/>
        <content type="html">&lt;h1 id=&#34;反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射&#34;&gt;#&lt;/a&gt; 反射&lt;/h1&gt;
&lt;h2 id=&#34;反射机制的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射机制的概念&#34;&gt;#&lt;/a&gt; 反射机制的概念&lt;/h2&gt;
&lt;p&gt;将类的各个组成部分，封装为其他对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在运行状态中，&lt;br /&gt;
 对任意一个类，都能够知道这个类的所有属性和方法；&lt;br /&gt;
 对任意一个对象，都能够调用它的任意一个属性和方法；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;反射的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射的功能&#34;&gt;#&lt;/a&gt; 反射的功能&lt;/h2&gt;
&lt;p&gt;1 . 在程序的运行过程中，可以操作这些对象&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可以解耦，提高程序的可扩展性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;获取class类对象三个方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取class类对象三个方法&#34;&gt;#&lt;/a&gt; 获取 Class 类对象 (三个方法)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;源码阶段&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Class.forName (&amp;quot;全类名&amp;quot;)&lt;/strong&gt; : 将字节码文件加载进内存，返回 Class 对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Class 类对象阶段&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;类名.Class&lt;/strong&gt;: 通过类名的属性 class 获取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;实例化对象阶段&lt;/code&gt; &lt;br /&gt;
 3.  &lt;strong&gt;对象.getClass ()&lt;/strong&gt; : getClass 方法在 Object 类中定义着&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：对象阶段，new Person ( ) 调用无参构造方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;class类的方法-通过class类对象调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#class类的方法-通过class类对象调用&#34;&gt;#&lt;/a&gt; Class 类的方法 (通过 class 类对象调用)&lt;/h2&gt;
&lt;h3 id=&#34;获取类名类全名类名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取类名类全名类名&#34;&gt;#&lt;/a&gt; 获取类名 (类全名 &amp;amp;&amp;amp; 类名)&lt;/h3&gt;
&lt;h3 id=&#34;获取构造器构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取构造器构造方法&#34;&gt;#&lt;/a&gt; 获取构造器 (构造方法)&lt;/h3&gt;
&lt;h3 id=&#34;实例化对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例化对象&#34;&gt;#&lt;/a&gt; 实例化对象&lt;/h3&gt;
</content>
        <updated>2023-03-13T03:31:16.072Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/java-collection/</id>
        <title>Java collection</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/java-collection/"/>
        <content type="html">&lt;h2 id=&#34;collection容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#collection容器&#34;&gt;#&lt;/a&gt; Collection 容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;容器的特点:&lt;br /&gt;
1. 只用于&lt;strong&gt;存储对象&lt;/strong&gt;  --&amp;gt; 但可以使用泛型规定具体对象&lt;br /&gt;
 --&amp;gt;  如果是基本类型，在 Java 内部也会转为对应类的对象&lt;br /&gt;
 2. 长度可变&lt;br /&gt;
 3. 存储对象的类型可以不同 --&amp;gt; 无泛型时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;容器方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器方法&#34;&gt;#&lt;/a&gt; 容器方法&lt;/h4&gt;
&lt;h4 id=&#34;add-添加一个对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#add-添加一个对象&#34;&gt;#&lt;/a&gt; .add  添加一个对象&lt;/h4&gt;
&lt;h4 id=&#34;addall-把参数容器的所有元素添加到容器中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addall-把参数容器的所有元素添加到容器中&#34;&gt;#&lt;/a&gt; .addAll  把参数容器的&lt;strong&gt;所有元素&lt;/strong&gt;添加到容器中&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// 把参数容器(a2)整体作为一个对象add进数组arr中
 arr.addAll(a2);      
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size-获取容器的大小无参&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#size-获取容器的大小无参&#34;&gt;#&lt;/a&gt; .size () 获取容器的大小 (无参)&lt;/h4&gt;
&lt;h4 id=&#34;removeobject-移除只移除遇到的第一个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#removeobject-移除只移除遇到的第一个&#34;&gt;#&lt;/a&gt; .remove (object) 移除 (只移除遇到的第一个)&lt;/h4&gt;
&lt;h4 id=&#34;contains-判断是否包含某一对象遇到的第一个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#contains-判断是否包含某一对象遇到的第一个&#34;&gt;#&lt;/a&gt; .contains () 判断是否包含某一对象 (遇到的第一个)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;.contains 返回布尔值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;迭代器-iterator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#迭代器-iterator&#34;&gt;#&lt;/a&gt; 迭代器 iterator&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    // 迭代器使用完之后 指针指向迭代器之前停止的位置(遍历后 指针停在最后) 无法重复利用
    // 迭代器想用时要再次赋值 !!!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; Iterator&amp;lt;String&amp;gt; it = arr.iterator();
        while (it.hasNext()) &amp;#123;
        // 每次.next 调用一次指针 进行一次迭代器的移位  
        // 实质上在循环内执行了两次指针的移动 对奇数次来说 最后一次会找不到可用元素
              System.out.println(it.next());           
             if (&amp;quot;王五&amp;quot;.equals(it.next())) &amp;#123;
                it.remove();

            &amp;#125;
        &amp;#125;
        // 迭代器使用完之后 指针指向迭代器之前停止的位置(遍历后 指针停在最后) 无法重复利用
        // 迭代器想用时要再次赋值 !!!
        it = arr.iterator();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;泛型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型&#34;&gt;#&lt;/a&gt; 泛型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;限制容器中保存的对象类型&lt;br /&gt;
每次取出的对象，想让它是规定的类型 (不是 object)&lt;br /&gt;
&lt;strong&gt;&amp;lt; &amp;gt; 内可以放入类 基本数据类型等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;	List&amp;lt;String&amp;gt; l = new ArrayList&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt; List&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;威力增强版的数组，特点 :&lt;br /&gt;
1. 元素有序 (按放入顺序)&lt;br /&gt;
2. &lt;strong&gt;按下标取值 (从 0 开始)&lt;/strong&gt;&lt;br /&gt;
 3. 放入对象可重复&lt;br /&gt;
 4. 继承自 collection&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;list特有方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list特有方法&#34;&gt;#&lt;/a&gt; List 特有方法&lt;/h4&gt;
&lt;h4 id=&#34;按下标-添加-元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按下标-添加-元素&#34;&gt;#&lt;/a&gt; 按下标 添加 元素&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;arr.add(0,&amp;quot;小金刚&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;按下标-移除-元素注意下标越界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按下标-移除-元素注意下标越界&#34;&gt;#&lt;/a&gt; 按下标 移除 元素 (注意下标越界)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; arr.remove(2);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;按下标-修改-元素注意下标越界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按下标-修改-元素注意下标越界&#34;&gt;#&lt;/a&gt; 按下标 修改 元素 (注意下标越界)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; arr.set(0,&amp;quot;太二真人&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;按下标-获取-元素注意下标越界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按下标-获取-元素注意下标越界&#34;&gt;#&lt;/a&gt; 按下标 获取 元素 (注意下标越界)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; arr.get(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;list遍历三种方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list遍历三种方法&#34;&gt;#&lt;/a&gt; List 遍历 (三种方法)&lt;/h4&gt;
&lt;h4 id=&#34;fori-循环代码需要顺序或者下标参与&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fori-循环代码需要顺序或者下标参与&#34;&gt;#&lt;/a&gt; fori --&amp;gt; 循环代码需要顺序或者下标参与&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; // 第一种 for循环 arr.fori
      
        for (int i = 0; i &amp;lt; arr.size(); i++) &amp;#123;
            System.out.println(arr.get(i));
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;for-循环代码只需要元素-不需要下标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for-循环代码只需要元素-不需要下标&#34;&gt;#&lt;/a&gt; for --&amp;gt; 循环代码只需要元素 不需要下标&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; // 第二种 foreach 循环  arr.for

        // 内部的 o1 就相当于 arr.get(i)  方法替我们实现 直接使用o1就行
        for (Object o1 : arr) &amp;#123;

        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;迭代器-需要在遍历期间更改list的长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#迭代器-需要在遍历期间更改list的长度&#34;&gt;#&lt;/a&gt; 迭代器  --&amp;gt; 需要在遍历期间更改 List 的长度&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;// 第三种 使用迭代器遍历List
        // 前两种在遍历过程中不能对数组元素做增删操作!!!

        // step1 获取容器的迭代器对象
        Iterator it = arr.iterator();

        // 返回布尔值 标示&amp;quot;之后还有没有值&amp;quot;
        // boolean b = it.hasNext();
        // step2 判断迭代器中还有没有元素
        while (it.hasNext())&amp;#123;
            // step3 获取下一个元素
            Object obj = it.next();
            if (&amp;quot;李四&amp;quot;.equals(obj))&amp;#123;
                it.remove();
            &amp;#125;
       &amp;#125; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt; Set&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;特点 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素无序&lt;/li&gt;
&lt;li&gt;元素&lt;strong&gt;不能重复 (可以去重)&lt;/strong&gt;&lt;br /&gt;
 继承自 collection&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;list遍历两种方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list遍历两种方法&#34;&gt;#&lt;/a&gt; List 遍历 (两种方法)&lt;/h4&gt;
&lt;h4 id=&#34;for-循环代码只需要元素-不需要下标-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for-循环代码只需要元素-不需要下标-2&#34;&gt;#&lt;/a&gt; for --&amp;gt; 循环代码只需要元素 不需要下标&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  for (Object o1 : set) &amp;#123;

        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;迭代器-需要在遍历期间更改list的长度-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#迭代器-需要在遍历期间更改list的长度-2&#34;&gt;#&lt;/a&gt; 迭代器  --&amp;gt; 需要在遍历期间更改 List 的长度&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Iterator itset = set.iterator();
        while (itset.hasNext())&amp;#123;
            System.out.println(itset.next());
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;map&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; Map&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Map -- &lt;strong&gt;不是继承自 collection&lt;/strong&gt;&lt;br /&gt;
1. 只能存储对象&lt;br /&gt;
 2. 长度可变&lt;br /&gt;
 3. 可以存储不同类型的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;		// List 更倾向存储相同 类型&amp;amp;&amp;amp;作用的数据 -- 直接遍历做集中处理即可
        // Map  更倾向存储不同 类型&amp;amp;&amp;amp;作用的数据
        // 当数据类型复杂多变,但是又要集中处理的情况, 就可以使用MAp
        // 如果数据类型是固定的, 那么可以使用类来替代Map
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;map独有特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map独有特点&#34;&gt;#&lt;/a&gt; Map 独有特点:&lt;/h4&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;无序&lt;/li&gt;
&lt;li&gt;以&lt;strong&gt;键值对&lt;/strong&gt; (key-value) 的方式存储数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;key 不能重复&lt;/strong&gt;，一个 key 只对应一个 value  (kay 又被称为映射) y=f (x)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;map方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map方法&#34;&gt;#&lt;/a&gt; Map 方法&lt;/h3&gt;
&lt;h4 id=&#34;putkeyvalue-存储键值对&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#putkeyvalue-存储键值对&#34;&gt;#&lt;/a&gt; .put (key,value) 存储键值对&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; Map map = new HashMap();
        map.put(&amp;quot;name&amp;quot;,&amp;quot;张三&amp;quot;);
        map.put(&amp;quot;age&amp;quot;,14);
        
        // !!!key 值相同(name) 
        //    --&amp;gt; 张三会被覆盖为李四
        map.put(&amp;quot;name&amp;quot;,&amp;quot;李四&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;getkey-获取值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getkey-获取值&#34;&gt;#&lt;/a&gt; .get (key)  获取值&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.get(&amp;quot;name&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;removekey-移除值删除键值对&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#removekey-移除值删除键值对&#34;&gt;#&lt;/a&gt; .remove (key)  移除值 (删除键值对)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.remove(&amp;quot;name&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;containskeykey-判断是否包含key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#containskeykey-判断是否包含key&#34;&gt;#&lt;/a&gt; .containsKey (key)  判断是否包含 key&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.containsKey(&amp;quot;name&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;containsvaluevalue-判断是否包含值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#containsvaluevalue-判断是否包含值&#34;&gt;#&lt;/a&gt; .containsValue (value)   判断是否包含值&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.containsValue(&amp;quot;李四&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size-map的大小一个键值对算一条数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#size-map的大小一个键值对算一条数据&#34;&gt;#&lt;/a&gt; .size ()  map 的大小 (一个键值对算一条数据)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.size();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;isempty-判断是否大小为0-返回值为boolean&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#isempty-判断是否大小为0-返回值为boolean&#34;&gt;#&lt;/a&gt; .isEmpty ( )   判断是否大小为 0 -- 返回值为 Boolean&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.isEmpty();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;clear-清空map删除所有值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clear-清空map删除所有值&#34;&gt;#&lt;/a&gt; .clear ()   清空 Map (删除所有值)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; map.clear();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历&#34;&gt;#&lt;/a&gt; 遍历&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;map 的遍历很少用到 (遍历目的是对数据做集中处理)&lt;br /&gt;
// 1. 只要有 key, 一定会获得 value&lt;br /&gt;
//    --&amp;gt; 无 key 输出 null&lt;br /&gt;
// 2. map 是无序的 (无法使用 fori)&lt;br /&gt;
// 3. &lt;strong&gt;map 和迭代器没有关系&lt;/strong&gt; (迭代器只针对 collection 接口)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;遍历方法1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遍历方法1&#34;&gt;#&lt;/a&gt; 遍历方法 1:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;        // 获取所有的key 遍历所有的key获取value 放入set

        // 拿到所有的key -- 放入set中(?: set 和 key都是不能重复的)
        Set set = map.keySet();
        for (Object key : set) &amp;#123;
            Object v = map.get(key);
            System.out.println(key + &amp;quot;的值是&amp;quot; + v);
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;方法2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法2&#34;&gt;#&lt;/a&gt; 方法 2:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;        // 在Map里面 每一个键值对都是一个entry对象
        // 容量很大,不确定 的时候适合用
        // 不许记忆... 很少用
        Set entrySet = map.entrySet();
        for (Object entry : entrySet) &amp;#123;
            Map.Entry e = (Map.Entry) entry;
            Object key = e.getKey();
            Object value = e.getValue();
            System.out.println(key+&amp;quot;的值是:&amp;quot;+value);
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-03-13T03:31:16.044Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/java/jdbc/</id>
        <title>JDBC</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/java/jdbc/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;全称: Java DataBase Connectivity&lt;br /&gt;
 是 java 语言中，用来规范客户端程序如何来访问数据库的 API (应用程序接口)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;!!JDBC比框架的效率高&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;准备工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备工具&#34;&gt;#&lt;/a&gt; 准备工具&lt;/h2&gt;
&lt;p&gt;JDBC 需要导入 jar 包  ---&amp;gt;  mysql-connector-java-5.1.47.jar&lt;/p&gt;
&lt;h2 id=&#34;操作步骤-增删改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作步骤-增删改&#34;&gt;#&lt;/a&gt; 操作步骤 -- 增，删，改&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以下将一个完整的 JDBC&lt;strong&gt; 添加&lt;/strong&gt;过程拆解成若干步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1准备数据库账户及链接地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1准备数据库账户及链接地址&#34;&gt;#&lt;/a&gt; 1. 准备数据库账户及链接地址&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; public void jdbc() &amp;#123;
	// 添加 ?useSSL=false (false或者true都可以 ,目的是取消控制台的报红--&amp;gt;规定是否使用SSL)
	// 设置成静态的类属性,不用实例化一个对象就能使用
	private static final String URL = &amp;quot;jdbc:mysql://localhost:3306/db0503?useSSL=false&amp;quot;;
    private static final String DRIVER = &amp;quot;com.mysql.jdbc.Driver&amp;quot;;
    private static final String USERNAME = &amp;quot;root&amp;quot;;
    private static final String PASSWORD = &amp;quot;123456&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2加载驱动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2加载驱动&#34;&gt;#&lt;/a&gt; 2. 加载驱动&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;      Connection conn = null;
      PreparedStatement stmt = null;
      try &amp;#123;
            // Class: jar包中封装好的类
            Class.forName(DRIVER);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3建立数据库链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3建立数据库链接&#34;&gt;#&lt;/a&gt; 3. 建立数据库链接&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 	conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4准备sql语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4准备sql语句&#34;&gt;#&lt;/a&gt; 4. 准备 SQL 语句&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;准备 SQL 语句的时候，注意防止 SQL 语句注入&lt;br /&gt;
 SQL 注入 :   ---&amp;gt; 强行进行账户的免密登录等&lt;br /&gt;
利用字符串的拼接，将传入的字符串改为 SQL 语句&lt;br /&gt;
以达到能够强行更改 SQL 的操作；结束 SQL 后面的语句执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;stmt = conn.prepareStatement(&amp;quot;insert into student(name, age, gender) values (?,?,?)&amp;quot;); 
	// 使用这种方式向sql中填值
	// 不论这个数据有多复杂, 都会被安全填入数据库(将特殊符号等转义掉) 
	// 1,2,3对应第1个name 第2个age 第3个gender
 	   stmt.setString(1, &amp;quot;大光&amp;quot;);
       stmt.setInt(2, 30);
       stmt.setString(3, &amp;quot;男&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;对于增删改，不需要像查询一样创建结果集将结果返回获取&lt;br /&gt;
只是在准备 SQL 语句的时候有不同&lt;br /&gt;
实际的数据库操作中，基本不会涉及到数据库中数据的删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;改的SQL语句示例:&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; stmt = conn.prepareStatement(&amp;quot;update student set age=? ,gender=?,name=? where name=?&amp;quot;);
            stmt.setInt(1,38);
            stmt.setString(2,&amp;quot;女&amp;quot;);
            stmt.setString(3,&amp;quot;大刚&amp;quot;);
            stmt.setString(4,&amp;quot;宋浩&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5执行sql语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5执行sql语句&#34;&gt;#&lt;/a&gt; 5. 执行 SQL 语句&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;返回一个 int 值；&lt;br /&gt;
 代表了该语句影响了几行数据 (0 表示未对表做任何改动)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;  int i = stmt.executeUpdate();
   &amp;#125; catch (ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6关闭数据库链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6关闭数据库链接&#34;&gt;#&lt;/a&gt; 6. 关闭数据库链接&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭链接，准备的 SQL 语句才会开始执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; &amp;#125; catch (ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
        // 注意: 必须放入finally中,确保一定会关掉
            try &amp;#123;
                if (stmt != null) &amp;#123;
                // 关闭准备语句
                    stmt.close();
                &amp;#125;
            &amp;#125; catch (SQLException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if (conn != null) &amp;#123;
                // 关闭数据库链接
                    conn.close();
                &amp;#125;
            &amp;#125; catch (SQLException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;操作步骤-查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作步骤-查&#34;&gt;#&lt;/a&gt; 操作步骤 -- 查&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据的查询操作，前期的账户准备和链接建立都一样，&lt;br /&gt;
 主要的不同在于:&lt;br /&gt;
 需要在查询后&lt;strong&gt;创建一个 JDBC 结果集 (.executeQuery ()&lt;/strong&gt;);&lt;br /&gt;
 在准备阶段也要 ** 创建一个结果接收容器 (List)** 用于接收结果集中的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1接收容器声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1接收容器声明&#34;&gt;#&lt;/a&gt; 1. 接收容器声明&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; List&amp;lt;Student&amp;gt; studentList =new ArrayList&amp;lt;&amp;gt;();

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2建立链接查询语句准备结果集准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2建立链接查询语句准备结果集准备&#34;&gt;#&lt;/a&gt; 2. 建立链接，查询语句准备，结果集准备&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;		// 声明 链接
		Connection coon=null;
		// 声明 准备语句
        PreparedStatement stmt=null;
        // 声明 结果集 
        ResultSet rs=null;
         try &amp;#123;
            // 加载驱动 
            Class.forName(DRIVER);
            coon = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            stmt = coon.prepareStatement(&amp;quot;select * from student where age &amp;gt; ?&amp;quot;);
            stmt.setInt(1,15);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3查询-将结果集中的数据遍历添加到接受容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3查询-将结果集中的数据遍历添加到接受容器&#34;&gt;#&lt;/a&gt; 3. 查询，将结果集中的数据遍历添加到接受容器&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 		rs = stmt.executeQuery();
 		            // 对结果集进行遍历 .next方法
 		            // --&amp;gt; 类似 迭代器的.hasNext (确认是否还有值,返回布尔值)
             while ( rs.next())&amp;#123;
                 // 按列名取值
                 int sid = rs.getInt(&amp;quot;sid&amp;quot;);
                 String name = rs.getString(&amp;quot;name&amp;quot;);
                 // 也可以按照列的序号取值
                 int age = rs.getInt(3);
                 String gender = rs.getString(4);
                 System.out.println(sid +&amp;quot;:&amp;quot;+name+&amp;quot;年龄:&amp;quot;+age+&amp;quot;性别:&amp;quot;+gender);

                 // 每次循环都创建一个新的student对象
                 Student stu = new Student();
                 stu.setSid(sid);
                 stu.setAge(age);
                 stu.setName(name);
                 stu.setGender(gender);

                 // 将创建出来的学生对象添加到接受容器(list)中
                 studentList.add(stu);
             &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4关闭链接注意结果集也要关闭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4关闭链接注意结果集也要关闭&#34;&gt;#&lt;/a&gt; 4. 关闭链接 (&lt;span class=&#34;spoiler&#34; title=&#34;你知道得太多了&#34;&gt;注意结果集也要关闭&lt;/span&gt;！)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭：链接；准备语句；结果集&lt;br /&gt;
关闭顺序：后开的先关；先开的后关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;finally &amp;#123;
            try &amp;#123;
                if (rs != null) &amp;#123;
                  // 关闭结果集
                    rs.close();
                &amp;#125;
            &amp;#125; catch (SQLException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;

            try &amp;#123;
                if (stmt != null) &amp;#123;
                  // 关闭SQL语句 
                    stmt.close();
                &amp;#125;
            &amp;#125; catch (SQLException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if (coon != null) &amp;#123;
                // 关闭数据库链接
                    coon.close();
                &amp;#125;
            &amp;#125; catch (SQLException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;jdbc优化-代码封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdbc优化-代码封装&#34;&gt;#&lt;/a&gt; JDBC 优化 -- 代码封装&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;上述的 JDBC 操作有很多的重复地方，&lt;br /&gt;
 可以使用封装来提升代码的复用性&lt;br /&gt;
例如:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次的建立链接和关闭代码都是固定的&lt;/li&gt;
&lt;li&gt;对于增，删，改而言，最大的不同就是准备的 SQL 语句有所不同&lt;/li&gt;
&lt;li&gt;查询的语句虽然不同，&lt;br /&gt;
　但是遍历结果集，传入接收容器的过程都是一样的&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class DBUtil &amp;#123;
    private static final String DRIVE = &amp;quot;com.mysql.jdbc.Driver&amp;quot;;
    private static final String URL = &amp;quot;jdbc:mysql://localhost:3306/db0503?useSSL=true&amp;quot;;
    private static final String USER = &amp;quot;root&amp;quot;;
    private static final String PASSWORD = &amp;quot;123456&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;封装-建立链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装-建立链接&#34;&gt;#&lt;/a&gt; 封装 -- 建立链接&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;建立连接这种纯粹的功能实现，不需要创建对象&lt;br /&gt;
使用静态方法比较好；对象在有存储不同值的场景使用更好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;!!!对于有异常处理的情况, 如果有返回值,**注意在try里面和外面都要写return!!!**&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 返回Connection , 在其他的方法中关闭时使用
public static Connection getConnection() &amp;#123;
        Connection conn=null;
        try &amp;#123;
            Class.forName(DRIVE);
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
		    // 返回链接 --确保无论如何都会返回
            return conn;
        &amp;#125; catch (SQLException | ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        // 返回链接 --确保无论如何都会返回
        return conn;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;封装-关闭链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装-关闭链接&#34;&gt;#&lt;/a&gt; 封装 -- 关闭链接&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭链接时，要考虑是否有查询的情况:&lt;br /&gt;
 如果有查询，则亦需要关闭开启的结果集&lt;br /&gt;
　－－＞通过 &lt;strong&gt;重载&lt;/strong&gt; 来实现方法的适应性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;
 public static void closeAll(Connection conn, PreparedStatement preStmt) &amp;#123;
        try &amp;#123;
            if (preStmt != null) &amp;#123;
                preStmt.close();
            &amp;#125;
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        try &amp;#123;
            if (conn != null) &amp;#123;
                conn.close();
            &amp;#125;
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;

    &amp;#125;
    
    
     /**
     * 适用于数据库查询的连接关闭方法
     * @param conn    jdbc连接对象
     * @param preStmt jdbcSQL语句处理对象
     * @param rs      jdbc查询结果集对象
     */
    // 重载 适用于查询中调用
    public static void closeAll(Connection conn, PreparedStatement preStmt, ResultSet rs) &amp;#123;
        try &amp;#123;
      	  // 关闭额外开启的结果集
            rs.close();
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        // 在重载中调用同名的两个参数的方法
        closeAll(conn, preStmt);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;封装-数据库查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装-数据库查询&#34;&gt;#&lt;/a&gt; 封装 -- 数据库查询&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库的查询封装，需要考虑到 SQL 语句的适应性:&lt;br /&gt;
SQL 语句的查询条件需要的&lt;strong&gt;传入参数 长度和类型都不确定&lt;/strong&gt;&lt;br /&gt;
　－－＞解决：使用 &lt;strong&gt;Object... a&lt;/strong&gt; 不定长参数 (系统自带)&lt;br /&gt;
 不定长参数写法:&lt;br /&gt;
 在参数列表中的最后一个位置，&lt;br /&gt;
 以&lt;strong&gt;类型... 参数名&lt;/strong&gt; (三个 &amp;quot;.&amp;quot; , 且与参数名之间&lt;strong&gt;有空格&lt;/strong&gt;)&lt;br /&gt;
 在方法中以数组的形式存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;public static int updateSQL(String sql, Object... a) &amp;#123;
        Connection conn = null;
        PreparedStatement preStmt = null;
        try &amp;#123;
            conn = getConnection();
            preStmt = conn.prepareStatement(sql);
//            preStmt.setString(1, &amp;quot;娃哦ED&amp;quot;);
//            preStmt.setInt(2, 18);
//            preStmt.setString(3, &amp;quot;男&amp;quot;);
            //
            // 优化: 利用不定长参数 遍历参数a的数组
            for (int i = 0; i &amp;lt; a.length; i++) &amp;#123;
                Object o = a[i];
                preStmt.setObject(i + 1, o);
            &amp;#125;

            int result = preStmt.executeUpdate();
            return result;
        &amp;#125; catch (SQLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            DBUtil.closeAll(conn, preStmt);
        &amp;#125;
        // 如果未执行try内代码 则执行return 0
        return 0;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;commons-dbutils&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commons-dbutils&#34;&gt;#&lt;/a&gt; Commons-DButils&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;阿帕奇组织专门封装的 JDBC 工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;订单&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;这里是说明的开始，顾城，童话诗人，以及坏掉了的人。 &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <updated>2023-03-13T03:31:16.032Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/ding-wei/</id>
        <title>CSS-定位</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/ding-wei/"/>
        <content type="html">&lt;h2 id=&#34;定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定位&#34;&gt;#&lt;/a&gt; 定位&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;定位的使用包含两个部分：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;定位的方式&lt;/li&gt;
&lt;li&gt;偏移值  left,right,top,bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;偏移值准确的理解是 “距离什么位置有多大” 如 top:100px; 距离顶部为 100 像素 （向下走）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;静态定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态定位&#34;&gt;#&lt;/a&gt; 静态定位&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的标准流都是静态定位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;position:static;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;一般用于将某些已经定位的元素还原成标准流，用的很少&lt;/li&gt;
&lt;li&gt;偏移值对于静态定位来说不起作用，我们以后说的元素定位不包括静态定位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相对定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相对定位&#34;&gt;#&lt;/a&gt; 相对定位&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;相对定位是相对自己的标准流的位置进行定位移动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;position:relative;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 移动的出发点是自身标准流的位置
2. 相对定位移动的元素不会对别的元素产生干扰，“没有脱标”，
   真正占得位置还是标准流的位置（肉体不在 灵魂永驻）
3. 可以盖在其他标准流的上方
4. 一般用于微调元素和配合绝对定位来实现效果
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绝对定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绝对定位&#34;&gt;#&lt;/a&gt; 绝对定位&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;position:absolute;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.移动的出发点：
	从绝对元素开始一直往上级找（直到找到最大的html标签），
	在这个过程中，只要有一个元素（A元素）是定位（相对，绝对，固定）的任何一个，
	这个绝对定位的元素就会参照这个A元素进行定位，并且不会在往上找了，
	如果一个都没有，最终会以html元素定位

2.脱标
	1.1. 脱标的元素不占标准流的位置
	1.2. 不会继承父级的宽度，内容有多大就撑多大 （不论块级还是行内）
	1.3. 可以直接写宽高 （不论块级还是行内）
	1.4. margin:auto对于脱标元素不起作用
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;巧妙运用：让一个定位盒子水平垂直居中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;left: 50%;
top: 50%;
margin-left:-自身宽度的一半;
margin-top:-自身高度的一半;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在工作中，绝对定位&amp;quot;大多&amp;quot;配合相对定位一起使用（父相子绝） 
父相：在标准流上占有位置
子绝：针对这个标准流在去移动

注意：父绝子绝的情况也有，只是很少，不要完全形成思维定式。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;固定定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#固定定位&#34;&gt;#&lt;/a&gt; 固定定位&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;position: fixed;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.脱标
	1.1.脱标的元素不占标准流的位置
	1.2.不会继承父级的的宽度，内容有多个就撑多大 （不论块级还是行内）
	1.3.可以直接写宽高 （不论块级还是行内）
	1.4.margin:auto对于脱标元素不起作用
2.移动的出发点：浏览器窗口 （直接表现：滚动条对于固定元素没有作用）
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;四种定位总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四种定位总结&#34;&gt;#&lt;/a&gt; 四种定位总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定位模式&lt;/th&gt;
&lt;th&gt;是否脱标占有位置&lt;/th&gt;
&lt;th&gt;是否可以使用边偏移&lt;/th&gt;
&lt;th&gt;移动位置基准&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;静态 static&lt;/td&gt;
&lt;td&gt;不脱标，正常模式&lt;/td&gt;
&lt;td&gt;不可以&lt;/td&gt;
&lt;td&gt;正常模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;相对定位 relative&lt;/td&gt;
&lt;td&gt;不脱标，占有位置&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;相对自身位置移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绝对定位 absolute&lt;/td&gt;
&lt;td&gt;完全脱标，不占有位置&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;相对于定位的父级移动位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;固定定位 fixed&lt;/td&gt;
&lt;td&gt;完全脱标，不占有位置&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;相对于浏览器移动位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;z-index&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#z-index&#34;&gt;#&lt;/a&gt; z-index&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;控制 “定位” 元素的叠放层级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;z-index 只针对定位元素有效果&lt;/li&gt;
&lt;li&gt;z-index 值越大，层级越高&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;思考：上大盒子压住下大盒子 下大盒子里面的子元素压住上盒子&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果父元素已经比较过层级了（父元素 “都有” z-index 的时候，并且值不为 auto），那么子元素与子元素之间是不会再去比较的&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-03-13T03:31:15.592Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/js-ji-chu/</id>
        <title>JS总结</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/js-ji-chu/"/>
        <content type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;js组成部分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js组成部分&#34;&gt;#&lt;/a&gt; jS 组成部分&lt;/h2&gt;
&lt;p&gt;EMAScript: ES5  ES6  基础语法和标准&lt;br /&gt;
 DOM : 文档元素进行操作&lt;br /&gt;
 BOM : 对浏览器进行操作 browser&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量&#34;&gt;#&lt;/a&gt; 变量&lt;/h2&gt;
&lt;h3 id=&#34;命名规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名规范&#34;&gt;#&lt;/a&gt; 命名规范&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;以数字 字母 下划线 $ 组成，不能以数字开头！！！&lt;/li&gt;
&lt;li&gt;见名知意&lt;/li&gt;
&lt;li&gt;以驼峰结构命名 personName&lt;/li&gt;
&lt;li&gt;不能使用系统关键字 (var body 等)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;var a = 100&lt;br /&gt;
alert (typeof (a) )   //alert 提示框  typeof () 获取类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;number-数字类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#number-数字类型&#34;&gt;#&lt;/a&gt; number (数字类型)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;JS 中没有浮点型，都是 number 类型 (弱类型语言)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;string-字符串类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string-字符串类型&#34;&gt;#&lt;/a&gt; string (字符串类型)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串赋值时使用 &amp;quot;&amp;quot; 包裹内容&lt;br /&gt;
字符串可以进行拼接 (使用 + 号)&lt;br /&gt;
 数值和字符进行拼接时，发生隐式类型转换 (数值 --&amp;gt; 字符串；布尔值 --&amp;gt; 0/1)&lt;br /&gt;
&lt;strong&gt; 注意！！从左到右的顺序 会影响拼接效果&lt;/strong&gt;&lt;br /&gt;
 &amp;quot;3&amp;quot; + 4 + 5  ---&amp;gt; &amp;quot;345&amp;quot; ; 3 + 4 + &amp;quot;5&amp;quot; ---&amp;gt; &amp;quot;75&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;booleanbool-布尔值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#booleanbool-布尔值&#34;&gt;#&lt;/a&gt; boolean (bool) 布尔值&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;只有 true (1) , false (0) 两种&lt;br /&gt;
用作逻辑判断 (if 判断中，亦可遵循 &amp;quot;非 0 即为真&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;undefined&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#undefined&#34;&gt;#&lt;/a&gt; undefined&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;变量定义但未初始化赋值时返回 (空的变量)&lt;br /&gt;
 console 数值为 NaN&lt;br /&gt;
typeof 为 undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;null&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null&#34;&gt;#&lt;/a&gt; null&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;访问一个尚未存在的对象时所返回的值 (空的对象)&lt;br /&gt;
 console 数值为 0   (表示空指针对象)&lt;br /&gt;
 typeof 为 object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符&#34;&gt;#&lt;/a&gt; 运算符&lt;/h2&gt;
&lt;h3 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h3&gt;
&lt;h4 id=&#34;与&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与&#34;&gt;#&lt;/a&gt; &amp;amp;&amp;amp; (与)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以有三个及以上的变量&lt;br /&gt;
 X &amp;amp;&amp;amp; Y &amp;amp;&amp;amp; Z&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;或&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#或&#34;&gt;#&lt;/a&gt; || (或)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;可以有三个及以上的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;非-一元运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非-一元运算符&#34;&gt;#&lt;/a&gt; ! (非，一元运算符)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;经常用来取反&lt;br /&gt;
取反 (=!) 注意与不等 (!=) 区分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;算数运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算数运算符&#34;&gt;#&lt;/a&gt; 算数运算符&lt;/h3&gt;
&lt;h4 id=&#34;取余&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#取余&#34;&gt;#&lt;/a&gt; % (取余)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;取余常用来判断奇偶，提取数字各个位的值 (与 parseInt ()--&amp;gt; 取整 结合使用)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;	//提取百位的值
   var fir = parseInt(d / 100); 
   //提取十位的值 (亦可在提取百位后,减去百位)
   var sec = parseInt(d / 10)%10;
   //提取个位的值
   var thr = d % 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;-自加自减&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-自加自减&#34;&gt;#&lt;/a&gt; ++/-- (自加 / 自减)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;n++ 和 ++n 都是自身值加一 区别在于返回值 (赋值)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;		var n = 3;
        var x = n++;// 先返回(赋值) , 再自加
        var y = ++n;//先自加 , 再返回(赋值)
        console.log(x,n);//输出 x = 3  n = 4
        console.log(y,n);//输出 y = 4  n = 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;-加-减-乘-除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-加-减-乘-除&#34;&gt;#&lt;/a&gt; + - * / (加 减 乘 除)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;注意有简写: +=  -=  *=  /= %=&lt;br /&gt;
i += 2  等价于 i = i + 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;比较运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比较运算符&#34;&gt;#&lt;/a&gt; 比较运算符&lt;/h3&gt;
&lt;h4 id=&#34;不等式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不等式&#34;&gt;#&lt;/a&gt; 不等式 &amp;lt;&amp;lt;=&amp;gt; &amp;gt;= !=&lt;/h4&gt;
&lt;h4 id=&#34;等式-数值相等即为相等-严格相等类型也要相等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等式-数值相等即为相等-严格相等类型也要相等&#34;&gt;#&lt;/a&gt; 等式  == --&amp;gt; 数值相等即为相等  === --&amp;gt; 严格相等 (类型也要相等)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;		var z = &amp;quot;10&amp;quot; == 10;//值相等即为相等
        console.log(z);//true  自动类型转换 将数字转换为字符串

        var m = &amp;quot;10&amp;quot; === 10;//值和类型完全相等才行
        console.log(m);//false
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;三目运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三目运算符&#34;&gt;#&lt;/a&gt; 三目运算符&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;var  x  = 判断条件？成立时执行语句：不成立执行语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var c = a &amp;gt; b ? a : b;// &amp;quot;?&amp;quot;条件成立 返回 a 值给 c; 不成立 返回 b 值给 c

//冒号前后可使用表达式 数值 字符串等各种内容
var d = a &amp;gt; b &amp;amp;&amp;amp; a &amp;gt; 0 ? a + b : a - b;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;分支结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支结构&#34;&gt;#&lt;/a&gt; 分支结构&lt;/h2&gt;
&lt;h3 id=&#34;if&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if&#34;&gt;#&lt;/a&gt; if ...&lt;/h3&gt;
&lt;h3 id=&#34;if-else&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if-else&#34;&gt;#&lt;/a&gt; if ... else ...&lt;/h3&gt;
&lt;h3 id=&#34;if-else-if-else-if-else&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if-else-if-else-if-else&#34;&gt;#&lt;/a&gt; if ... else if...  else if ... else&lt;/h3&gt;
&lt;h3 id=&#34;switch-case-break-case-break-default-break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#switch-case-break-case-break-default-break&#34;&gt;#&lt;/a&gt; switch ... case break ...  case break ... default break&lt;/h3&gt;
&lt;h2 id=&#34;元素获取-操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元素获取-操作&#34;&gt;#&lt;/a&gt; 元素获取 操作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;只有对 class 进行属性赋值的时候，注意为 className 不是 class&lt;br /&gt;
 更改样式属性时，生成行间样式&lt;br /&gt;
 innerHTML 是一种属性&lt;br /&gt;
 document.write () 是一种方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;  var oName = document.getElementById(&amp;quot;name&amp;quot;);
  oName.style.backgroundColor = &amp;quot;red&amp;quot;;
  oName.className = &amp;quot;name&amp;quot;
  
  //获取或设置的标签里面的内容 -- 内容指标签内的所有子标签及文本
  //常用作 设置文本 
  var str = oName.innerHTML;
  oName.innerHTML = &amp;quot;西红柿牛腩&amp;quot;;
  
  //清空标签内的内容
  oName.innerHTML = &amp;quot;&amp;quot;;
  
  document.write(&amp;quot;&amp;lt;div class= &#39;name&#39; &amp;gt;哈哈哈哈哈&amp;lt;/div&amp;gt;&amp;quot;);
  document.write(&amp;quot;&amp;lt;div class= \&amp;quot;name\&amp;quot; &amp;gt;哈哈哈哈&amp;lt;/div&amp;gt;&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环&#34;&gt;#&lt;/a&gt; 循环&lt;/h2&gt;
&lt;h3 id=&#34;for-循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for-循环&#34;&gt;#&lt;/a&gt; for 循环&lt;/h3&gt;
&lt;h3 id=&#34;while-循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while-循环&#34;&gt;#&lt;/a&gt; while 循环&lt;/h3&gt;
&lt;h3 id=&#34;循环结束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环结束&#34;&gt;#&lt;/a&gt; 循环结束&lt;/h3&gt;
&lt;h4 id=&#34;break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#break&#34;&gt;#&lt;/a&gt; break&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;完全跳出循环，循环结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;continue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#continue&#34;&gt;#&lt;/a&gt; continue&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;结束本次循环，循环继续&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;math方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#math方法&#34;&gt;#&lt;/a&gt; Math 方法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt; 	    // 1. π
        console.log(Math.PI);

        // 2. max
        var max = Math.max(32,545,65,24,-3534);
        console.log(max);

        // 3. min 
        var min = Math.min(32,545,65,24,-3534);
        console.log(min);

        // 4.向上取整
        console.log(Math.ceil(1.1));// 2
        console.log(Math.ceil(1.9));// 2
        console.log(Math.ceil(-1.1));// -1

        // 5. 向下取整
        console.log(Math.floor(1.1));// 1
        console.log(Math.floor(-1.1));// -2

        // 6. !!!四舍五入
        console.log(Math.round(3.2));//3
        console.log(Math.round(3.5));//4

        // 7. !!!取绝对值
        console.log(Math.abs(-100));// 100
        console.log(Math.abs(100));//100

        // 8. Math.pow(a,b) a的b次方
        console.log(Math.pow(5,3));
        
        // 9. Math.sqrt() 开方
        console.log(Math.sqrt(81));

        // 10. 随机数 [0 , 1) 可随机出0
        console.log(Math.random());


        //Math.floor(Math.random()* (max - min + 1) + min)
        var a = Math.floor(Math.random()*(99 - 66 + 1) + 66); // 取值范围: [ ]
        console.log(a);

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器&#34;&gt;#&lt;/a&gt; 定时器&lt;/h2&gt;
&lt;h3 id=&#34;interva定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#interva定时器&#34;&gt;#&lt;/a&gt; Interva 定时器&lt;/h3&gt;
&lt;h3 id=&#34;timeout定时器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#timeout定时器&#34;&gt;#&lt;/a&gt; Timeout 定时器&lt;/h3&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h2&gt;
&lt;h3 id=&#34;无参无返回&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无参无返回&#34;&gt;#&lt;/a&gt; 无参无返回&lt;/h3&gt;
&lt;h3 id=&#34;有参无返回&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有参无返回&#34;&gt;#&lt;/a&gt; 有参无返回&lt;/h3&gt;
&lt;h3 id=&#34;无参无返回-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无参无返回-2&#34;&gt;#&lt;/a&gt; 无参无返回&lt;/h3&gt;
&lt;h2 id=&#34;offset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#offset&#34;&gt;#&lt;/a&gt; offset&lt;/h2&gt;
&lt;h3 id=&#34;offsetleft&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#offsetleft&#34;&gt;#&lt;/a&gt; offsetLeft&lt;/h3&gt;
&lt;h3 id=&#34;offsettop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#offsettop&#34;&gt;#&lt;/a&gt; offsetTop&lt;/h3&gt;
</content>
        <updated>2023-03-13T03:31:15.580Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/js-xuan-ze-qi/</id>
        <title>js选择器</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/js-xuan-ze-qi/"/>
        <content type="html">&lt;h3 id=&#34;基本选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本选择器&#34;&gt;#&lt;/a&gt; 基本选择器&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;id 选择器&lt;/li&gt;
&lt;li&gt;类选择器&lt;/li&gt;
&lt;li&gt;标签选择器&lt;/li&gt;
&lt;li&gt;通配符选择器&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;优先级:&lt;br /&gt;
 继承 &amp;lt; 通配符 &amp;lt; 标签选择器 &amp;lt; 类选择器 &amp;lt; ID 选择器 &amp;lt; 行内样式 &amp;lt;　!important&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合选择器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 群组选择器&lt;br /&gt;
 2. 后代选择器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;属性选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性选择器&#34;&gt;#&lt;/a&gt; 属性选择器&lt;/h3&gt;
&lt;h4 id=&#34;语法例标签后中接属性选择包含特定属性的元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法例标签后中接属性选择包含特定属性的元素&#34;&gt;#&lt;/a&gt; 语法例:	标签后 [] 中接属性，选择包含特定属性的元素&lt;/h4&gt;
&lt;h4 id=&#34;无优先级看执行顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无优先级看执行顺序&#34;&gt;#&lt;/a&gt; 无优先级，看执行顺序&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
   a[href]&amp;#123;
   		&amp;#125;     []内  
   		p[class]&amp;#123;
				color: deepskyblue;
			&amp;#125;
			
	a[href=&amp;quot;####&amp;quot;]&amp;#123;
				color: gray;
			&amp;#125;
&amp;lt;/style&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;!--a[href=&amp;quot;#&amp;quot;]&amp;#123;&amp;#125;--&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;title&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;p class=&amp;quot;title&amp;quot;&amp;gt;中午吃点啥&amp;lt;/p&amp;gt;
		&amp;lt;p&amp;gt;我也不知道&amp;lt;/p&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;####&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a &amp;gt;cc&amp;lt;/a&amp;gt;
	&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;结构选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构选择器&#34;&gt;#&lt;/a&gt; 结构选择器&lt;/h3&gt;
&lt;p&gt;1. 子代元素选择&lt;br /&gt;
 div&amp;gt;span&lt;br /&gt;
&lt;strong&gt; 只能选择儿子辈标签，不能跨级选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 紧邻元素选择&lt;br /&gt;
 span+a&lt;br /&gt;
&lt;strong&gt; 对紧接着的 span 下面的第一个 a 标签进行选择，其余的同类标签不会选中&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;伪类选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伪类选择器&#34;&gt;#&lt;/a&gt; 伪类选择器&lt;/h3&gt;
&lt;p&gt;:not  &amp;quot;反向&amp;quot; 选择&lt;br /&gt;
:not (.color)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*未设置成.color的*/
			:not(.color)&amp;#123;
				color: blue;
			&amp;#125;
			
			:not(div .color)&amp;#123;
				color: goldenrod;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:nth- &amp;quot;序列&amp;quot; 选择&lt;br /&gt;
可以设置 n 为负值，eg:nth-of-type (-n+5)--n&lt;br /&gt;
 从 0 开始取值，只能选中前 5 个子代元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /*所有父标签中的第二个标签,如果是p标签,选择器可以选中*/
			/*第二个不是p标签则无效*/
			p:nth-child(2)&amp;#123;
				color: red;
			&amp;#125;
			&amp;lt;!--倒序查找选择--&amp;gt;
			p:nth-last-child(4)&amp;#123;
				color: red;
			&amp;#125;
			p:nth-of-type(2)&amp;#123;
				color: blue;
			&amp;#125;
			 
			/*n从0开始*/
			p:nth-of-type(2n+1)&amp;#123;
				color: gray;
			&amp;#125;
			
			/*倒数第几个*/
			p:nth-last-of-type(1)&amp;#123;
				color: deepskyblue;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;			p:first-of-type&amp;#123;
				color: red;
			&amp;#125;
			p:last-of-type&amp;#123;
				color: greenyellow;
			&amp;#125;
			
			/*所有父标签中p标签只有一个*/
			p:only-of-type&amp;#123;
				color: red; 
			&amp;#125;
			
			/*所有父标签中只有一个子标签,并且是p标签*/
			p:only-child&amp;#123;
				color: skyblue;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-03-13T03:31:15.568Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/html-ji-chu/</id>
        <title>HTML基础</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/html-ji-chu/"/>
        <content type="html">&lt;h1 id=&#34;html模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html模板&#34;&gt;#&lt;/a&gt; html 模板&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--申明一个HTML文档--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--代表一个网页的整体--&amp;gt;
&amp;lt;html&amp;gt;
	&amp;lt;!--展示网页标题，样式等--&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;!--设置编码格式，防止乱码（UTF-8 常用编码格式）--&amp;gt;
		&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
		&amp;lt;!--设置网页标题--&amp;gt;
		&amp;lt;title&amp;gt;百度一下&amp;lt;/title&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;!--网页主体（直观见到的）--&amp;gt;
	&amp;lt;body&amp;gt;
		
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;项目文件创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目文件创建&#34;&gt;#&lt;/a&gt; 项目文件创建&lt;/h1&gt;
&lt;p&gt;**img 😗* 项目图片资源，可以有子文件夹，对不同的页面分类&lt;/p&gt;
&lt;p&gt;**js 😗* 外部引入的 js 文件&lt;/p&gt;
&lt;p&gt;**css 😗* 外部引入的 css 文件，比如 normalize.css, 或框架 css 文件&lt;/p&gt;
&lt;p&gt;**index/home.html 😗* 首页&lt;br /&gt;
&lt;strong&gt; favicon.ico&lt;/strong&gt; : 浏览器标签栏图标&lt;/p&gt;
&lt;h1 id=&#34;标签分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签分类&#34;&gt;#&lt;/a&gt; 标签分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模板 功能类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; html body head link title style meta strong  em   
 link: 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;块标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; div h1~h6 p ul ol li  br hr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;特性:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;display:block&lt;/li&gt;
&lt;li&gt;占父级的一行&lt;/li&gt;
&lt;li&gt;可以嵌套块标签和行标签 (p 标签只能嵌套行标签)&lt;/li&gt;
&lt;li&gt;居中：给&lt;strong&gt;本身&lt;/strong&gt;加 margin: 0 auto&lt;/li&gt;
&lt;li&gt;可以设置宽高，不设置高度时，由内容撑开&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行标签&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;span a img i  b sub sup input  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;display:inline&lt;/li&gt;
&lt;li&gt;多个行标签可在一行显示&lt;/li&gt;
&lt;li&gt;不能设置宽高，默认由内容撑开&lt;/li&gt;
&lt;li&gt;行标签可以嵌套行标签&lt;/li&gt;
&lt;li&gt;居中：给父标签加 : text-align:center&lt;/li&gt;
&lt;li&gt;垂直方向 margin,padding 失效&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;表单&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;form tbody  label input select textarea 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;表格&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;table tr td th  
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择器&#34;&gt;#&lt;/a&gt; 选择器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本选择器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;id 选择器&lt;/li&gt;
&lt;li&gt;类选择器&lt;/li&gt;
&lt;li&gt;标签选择器&lt;/li&gt;
&lt;li&gt;通配符选择器&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;优先级:&lt;br /&gt;
 继承 &amp;lt; 通配符 &amp;lt; 标签选择器 &amp;lt; 类选择器 &amp;lt; ID 选择器 &amp;lt; 行内样式 &amp;lt;　!important&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合选择器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 群组选择器&lt;br /&gt;
 2. 后代选择器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布局&#34;&gt;#&lt;/a&gt; 布局&lt;/h1&gt;
&lt;h3 id=&#34;盒模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#盒模型&#34;&gt;#&lt;/a&gt; 盒模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;margin  : 垂直方向合并问题&lt;/li&gt;
&lt;li&gt;padding&lt;/li&gt;
&lt;li&gt;box-sizing : border-box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;兄弟关系用 margin, 父子关系用 padding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;### 浮动&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浮动最早是解决文字环绕问题，现在一般用来做左右布局使用，使用时注意清浮动.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;清浮动: overflow : hidden&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浮动元素的特性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;浮动元素不占文档流&lt;/li&gt;
&lt;li&gt;设置成浮动后不再具有行块标签的特性，称为浮动元素&lt;/li&gt;
&lt;li&gt;浮动元素可以设置宽高，默认由内容撑开&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：浮动元素的兄弟标签都要为浮动&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;定位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定位&#34;&gt;#&lt;/a&gt; 定位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;static&lt;/strong&gt; 默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fixed&lt;/strong&gt; 固定定位&lt;/p&gt;
&lt;p&gt;特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相对于浏览器定位&lt;/li&gt;
&lt;li&gt;不占文档流&lt;/li&gt;
&lt;li&gt;不再是行块标签，成为定位元素&lt;/li&gt;
&lt;li&gt;可以设置宽高，由内容撑开&lt;/li&gt;
&lt;li&gt;一般用作导航 / 导航弹出框等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;relative&lt;/strong&gt; 相对定位&lt;/p&gt;
&lt;p&gt;特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相对于自身定位&lt;/li&gt;
&lt;li&gt;占文档流&lt;/li&gt;
&lt;li&gt;不改变标签本身特性&lt;/li&gt;
&lt;li&gt;一般用来做微调或者是绝对定位的父级&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;absolute&lt;/strong&gt; 绝对定位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相对于最近的定位父级 (从父标签往外找) , 如果没有定位父级，相对于浏览器定位&lt;br /&gt;
 2. 不占文档流&lt;br /&gt;
 3. 不再是行块标签，成为定位元素&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;**top / left / right / bottom / z-index :只能和定位配合使用**  
**定位居中**
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;css样式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css样式&#34;&gt;#&lt;/a&gt; css 样式&lt;/h1&gt;
&lt;h3 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;#&lt;/a&gt; 背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;background&lt;/li&gt;
&lt;li&gt;background-image&lt;/li&gt;
&lt;li&gt;background-color&lt;/li&gt;
&lt;li&gt;background-size: 水平 垂直&lt;/li&gt;
&lt;li&gt;background-repeat&lt;/li&gt;
&lt;li&gt;background-position&lt;/li&gt;
&lt;li&gt;background-clip&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字体&#34;&gt;#&lt;/a&gt; 字体&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;font-size&lt;/li&gt;
&lt;li&gt;font-famliy&lt;/li&gt;
&lt;li&gt;font-style&lt;/li&gt;
&lt;li&gt;font-weight&lt;/li&gt;
&lt;li&gt;font-height&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;text-decoration  (下划线等)&lt;/li&gt;
&lt;li&gt;text-align&lt;/li&gt;
&lt;li&gt;text-shadow&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;杂七杂八&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#杂七杂八&#34;&gt;#&lt;/a&gt; 杂七杂八&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;border-radius&lt;/li&gt;
&lt;li&gt;list-style&lt;/li&gt;
&lt;li&gt;cursor&lt;/li&gt;
&lt;li&gt;vertical-align&lt;/li&gt;
&lt;li&gt;box-shadow&lt;/li&gt;
&lt;li&gt;box-sizing&lt;/li&gt;
&lt;li&gt;overflow&lt;/li&gt;
&lt;li&gt;outline (input 点击后的边框)&lt;/li&gt;
&lt;li&gt;max-width&lt;/li&gt;
&lt;li&gt;min-width&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;透明度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#透明度&#34;&gt;#&lt;/a&gt; 透明度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;opcity&lt;/li&gt;
&lt;li&gt;filter : alpha () -- 适配 IE&lt;/li&gt;
&lt;li&gt;rgba&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;隐藏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏&#34;&gt;#&lt;/a&gt; 隐藏&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;display: none ; 不占文档流&lt;/li&gt;
&lt;li&gt;visibility : hidden ; 占文档流&lt;/li&gt;
&lt;li&gt;透明度为 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;颜色值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#颜色值&#34;&gt;#&lt;/a&gt; 颜色值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单词&lt;/li&gt;
&lt;li&gt;rgb&lt;/li&gt;
&lt;li&gt;rgba&lt;/li&gt;
&lt;li&gt;十六进制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单位&#34;&gt;#&lt;/a&gt; 单位&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;px&lt;/li&gt;
&lt;li&gt;em&lt;/li&gt;
&lt;li&gt;rem&lt;/li&gt;
&lt;li&gt;deg&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;h5新增标签和选择器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#h5新增标签和选择器&#34;&gt;#&lt;/a&gt; H5 新增标签和选择器&lt;/h1&gt;
&lt;h3 id=&#34;新增标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新增标签&#34;&gt;#&lt;/a&gt; 新增标签&lt;/h3&gt;
&lt;p&gt;audio 	video	 canvas&lt;br /&gt;
header footer nav  main.....&lt;/p&gt;
&lt;h3 id=&#34;选择器-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择器-2&#34;&gt;#&lt;/a&gt; 选择器&lt;/h3&gt;
&lt;p&gt;属性选择器&lt;/p&gt;
&lt;p&gt;伪类选择器&lt;/p&gt;
&lt;h1 id=&#34;过渡2d-3d变换动画&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过渡2d-3d变换动画&#34;&gt;#&lt;/a&gt; 过渡 / 2D 3D 变换 / 动画&lt;/h1&gt;
&lt;h3 id=&#34;过渡-transition&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过渡-transition&#34;&gt;#&lt;/a&gt; 过渡   transition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;常用 : transition all 1s liner (匀速) ;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2d-变换-transform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2d-变换-transform&#34;&gt;#&lt;/a&gt; 2D 变换 transform&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;transform : translate();&lt;/li&gt;
&lt;li&gt;transform : scale();&lt;/li&gt;
&lt;li&gt;transform: rotate(..deg);&lt;/li&gt;
&lt;li&gt;transform;skew(..deg);&lt;/li&gt;
&lt;li&gt;transform-orgin: 基准点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3d-变换-开3d-景深&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3d-变换-开3d-景深&#34;&gt;#&lt;/a&gt; 3D 变换  -&amp;gt; 开 3D 景深&lt;/h3&gt;
&lt;h3 id=&#34;动画-animation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动画-animation&#34;&gt;#&lt;/a&gt; 动画  animation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义动画效果 @keyframes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 动画库 : animate.css 使用方式两种 **&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;css/animate.css&amp;quot;/&amp;gt;

&amp;lt;!--第一种--&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
	animation: heartBeat  3s;
&amp;lt;/style&amp;gt;

&amp;lt;!--第二种  !!!class中记得加animated!!!--&amp;gt;
&amp;lt;div class=&amp;quot;animated heartBeat&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;响应式布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应式布局&#34;&gt;#&lt;/a&gt; 响应式布局&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;更适用于移动端，来对不同的屏幕做适配，PC 端使用的话，页面不会太复杂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;移动端布局，必须添加 viewport&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;流式布局百分比布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流式布局百分比布局&#34;&gt;#&lt;/a&gt; 流式布局 / 百分比布局&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;宽度：本身宽度 / 父级的宽度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高度：本身高度 / 父级的高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定位值 :&lt;/p&gt;
&lt;p&gt;纵向定位 (top bottom) / 定位父级的高度&lt;br /&gt;
横向定位 (left right) / 定位父级的宽度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;盒模型 (margin padding)&lt;/p&gt;
&lt;p&gt;盒模型纵向  纵向值 / 父级的宽度盒模型横向&lt;br /&gt;
横向值 / 父级的宽度？: 多数情况高度由文档流撑开&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;媒体查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#媒体查询&#34;&gt;#&lt;/a&gt; 媒体查询&lt;/h3&gt;
&lt;p&gt;@media only screen and (min-width:980px )&lt;br /&gt;
@media only screen and (max-width:600px )&lt;br /&gt;
@media only screen and (min-width: 700px) and (max-width: 800px)&lt;/p&gt;
&lt;h1 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h1&gt;
&lt;h3 id=&#34;字体图标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字体图标&#34;&gt;#&lt;/a&gt; 字体图标&lt;/h3&gt;
&lt;h3 id=&#34;滑动门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#滑动门&#34;&gt;#&lt;/a&gt; 滑动门&lt;/h3&gt;
&lt;h3 id=&#34;精灵图雪碧图-http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#精灵图雪碧图-http&#34;&gt;#&lt;/a&gt; 精灵图 / 雪碧图 [http]&lt;/h3&gt;
&lt;h3 id=&#34;hover效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hover效果&#34;&gt;#&lt;/a&gt; hover 效果&lt;/h3&gt;
&lt;h3 id=&#34;锚点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#锚点&#34;&gt;#&lt;/a&gt; 锚点&lt;/h3&gt;
&lt;h3 id=&#34;线性渐变-径向渐变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性渐变-径向渐变&#34;&gt;#&lt;/a&gt; 线性渐变 径向渐变&lt;/h3&gt;
</content>
        <updated>2023-03-13T03:31:15.556Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/h5-xin-zeng/</id>
        <title>H5新增内容总结</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/h5-xin-zeng/"/>
        <content type="html">&lt;p&gt;## 新增标签&lt;/p&gt;
&lt;p&gt;### 音频标签 - audio&lt;/p&gt;
&lt;p&gt;可以设置宽、高&lt;br /&gt;
支持文件格式：mp3 wav ogg&lt;br /&gt;
&lt;strong&gt;audio  中可以放置文本，在浏览器不支持此标签时显示。可以插入背景图&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;audio &amp;quot; src=&amp;quot;source/群星 - 大力哥 浑身难受 Rap.mp3&amp;quot;   
   autoplay=&amp;quot;autoplay&amp;quot;   
   controls=&amp;quot;controls&amp;quot; 
   loop=&amp;quot;loop&amp;quot;
   preload=&amp;quot;auto&amp;quot;&amp;gt;	  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;### 视频标签 video&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-&amp;lt;video&#34;&gt; autoplay=&amp;quot;autoplay&amp;quot;  
  muted=&amp;quot;muted&amp;quot; //静音   
  width=&amp;quot;400&amp;quot;   
  height=&amp;quot;600&amp;quot;   
  controls=&amp;quot;&amp;quot;   
  poster=&amp;quot;添加图片&amp;quot;&amp;gt;  
  &amp;lt;/video&amp;gt;
		
		&amp;lt;video width=&amp;quot;800&amp;quot; height=&amp;quot;&amp;quot;&amp;gt;
			自动匹配可用的文件格式
			&amp;lt;source src=&amp;quot;myvideo.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&amp;lt;/source&amp;gt;
			&amp;lt;source src=&amp;quot;myvideo.ogv&amp;quot; type=&amp;quot;video/ogg&amp;quot;&amp;gt;&amp;lt;/source&amp;gt;
			&amp;lt;source src=&amp;quot;myvideo.webm&amp;quot; type=&amp;quot;video/webm&amp;quot;&amp;gt;&amp;lt;/source&amp;gt;	
			&amp;lt;object width=&amp;quot;&amp;quot; height=&amp;quot;&amp;quot; type=&amp;quot;application/x-shockwave-flash&amp;quot; data=&amp;quot;myvideo.swf&amp;quot;&amp;gt;
				&amp;lt;param name=&amp;quot;movie&amp;quot; value=&amp;quot;myvideo.swf&amp;quot; /&amp;gt;
				&amp;lt;param name=&amp;quot;flashvars&amp;quot; value=&amp;quot;autostart=true&amp;amp;amp;file=myvideo.swf&amp;quot; /&amp;gt;
			&amp;lt;/object&amp;gt;
			当前浏览器不支持 video直接播放，点击这里下载视频： &amp;lt;a href=&amp;quot;myvideo.webm&amp;quot;&amp;gt;下载视频&amp;lt;/a&amp;gt;
		&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###body 内可代替 div 的标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!--相当于&amp;lt;div class=&amp;quot;nav&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;
		&amp;lt;nav&amp;gt;用于作为导航&amp;lt;/nav&amp;gt;
		
		&amp;lt;!--header内不能嵌套header标签--&amp;gt;
		&amp;lt;header&amp;gt;用来定义文档或文档一部分区域的头部&amp;lt;/header&amp;gt;
		
		&amp;lt;section&amp;gt;用于划分区域&amp;lt;/section&amp;gt;
		
		
		&amp;lt;!--一个页面只能出现一个main元素
		     不能嵌套在header footer article aside内部
		--&amp;gt;
		&amp;lt;main&amp;gt;页面主体部分&amp;lt;/main&amp;gt;
		
		&amp;lt;aside&amp;gt;可用作文章的侧栏&amp;lt;/aside&amp;gt;
		
		
		&amp;lt;!--画布 h5新增--&amp;gt;
		&amp;lt;canvas&amp;gt;666666&amp;lt;/canvas&amp;gt;
		
		&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;## 新增选择器&lt;br /&gt;
 ### 属性选择器&lt;br /&gt;
 #### 语法例:	标签后 [] 中接属性，选择包含特定属性的元素&lt;br /&gt;
 #### 无优先级，看执行顺序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
   a[href]&amp;#123;
   		&amp;#125;     []内  
   		p[class]&amp;#123;
				color: deepskyblue;
			&amp;#125;
			
	a[href=&amp;quot;####&amp;quot;]&amp;#123;
				color: gray;
			&amp;#125;
&amp;lt;/style&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;!--a[href=&amp;quot;#&amp;quot;]&amp;#123;&amp;#125;--&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;title&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;p class=&amp;quot;title&amp;quot;&amp;gt;中午吃点啥&amp;lt;/p&amp;gt;
		&amp;lt;p&amp;gt;我也不知道&amp;lt;/p&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;####&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
		&amp;lt;a &amp;gt;cc&amp;lt;/a&amp;gt;
	&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;### 结构选择器&lt;br /&gt;
 1. 子代元素选择&lt;br /&gt;
 div&amp;gt;span&lt;br /&gt;
&lt;strong&gt; 只能选择儿子辈标签，不能跨级选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2. 紧邻元素选择&lt;br /&gt;
 span+a&lt;br /&gt;
&lt;strong&gt; 对紧接着的 span 下面的第一个 a 标签进行选择，其余的同类标签不会选中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;### 伪类选择器&lt;br /&gt;
:not  &amp;quot;反向&amp;quot; 选择&lt;br /&gt;
:not (.color)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*未设置成.color的*/
			:not(.color)&amp;#123;
				color: blue;
			&amp;#125;
			
			:not(div .color)&amp;#123;
				color: goldenrod;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:nth- &amp;quot;序列&amp;quot; 选择&lt;br /&gt;
可以设置 n 为负值，eg:nth-of-type (-n+5)--n&lt;br /&gt;
 从 0 开始取值，只能选中前 5 个子代元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /*所有父标签中的第二个标签,如果是p标签,选择器可以选中*/
			/*第二个不是p标签则无效*/
			p:nth-child(2)&amp;#123;
				color: red;
			&amp;#125;
			&amp;lt;!--倒序查找选择--&amp;gt;
			p:nth-last-child(4)&amp;#123;
				color: red;
			&amp;#125;
			p:nth-of-type(2)&amp;#123;
				color: blue;
			&amp;#125;
			 
			/*n从0开始*/
			p:nth-of-type(2n+1)&amp;#123;
				color: gray;
			&amp;#125;
			
			/*倒数第几个*/
			p:nth-last-of-type(1)&amp;#123;
				color: deepskyblue;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;			p:first-of-type&amp;#123;
				color: red;
			&amp;#125;
			p:last-of-type&amp;#123;
				color: greenyellow;
			&amp;#125;
			
			/*所有父标签中p标签只有一个*/
			p:only-of-type&amp;#123;
				color: red; 
			&amp;#125;
			
			/*所有父标签中只有一个子标签,并且是p标签*/
			p:only-child&amp;#123;
				color: skyblue;
			&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-03-13T03:31:15.548Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/dom-cao-zuo/</id>
        <title>DOM操作</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/dom-cao-zuo/"/>
        <content type="html">&lt;h3 id=&#34;获取元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取元素&#34;&gt;#&lt;/a&gt; 获取元素&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
	var oName = document.getElementById(&amp;quot;name&amp;quot;);
	oName.onclick = function () &amp;#123;
		oName.style.backgroundColor = &amp;quot;red&amp;quot;;
		oName.className = &amp;quot;name&amp;quot;;
	&amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;.onclick: 点击事件，可以给任何标签绑定，点击该标签时才会执行 function 中的代码&lt;/p&gt;
&lt;p&gt;.style.backgroundColor: 设置行间样式，background-color 等多个单词的形式，在 js 中变成驼峰结构&lt;/p&gt;
&lt;p&gt;.className: 设置或更改类名 (除类名外其他属性名都和标签中的一致)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;innerhtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innerhtml&#34;&gt;#&lt;/a&gt; innerHTML&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;	&amp;lt;div id=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        var oName = document.getElementById(&amp;quot;name&amp;quot;);

        oName.onclick = function () &amp;#123;
            var str = oName.innerHTML;
            console.log(str);

            // 清空标签里的内容
            oName.innerHTML = &amp;quot;&amp;quot;;
        &amp;#125;

    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;若获取的标签是双标签，想获取标签间的内容可以用 innerHTML 属性，innerHTML 指标签中间的所有内容包括其他标签.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;文档写入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文档写入&#34;&gt;#&lt;/a&gt; 文档写入&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;script&amp;gt;
        document.write(&amp;quot;123&amp;quot;);
        document.write(&amp;quot;&amp;lt;div class=\&amp;quot;name\&amp;quot;&amp;gt;\\&amp;lt;/div&amp;gt;&amp;quot;);
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;document.write 中写的所有内容都会显示在 HTML 中&lt;/p&gt;
&lt;p&gt;若引号中还需要加引号，可以用单引号代替或使用转义字符：(\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tagname&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tagname&#34;&gt;#&lt;/a&gt; tagName&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var oDivs = document.getElementsByTagName(&amp;quot;div&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;获取页面中所有 div&lt;/p&gt;
&lt;p&gt;oDivs 不是数组，但可以当成数组操作获取内部元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var oStudent = document.getElementById(&amp;quot;student&amp;quot;);
var oLink = oStudent.getElementsByTagName(&amp;quot;a&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;获取 id 是 student 标签内部的所有 a 标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;鼠标移入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鼠标移入&#34;&gt;#&lt;/a&gt; 鼠标移入&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;onmouseover&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        var oDiv1 = document.getElementById(&amp;quot;div1&amp;quot;);
        
        oDiv1.onmouseover = function () &amp;#123;
            console.log(&amp;quot;鼠标移入&amp;quot;);
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;鼠标移出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鼠标移出&#34;&gt;#&lt;/a&gt; 鼠标移出&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;onmouseout&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        var oDiv1 = document.getElementById(&amp;quot;div1&amp;quot;);

        oDiv1.onmouseout = function () &amp;#123;
            console.log(&amp;quot;鼠标移出&amp;quot;);
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;获取dom节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取dom节点&#34;&gt;#&lt;/a&gt; 获取 DOM 节点&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;        // 准备代码
        var oAll = document.getElementById(&amp;quot;all&amp;quot;);
        var oDivs = oAll.getElementsByTagName(&amp;quot;div&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;获取子标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取子标签&#34;&gt;#&lt;/a&gt; 获取子标签&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;oAll.children// 获取子标签
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;创建元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建元素&#34;&gt;#&lt;/a&gt; 创建元素&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;var newDiv = document.createElement(&amp;quot;div&amp;quot;);
// js创建的标签元素和从页面获取的一样可以设置样式和内容等
newDiv.innerHTML = &amp;quot;hah&amp;quot;;
newDiv.className = &amp;quot;name&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;在某标签末尾添加元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在某标签末尾添加元素&#34;&gt;#&lt;/a&gt; 在某标签末尾添加元素&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-0&#34;&gt;oAll.appendChild(newDiv);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;在指定位置添加元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在指定位置添加元素&#34;&gt;#&lt;/a&gt; 在指定位置添加元素&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;oAll.insertBefore(新元素A, 子元素B);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除元素&#34;&gt;#&lt;/a&gt; 删除元素&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;父标签删除子标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;父标签.removeChild(子标签)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;自身删除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;newDiv.remove();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;替换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#替换&#34;&gt;#&lt;/a&gt; 替换&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;oAll.replaceChild(新标签, 被替换的子标签)

var theA = document.createElement(&amp;quot;a&amp;quot;);
theA.href = &amp;quot;#&amp;quot;;// 没有设置href属性时,a标签没有默认样式
oAll.replaceChild(theA, oAll.children[0]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;获取父节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取父节点&#34;&gt;#&lt;/a&gt; 获取父节点&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;theA.parentNode
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-03-13T03:31:15.536Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qian-duan/js-h5/css-dong-tai-xiao-guo/</id>
        <title>css动态效果总结</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qian-duan/js-h5/css-dong-tai-xiao-guo/"/>
        <content type="html">&lt;p&gt;##transition (过渡样式)&lt;br /&gt;
### 可设定过渡的时间 延时时间 速度曲线 指定某个过渡的元素&lt;br /&gt;
 #### 过渡时间  transition-duration: 1s;&lt;br /&gt;
#### 过渡延时  transition-delay: 1s;		&lt;br /&gt;
#### 过渡效果  transition-timing-function: cubic-bezier (0, 0, 0, 1.97) ;&lt;br /&gt;
 常用的预设过渡效果:ease ease-in ease-inout ease-out&lt;br /&gt;
### 过渡常用默认样式:transition:all 1s&lt;/p&gt;
&lt;p&gt;##transform (变换)&lt;br /&gt;
### 二维效果&lt;br /&gt;
 transform: translate    / 平移 /&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;移动参照系为自身 使用 - 50% 可做居中效果&lt;br /&gt;
可分别设置 x y 轴的平移距离  亦可写成复合 (20px,20px)&lt;br /&gt;
 平移数值可以为负值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;transform: rotate  / 旋转 /&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不设置时默认为以 z 轴旋转&lt;br /&gt;
可分别设置 x y 轴旋转&lt;br /&gt;
旋转数值可以为负值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;transform: scale  / 缩放 /&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认以缩放标签的中心做缩放基点&lt;br /&gt;
可分别设置 x y 轴缩放，亦可写成复合 (2,2)&lt;br /&gt;
 缩放数值可以为负值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;transform: skew  / 倾斜 /&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可分别设置 x y 轴倾斜，亦可写成复合 (30deg,30deg)&lt;br /&gt;
 倾斜数值可以为负值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#### 二维变换组合&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;transform 可以将多个变换结合使用，但是要注意变换顺序！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;div:hover&amp;#123;
	background-color: red;
	/*执行顺序会对变换效果造成影响 即先转 再平移 放大;平移 旋转 放大*/
	transform: rotate(360deg) scale(2) translateX(100px) ;
	&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#### 变换基准点自定义&lt;br /&gt;
 transform-origin: left top;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基准点可设置特定位置或者具体数值&lt;br /&gt;
 x 轴:left center right&lt;br /&gt;
y 轴:top center bottom&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;### 三维效果&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三维效果需要在父级标签设置 &amp;quot;3d 盒子&amp;quot;, 景深&lt;br /&gt;
使用时，与二维基本一致。可设置负方向数值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;		.all&amp;#123;
				width: 500px;
				height: 500px;
				border: 1px solid black;
				margin: 100px auto;
				/*在父级设置3D盒子*/
				transform-style: preserve-3d ;
				
				/*景深 */
				perspective: 1000px;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2023-03-13T03:31:15.524Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/hou-duan/ci-cd/k8s/</id>
        <title>Kubernetes</title>
        <link rel="alternate" href="http://adamshang2333.github.io/hou-duan/ci-cd/k8s/"/>
        <content type="html">&lt;h1 id=&#34;一-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-简介&#34;&gt;#&lt;/a&gt; 一。简介&lt;/h1&gt;
&lt;h2 id=&#34;了解k8s-容器化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解k8s-容器化&#34;&gt;#&lt;/a&gt; 了解 K8s &amp;amp; 容器化&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcv&#34;&gt;Kubernetes&lt;/span&gt; 也称为 K8s，是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态，其服务、支持和工具的使用范围相当广泛。&lt;/p&gt;
&lt;h3 id=&#34;什么是容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是容器&#34;&gt;#&lt;/a&gt; 什么是容器&lt;/h3&gt;
&lt;p&gt;容器是一种&lt;strong&gt;沙盒技术&lt;/strong&gt;，主要目的是为了将应用运行在其中，与外界隔离；及方便这个沙盒可以被转移到其它宿主机器。本质上，它是一个特殊的进程。通过名称空间（Namespace）、控制组（Control groups）、切根（chroot）技术把资源、文件、设备、状态和配置划分到一个独立的空间。&lt;/p&gt;
&lt;p&gt;通俗点的理解就是一个装应用软件的箱子，箱子里面有软件运行所需的依赖库和配置。开发人员可以把这个箱子搬到任何机器上，且不影响里面软件的运行。&lt;/p&gt;
&lt;p&gt;此外，需要明确的一个概念是: &lt;strong&gt;容器技术并不等同于 docker&lt;/strong&gt;. 容器相关的技术实现，除了 Docker 以外 还有 &lt;code&gt;podman&lt;/code&gt; , &lt;code&gt;LXC&lt;/code&gt; , &lt;code&gt;  containerd&lt;/code&gt; , &lt;code&gt; Buildah&lt;/code&gt;  等，它们都能像 docker 一样构建镜像 运行容器.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2c2VThXN3AwNmRDTzk5ZlEzL2FydGljbGUvZGV0YWlscy8xMjcyOTMzODQ=&#34;&gt;参考：除 docker 外的其他容器化工具&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;容器标准&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器标准&#34;&gt;#&lt;/a&gt; 容器标准&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;容器世界里并不是只有 docker 一家。既然不是一家就很容易出现分歧。任何技术出现都需要一个标准来规范它，不然各搞各的很容易导致技术实现的碎片化，出现大量的冲突和冗余。因此，在 2015 年，由 Google，Docker、CoreOS、IBM、微软、红帽等厂商联合发起的 &lt;code&gt;OCI&lt;/code&gt; （Open Container  Initiative）组织成立了，并于 2016 年 4 月推出了第一个开放容器标准。标准主要包括 runtime 运行时标准和 image 镜像标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;容器运行时标准 （runtime spec）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;creating：使用 create 命令创建容器，这个过程称为创建中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;created：容器创建出来，但是还没有运行，表示镜像和配置没有错误，容器能够运行在当前平台&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;running：容器的运行状态，里面的进程处于 up 状态，正在执行用户设定的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stopped：容器运行完成，或者运行出错，或者  stop 命令之后，容器处于暂停状态。这个状态，容器还有很多信息保存在平台中，并没有完全被删除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;容器镜像标准（image spec）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件系统：以 layer 保存的文件系统，每个 layer 保存了和上层之间变化的部分，layer  应该保存哪些文件，怎么表示增加、修改和删除的文件等；&lt;/li&gt;
&lt;li&gt;config 文件：保存了文件系统的层级信息（每个层级的 hash  值，以及历史信息），以及容器运行时需要的一些信息（比如环境变量、工作目录、命令参数、mount  列表），指定了镜像在某个特定平台和系统的配置。比较接近我们使用 docker inspect &amp;lt;image_id&amp;gt; 看到的内容；&lt;/li&gt;
&lt;li&gt;manifest 文件：镜像的 config 文件索引，有哪些 layer，额外的 annotation 信息，manifest  文件中保存了很多和当前平台有关的信息；&lt;/li&gt;
&lt;li&gt;index 文件：可选的文件，指向不同平台的 manifest  文件，这个文件能保证一个镜像可以跨平台使用，每个平台拥有不同的 manifest 文件，使用 index 作为索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于k8s和docker的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于k8s和docker的关系&#34;&gt;#&lt;/a&gt; 关于 K8s 和 Docker 的关系&lt;/h3&gt;
&lt;p&gt;K8s 和 docker 关系可以简单用下图实例:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic1.zhimg.com/80/v2-3386b7a906cc4ae4bc2750273a4c69ec_1440w.jpg&#34; alt=&#34;docker&amp;amp;&amp;amp;k8s&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其工作流程简单来说是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker，Kubernetes 等工具来运行一个容器时会调用容器运行时（CRI）比如 containerd，CRI-O&lt;/li&gt;
&lt;li&gt;通过容器运行时来完成容器的创建、运行、销毁等实际工作&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Docker 使用的是 containerd 作为其运行时；Kubernetes 支持 containerd，CRI-O 等多种容器运行时&lt;/li&gt;
&lt;li&gt;这些容器运行时都遵循了 OCI 规范，并通过 runc 来实现与操作系统内核交互来完成容器的创建和运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80OTA1ODU2ODM=&#34;&gt;参考: k8s 和 docker 关系&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;k8s的功能特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s的功能特性&#34;&gt;#&lt;/a&gt; k8s 的功能特性&lt;/h2&gt;
&lt;h4 id=&#34;自动化上线和回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动化上线和回滚&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQv&#34;&gt;自动化上线和回滚&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Kubernetes 会分步骤地将针对应用或其配置的更改上线，同时监视应用程序运行状况以确保你不会同时终止所有实例。如果出现问题，Kubernetes 会为你回滚所作更改。你应该充分利用不断成长的部署方案生态系统。&lt;/p&gt;
&lt;h4 id=&#34;服务发现与负载均衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务发现与负载均衡&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==&#34;&gt;服务发现与负载均衡&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;无需修改你的应用程序去使用陌生的服务发现机制。Kubernetes 为容器提供了自己的 IP 地址和一个 DNS 名称，并且可以在它们之间实现负载均衡。&lt;/p&gt;
&lt;h4 id=&#34;自我修复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自我修复&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL3JlcGxpY2FzZXQvI3JlcGxpY2F0aW9uY29udHJvbGxlci0lRTUlQTYlODIlRTQlQkQlOTUlRTUlQjclQTUlRTQlQkQlOUM=&#34;&gt;自我修复&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;重新启动失败的容器，在节点死亡时替换并重新调度容器， 杀死不响应用户定义的健康检查的容器， 并且在它们准备好服务之前不会将它们公布给客户端。&lt;/p&gt;
&lt;h4 id=&#34;存储编排&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储编排&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9wZXJzaXN0ZW50LXZvbHVtZXMv&#34;&gt;存储编排&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;自动挂载所选存储系统，包括本地存储、诸如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9wcm9kdWN0cy9zdG9yYWdlLw==&#34;&gt;AWS&lt;/span&gt; 或 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2Uv&#34;&gt;GCP&lt;/span&gt; 之类公有云提供商所提供的存储或者诸如 NFS、iSCSI、Ceph、Cinder 这类网络存储系统。&lt;/p&gt;
&lt;h4 id=&#34;secret-和配置管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#secret-和配置管理&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9zZWNyZXQv&#34;&gt;Secret 和配置管理&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;部署和更新 Secret 和应用程序的配置而不必重新构建容器镜像， 且不必将软件堆栈配置中的秘密信息暴露出来。&lt;/p&gt;
&lt;h4 id=&#34;自动装箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动装箱&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9tYW5hZ2UtcmVzb3VyY2VzLWNvbnRhaW5lcnMv&#34;&gt;自动装箱&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;根据资源需求和其他限制自动放置容器，同时避免影响可用性。 将关键性的和尽力而为性质的工作负载进行混合放置，以提高资源利用率并节省更多资源。&lt;/p&gt;
&lt;h4 id=&#34;批量执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#批量执行&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2pvYi8=&#34;&gt;批量执行&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;除了服务之外，Kubernetes 还可以管理你的批处理和 CI 工作负载，在期望时替换掉失效的容器。&lt;/p&gt;
&lt;h4 id=&#34;ipv4ipv6-双协议栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4ipv6-双协议栈&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9kdWFsLXN0YWNrLw==&#34;&gt;IPv4/IPv6 双协议栈&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;为 Pod 和 Service 分配 IPv4 和 IPv6 地址&lt;/p&gt;
&lt;h4 id=&#34;水平扩缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#水平扩缩&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvcnVuLWFwcGxpY2F0aW9uL2hvcml6b250YWwtcG9kLWF1dG9zY2FsZS8=&#34;&gt;水平扩缩&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;使用一个简单的命令、一个 UI 或基于 CPU 使用情况自动对应用程序进行扩缩。&lt;/p&gt;
&lt;h4 id=&#34;为扩展性设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为扩展性设计&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvZXh0ZW5kLWt1YmVybmV0ZXMv&#34;&gt;为扩展性设计&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;无需更改上游源码即可扩展你的 Kubernetes 集群。&lt;/p&gt;
&lt;h1 id=&#34;二-k8s的集群架构和组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-k8s的集群架构和组件&#34;&gt;#&lt;/a&gt; 二.  K8s 的集群架构和组件&lt;/h1&gt;
&lt;h2 id=&#34;集群架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群架构&#34;&gt;#&lt;/a&gt; 集群架构&lt;/h2&gt;
&lt;p&gt;一个正常运行的 Kubernetes 集群可以从逻辑上分为两个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Control Plane&lt;/strong&gt; (控制平面，可集群)
&lt;ul&gt;
&lt;li&gt;负责维护集群的预期状态，例如运行哪个应用以及使用哪个容器镜像&lt;/li&gt;
&lt;li&gt;又可以称为主控节点 / Master 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Node 集群&lt;/strong&gt; (计算设备）
&lt;ul&gt;
&lt;li&gt;负责应用和工作负载的实际运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个 Node 节点都有自己的 Linux 环境，可以是物理机也可以是虚拟机。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个节点都运行由若干容器组成的容器集 (docker containers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;K8s 官方架构图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从官方架构图中，可以发现在 Control Plane 中，组件是可以有多个实例的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中除了 etcd 组件外 其它组件都是以集群形式搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;更详细的架构图如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/856154-20191023003358108-1816205812.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不难发现，Node 节点中是包含了多个 Pod 的，每一个 Pod 单独运行一个 docker 的 container 组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;集群组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群组件&#34;&gt;#&lt;/a&gt; 集群组件&lt;/h2&gt;
&lt;h3 id=&#34;master组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#master组件&#34;&gt;#&lt;/a&gt; Master 组件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件，例如当不满足部署的  &lt;code&gt;replicas&lt;/code&gt;  字段时， 要启动新的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv&#34;&gt;pod&lt;/span&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-api-kube-apiserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-api-kube-apiserver&#34;&gt;#&lt;/a&gt; 1. api (kube-apiserver)&lt;/h4&gt;
&lt;p&gt;该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。&lt;/p&gt;
&lt;p&gt;Kubernetes API 服务器的主要实现是 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1hcGlzZXJ2ZXIv&#34;&gt;kube-apiserver&lt;/span&gt;。  &lt;code&gt;kube-apiserver&lt;/code&gt;  设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 可以通过运行  &lt;code&gt;kube-apiserver&lt;/code&gt;  的多个实例，在这些实例之间平衡流量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;apisever 可以理解为整个 k8s 集群中的统一入口，各组件协调者。是 Master 节点和 Nodes 通信的桥梁&lt;/p&gt;
&lt;p&gt;除了集群内部通信会使用到 kube-apiserver, kubectl 和 K8s 的 UI 控制台 也会与 apiserver 通信.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-etcd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-etcd&#34;&gt;#&lt;/a&gt; 2. etcd&lt;/h4&gt;
&lt;p&gt;一致且高可用的 &lt;code&gt;分布式键值存储&lt;/code&gt; ，主要用途是共享配置和服务发现，保存集群状态数据，比如 Pod、Service 等对象信息。用作 &lt;strong&gt;Kubernetes 所有集群数据的后台数据库。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的 Kubernetes 集群使用 etcd 作为其后台数据库， 请确保你针对这些数据有一份 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvYWRtaW5pc3Rlci1jbHVzdGVyL2NvbmZpZ3VyZS11cGdyYWRlLWV0Y2QvI2JhY2tpbmctdXAtYW4tZXRjZC1jbHVzdGVy&#34;&gt;备份&lt;/span&gt;计划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;etcd 采用了 &lt;code&gt;RAFT&lt;/code&gt;  的共识算法 (最终一致算法) 来保证集群的高可用，通过投票选举来完成的节点切换&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于 etcd 的算法，Master 中的 etcd 集群的节点数量，只能是奇数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3 个节点 可以保证 1 次高可用；5 节点 2 次；7 节点 3 次...&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个 Raft 集群都包含多个服务器，在任意时刻，每台服务器只可能处于 &lt;code&gt;Leader&lt;/code&gt; ,  &lt;code&gt;Follower&lt;/code&gt; ,  &lt;code&gt;Candidate(候选人)&lt;/code&gt;  三种状态；&lt;strong&gt;在处于正常的状态时，集群中只会存在一个 Leader, 其余的服务器都是 Follower&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NTU2NDE0L2FydGljbGUvZGV0YWlscy8xMjU1Njg3Mzk=&#34;&gt;图解 etcd 中的 Raft 算法&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-kube-scheduler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-kube-scheduler&#34;&gt;#&lt;/a&gt; 3. kube-scheduler&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt;  是 K8s 的&lt;strong&gt;调度器，&lt;/strong&gt; 负责监视新创建的、未指定运行&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==&#34;&gt;节点（node）&lt;/span&gt;的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv&#34;&gt;Pods&lt;/span&gt;， 并选择节点来让 Pod 在上面运行。&lt;/p&gt;
&lt;p&gt;调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。&lt;/p&gt;
&lt;h4 id=&#34;4-c-m-kube-controller-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-c-m-kube-controller-manager&#34;&gt;#&lt;/a&gt; 4. c-m (kube-controller-manager)&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1jb250cm9sbGVyLW1hbmFnZXIv&#34;&gt;kube-controller-manager&lt;/span&gt; 负责运行&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL2NvbnRyb2xsZXIv&#34;&gt; controller (控制器)&lt;/span&gt; 进程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;controller&lt;/code&gt;  通过 &lt;code&gt;apiserver&lt;/code&gt;  监控集群的公共状态，并致力于将当前状态转变为期望的状态.&lt;/p&gt;
&lt;p&gt;Kubernetes 内置一组 &lt;code&gt;controller&lt;/code&gt; ，运行在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1jb250cm9sbGVyLW1hbmFnZXIv&#34;&gt;kube-controller-manager&lt;/span&gt; 内。 这些内置的控制器提供了重要的核心功能，每个控制器管理集群状态的一个特定方面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从逻辑上讲， 每个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL2NvbnRyb2xsZXIv&#34;&gt;控制器&lt;/span&gt;都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。&lt;/p&gt;
&lt;p&gt;这些控制器包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应&lt;/li&gt;
&lt;li&gt;任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成&lt;/li&gt;
&lt;li&gt;端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）。&lt;/li&gt;
&lt;li&gt;服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-c-c-m-cloud-controller-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-c-c-m-cloud-controller-manager&#34;&gt;#&lt;/a&gt; 5. c-c-m (cloud-controller-manager)&lt;/h4&gt;
&lt;p&gt;一个 Kubernetes &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2dsb3NzYXJ5Lz9hbGw9dHJ1ZSN0ZXJtLWNvbnRyb2wtcGxhbmU=&#34;&gt;控制平面&lt;/span&gt;组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cloud-controller-manager&lt;/code&gt;  仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。&lt;/p&gt;
&lt;p&gt;与  &lt;code&gt;kube-controller-manager&lt;/code&gt;  类似， &lt;code&gt;cloud-controller-manager&lt;/code&gt;  将若干逻辑上独立的控制回路组合到同一个可执行文件中， 供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。&lt;/p&gt;
&lt;p&gt;下面的控制器都包含对云平台驱动的依赖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除&lt;/li&gt;
&lt;li&gt;路由控制器（Route Controller）：用于在底层云基础架构中设置路由&lt;/li&gt;
&lt;li&gt;服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;node组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node组件&#34;&gt;#&lt;/a&gt; Node 组件&lt;/h3&gt;
&lt;p&gt;节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。&lt;/p&gt;
&lt;h4 id=&#34;1-kubelet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-kubelet&#34;&gt;#&lt;/a&gt; 1. kubelet&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvY29tcG9uZW50cy8ja3ViZWxldA==&#34;&gt; &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;kubelet&lt;/code&gt;  会在集群中每个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==&#34;&gt;节点（node）&lt;/span&gt;上运行。 它保证&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd2hhdC1pcy1rdWJlcm5ldGVzLyN3aHktY29udGFpbmVycw==&#34;&gt;容器（containers）&lt;/span&gt;都运行在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv&#34;&gt;Pod&lt;/span&gt; 中。&lt;/p&gt;
&lt;p&gt;kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kubelet 会监听 &lt;code&gt;api-server&lt;/code&gt;  的通知，将 api 指令转换为 OCI 标准 来实现 pod 中 docker 容器的创建；&lt;/p&gt;
&lt;p&gt;PodSpec 是描述一个 Pod 的 YAML 或 JSON 对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-kube-proxy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-kube-proxy&#34;&gt;#&lt;/a&gt; 2. kube-proxy&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1wcm94eS8=&#34;&gt;kube-proxy&lt;/span&gt; 是集群中每个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==&#34;&gt;节点（node）&lt;/span&gt;上所运行的网络代理， 实现 Kubernetes &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==&#34;&gt;服务（Service）&lt;/span&gt; 概念的一部分。&lt;/p&gt;
&lt;p&gt;kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。&lt;/p&gt;
&lt;p&gt;如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。&lt;/p&gt;
&lt;h4 id=&#34;3-容器运行时container-runtime&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-容器运行时container-runtime&#34;&gt;#&lt;/a&gt; 3. 容器运行时（Container Runtime）&lt;/h4&gt;
&lt;p&gt;容器运行环境是负责运行容器的软件。&lt;/p&gt;
&lt;p&gt;Kubernetes 支持许多容器运行环境，例如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb250YWluZXJkLmlvL2RvY3Mv&#34;&gt;containerd&lt;/span&gt;、 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jcmktby5pby8jd2hhdC1pcy1jcmktbw==&#34;&gt;CRI-O&lt;/span&gt; 以及 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMvY29tbXVuaXR5L2Jsb2IvbWFzdGVyL2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctbm9kZS9jb250YWluZXItcnVudGltZS1pbnRlcmZhY2UubWQ=&#34;&gt;Kubernetes CRI (容器运行环境接口)&lt;/span&gt; 的其他任何实现。&lt;/p&gt;
&lt;h2 id=&#34;插件addons&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件addons&#34;&gt;#&lt;/a&gt; 插件（Addons）&lt;/h2&gt;
&lt;p&gt;插件使用 Kubernetes 资源（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RhZW1vbnNldC8=&#34;&gt;DaemonSet&lt;/span&gt;、 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQv&#34;&gt;Deployment&lt;/span&gt; 等）实现集群功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于  &lt;code&gt;kube-system&lt;/code&gt;  命名空间。&lt;/p&gt;
&lt;p&gt;有关可用插件的完整列表，请参见 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY2x1c3Rlci1hZG1pbmlzdHJhdGlvbi9hZGRvbnMv&#34;&gt;插件（Addons）&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;常用的插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的插件&#34;&gt;#&lt;/a&gt; 常用的插件&lt;/h3&gt;
&lt;h4 id=&#34;coredns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#coredns&#34;&gt;#&lt;/a&gt; CoreDNS&lt;/h4&gt;
&lt;p&gt;为整个集群提供 DNS 服务。&lt;/p&gt;
&lt;p&gt;尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该有&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9kbnMtcG9kLXNlcnZpY2Uv&#34;&gt;集群 DNS&lt;/span&gt;， 因为很多示例都需要 DNS 服务。&lt;/p&gt;
&lt;p&gt;集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。&lt;/p&gt;
&lt;p&gt;Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。&lt;/p&gt;
&lt;h4 id=&#34;ingresscontroller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ingresscontroller&#34;&gt;#&lt;/a&gt; ingressController&lt;/h4&gt;
&lt;p&gt;为 k8s 中的服务提供外网入口，实现七层网络调度&lt;/p&gt;
&lt;h4 id=&#34;prometheus&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prometheus&#34;&gt;#&lt;/a&gt; Prometheus&lt;/h4&gt;
&lt;p&gt;为整个集群提供资源监控能力，其本质是一个时序数据库&lt;/p&gt;
&lt;h4 id=&#34;dashboard仪表盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dashboard仪表盘&#34;&gt;#&lt;/a&gt; Dashboard（仪表盘）&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvY29tcG9uZW50cy8jd2ViLXVpLWRhc2hib2FyZA==&#34;&gt; &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvYWNjZXNzLWFwcGxpY2F0aW9uLWNsdXN0ZXIvd2ViLXVpLWRhc2hib2FyZC8=&#34;&gt;Dashboard&lt;/span&gt; 是 Kubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身， 并进行故障排除。&lt;/p&gt;
&lt;h4 id=&#34;容器资源监控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器资源监控&#34;&gt;#&lt;/a&gt; 容器资源监控&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvZGVidWcvZGVidWctY2x1c3Rlci9yZXNvdXJjZS11c2FnZS1tb25pdG9yaW5nLw==&#34;&gt;容器资源监控&lt;/span&gt; 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中， 并提供浏览这些数据的界面。&lt;/p&gt;
&lt;h4 id=&#34;集群层面日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集群层面日志&#34;&gt;#&lt;/a&gt; 集群层面日志&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY2x1c3Rlci1hZG1pbmlzdHJhdGlvbi9sb2dnaW5nLw==&#34;&gt;集群层面日志&lt;/span&gt;机制负责将容器的日志数据保存到一个集中的日志存储中， 这种集中日志存储提供搜索和浏览接口。&lt;/p&gt;
&lt;h3 id=&#34;rancher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rancher&#34;&gt;#&lt;/a&gt; Rancher&lt;/h3&gt;
&lt;p&gt;可以理解为一个 k8s 的超集，Rancher 是一个 Kubernetes 管理工具，让你能在任何地方和任何提供商上部署和运行集群。&lt;/p&gt;
&lt;p&gt;Rancher 可以创建来自 Kubernetes 托管服务提供商的集群，创建节点并安装 Kubernetes，或者导入在任何地方运行的现有 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;此外，Rancher 可以为集群和资源提供更精细的监控和告警，将日志发送到外部提供商，并通过应用商店（Application  Catalog）直接集成 Helm。如果你拥有外部 CI/CD 系统，你可以将其与 Rancher 对接。没有的话，你也可以使用 Rancher 提供的 Fleet 自动部署和升级工作负载。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yYW5jaGVybWFuYWdlci5kb2NzLnJhbmNoZXIuY29tL3poLw==&#34;&gt;注:rancher 官方文档&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;federation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#federation&#34;&gt;#&lt;/a&gt; Federation&lt;/h3&gt;
&lt;p&gt;提供跨可用区的集群，提供不同数据中心的 k8s 集群管理能力.&lt;/p&gt;
&lt;h1 id=&#34;三-k8s核心概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-k8s核心概念&#34;&gt;#&lt;/a&gt; 三.  k8s 核心概念&lt;/h1&gt;
&lt;h2 id=&#34;k8s对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s对象&#34;&gt;#&lt;/a&gt; K8S 对象&lt;/h2&gt;
&lt;h3 id=&#34;什么是对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是对象&#34;&gt;#&lt;/a&gt; 什么是对象&lt;/h3&gt;
&lt;p&gt;在 Kubernetes 系统中，&lt;strong&gt;Kubernetes 对象&lt;/strong&gt; 是持久化的实体。 Kubernetes 使用这些实体去表示集群中各种资源，以及跟踪他们在集群中的状态。 比较特别地是，它们描述了如下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些容器化应用正在运行（以及在哪些节点上运行）&lt;/li&gt;
&lt;li&gt;可以被应用使用的资源&lt;/li&gt;
&lt;li&gt;关于应用运行时表现的策略，比如重启策略、升级策略以及容错策略&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 对象是 “&lt;strong&gt;目标性记录&lt;/strong&gt;” —— 一旦创建该对象，Kubernetes 系统将不断工作以确保该对象存在。 &lt;strong&gt;通过创建对象，你就是在告知 Kubernetes 系统，你想要的集群工作负载状态看起来应是什么样子的&lt;/strong&gt;， 这就是 Kubernetes 集群所谓的 &lt;strong&gt;期望状态（Desired State）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用命令 &lt;code&gt;kubectl api-resources&lt;/code&gt; , 可以列出当前集群中所有的资源定义。&lt;/p&gt;
&lt;h3 id=&#34;如何描述k8s对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何描述k8s对象&#34;&gt;#&lt;/a&gt; 如何描述 k8s 对象&lt;/h3&gt;
&lt;p&gt;k8s 可以通过 &lt;code&gt;json&lt;/code&gt;  和 &lt;code&gt;yaml&lt;/code&gt;  两种格式来描述一个对象资源，但为了可读性和可维护性，通常会使用 yaml 格式。&lt;/p&gt;
&lt;p&gt;在常用的 yaml 格式文件中，会通过各种对象字段，来描述对对象的期望状态.&lt;/p&gt;
&lt;p&gt;下面是一个 pod 的最简单例子:&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# simple-pod.yaml&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; v1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Pod&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1.14.2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到 Pod 的一级字段，主要分成 5 个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt; ：api 版本，可以通过 kubectl api-resources 查询，或者直接看 explain 的结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt; ：资源类型，可以通过 kubectl api-resources 查询，或者直接看 explain 的结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata&lt;/code&gt; ：元信息，比如 name, namespace， label 和 annotation 等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt; ：资源的具体配置，比如磁盘、网络、镜像等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt; ：存储一些正在运行的对象的一些状态信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;查询对象配置文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询对象配置文件结构&#34;&gt;#&lt;/a&gt; 查询对象配置文件结构&lt;/h4&gt;
&lt;p&gt;kubectl 提供给我们一个命令 &lt;code&gt;kubectl explain&lt;/code&gt;  ，可以输出资源对应的属性字段及定义，它在定义资源配置文件时候非常有用。&lt;/p&gt;
&lt;p&gt;这个指令支持查询二级或者更多层级下的字段及定义:&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;~   master ●✚  kubectl explain pod&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;KIND:     Pod&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;VERSION:  v1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DESCRIPTION:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Pod is a collection of containers that can run on a host. This resource is&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     created by clients and scheduled onto hosts.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FIELDS:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   apiVersion	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     APIVersion defines the versioned schema of this representation of an&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     object. Servers should convert recognized schemas to the latest internal&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     value, and may reject unrecognized values. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#resources&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   kind	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Kind is a string value representing the REST resource this object&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     represents. Servers may infer this from the endpoint the client submits&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     requests to. Cannot be updated. In CamelCase. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#types-kinds&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   metadata	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Standard object&#39;s metadata. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#metadata&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   spec	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Specification of the desired behavior of the pod. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#spec-and-status&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   status	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Most recently observed status of the pod. This data may not be up to date.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Populated by the system. Read-only. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#spec-and-status&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;kubectl explain pod.spec&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;KIND:     Pod&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;VERSION:  v1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;RESOURCE: spec &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DESCRIPTION:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Specification of the desired behavior of the pod. More info:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md&lt;span class=&#34;token comment&#34;&gt;#spec-and-status&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     PodSpec is a description of a pod.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FIELDS:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   hostNetwork	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;boolean&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Host networking requested &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; this pod. Use the &lt;span class=&#34;token function&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s network namespace.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     If this option is set, the ports that will be used must be specified.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Default to false.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   hostPID	&amp;lt;boolean&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Use the host&#39;&lt;/span&gt;s pid namespace. Optional: Default to false.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt;	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Specifies the &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; of the Pod If not specified, the pod&#39;s &lt;span class=&#34;token function&#34;&gt;hostname&lt;/span&gt; will&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     be &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; to a system-defined value.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -required-, 表明 pod 对象的 yaml 中必须指定 containers 字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   containers	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; -required-&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     List of containers belonging to the pod. Containers cannot currently be&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     added or removed. There must be at least one container &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; a Pod. Cannot be&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     updated.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   dnsConfig	&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Object&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     Specifies the DNS parameters of a pod. Parameters specified here will be&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     merged to the generated DNS configuration based on DNSPolicy.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;略&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;常用的对象字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的对象字段&#34;&gt;#&lt;/a&gt; 常用的对象字段&lt;/h4&gt;
&lt;p&gt;k8s 中，对象一级字段常见的有五个:&lt;strong&gt;apiVersion&lt;/strong&gt;; &lt;strong&gt;kind&lt;/strong&gt;; &lt;strong&gt;metadata&lt;/strong&gt;; &lt;strong&gt;spec&lt;/strong&gt;; &lt;strong&gt;status&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以 Deployment 为例:&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; apps/v1beta1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Deployment&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;deployment&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1.7.9&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apiVersion  api 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kind  资源类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;metadata 元信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name
&lt;ul&gt;
&lt;li&gt;创建资源时的必需项&lt;/li&gt;
&lt;li&gt;创建后无法更改 name 字段值&lt;/li&gt;
&lt;li&gt;Name 字段必须在同一 namespace 内是唯一的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;namespace
&lt;ul&gt;
&lt;li&gt;不填时默认值为 &amp;quot;default&amp;quot;&lt;/li&gt;
&lt;li&gt;命名空间的值必须唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;labels
&lt;ul&gt;
&lt;li&gt;可用于组织和分类（确定范围和选择）对象的字符串键和值的映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;annotations
&lt;ul&gt;
&lt;li&gt;非结构化的 kv map, 功能与 java 注解类似，向 pod 中的工作负载提供可以自定义元数据的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL2NvbW1vbi1kZWZpbml0aW9ucy9vYmplY3QtbWV0YS8=&#34;&gt;注：官网参考&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spec 资源具体配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于具有  &lt;code&gt;spec&lt;/code&gt;  的对象，你必须在创建对象时设置其内容，描述你希望对象所具有的特征： &lt;strong&gt;期望状态（Desired State）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;spec 的字段值，根据使用的对象不同，在规约上各有不同的要求.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;containers&lt;/strong&gt; (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3dvcmtsb2FkLXJlc291cmNlcy9wb2QtdjEvI0NvbnRhaW5lcg==&#34;&gt;Container[]&lt;/span&gt;)，必需&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt; (string)，必需&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;image&lt;/strong&gt; (string)&lt;/p&gt;
&lt;p&gt;镜像名称，此字段是可选的，以允许更高层的配置管理进行默认设置或覆盖工作负载控制器（如 Deployment 和 StatefulSets） 中的容器镜像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;imagePullPolicy&lt;/strong&gt; (string)&lt;/p&gt;
&lt;p&gt;镜像拉取策略。 &lt;code&gt;&amp;quot;Always&amp;quot;&lt;/code&gt; 、 &lt;code&gt;&amp;quot;Never&amp;quot;&lt;/code&gt; 、 &lt;code&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/code&gt;  之一。如果指定了  &lt;code&gt;:latest&lt;/code&gt;  标签，则默认为  &lt;code&gt;&amp;quot;Always&amp;quot;&lt;/code&gt; ， 否则默认为  &lt;code&gt;&amp;quot;IfNotPresent&amp;quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3dvcmtsb2FkLXJlc291cmNlcy9wb2QtdjEv&#34;&gt;参考: k8s Api - 工作负载 - pod&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Deployment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;selector&lt;/strong&gt; (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL2NvbW1vbi1kZWZpbml0aW9ucy9sYWJlbC1zZWxlY3Rvci8jTGFiZWxTZWxlY3Rvcg==&#34;&gt;LabelSelector&lt;/span&gt;)，必需&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;供 Pod 所用的标签选择算符。通过此字段选择现有 ReplicaSet 的 Pod 集合， 被选中的 ReplicaSet 将受到这个 Deployment 的影响。此字段必须与 Pod 模板的标签匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;template&lt;/strong&gt; (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3dvcmtsb2FkLXJlc291cmNlcy9wb2QtdGVtcGxhdGUtdjEvI1BvZFRlbXBsYXRlU3BlYw==&#34;&gt;PodTemplateSpec&lt;/span&gt;)，必需&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;template 描述将要创建的 Pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;replicas&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预期 Pod 的数量。这是一个指针，用于辨别显式零和未指定的值。默认为 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3dvcmtsb2FkLXJlc291cmNlcy9kZXBsb3ltZW50LXYxLw==&#34;&gt;参考: k8s Api - 工作负载 - deployment&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;status 对象状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;status&lt;/code&gt;  描述了正在运行的对象的&lt;strong&gt;当前状态（Current State）&lt;/strong&gt;，它是由 Kubernetes 系统和组件设置并更新的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3dvcmtsb2FkLXJlc291cmNlcy8=&#34;&gt;注：工作负载的字段参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2t1YmVybmV0ZXMtYXBpL3NlcnZpY2UtcmVzb3VyY2VzLw==&#34;&gt;注:service 资源的字段参考&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何创建k8s对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何创建k8s对象&#34;&gt;#&lt;/a&gt; 如何创建 k8s 对象&lt;/h3&gt;
&lt;p&gt;创建一个资源对象的方式有好多种，从调用方式上可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 HTTP 接口：用于上层业务的开发&lt;/li&gt;
&lt;li&gt;调用 client 命令：即 kubectl 命令行工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前对于刚学习的新手来说，kubectl 是熟悉各种资源对象最好的工具.&lt;/p&gt;
&lt;p&gt;使用了 kubectl，创建资源对象，又可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl apply&lt;/code&gt;  (推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl create&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种有什么区别呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kubectl create 是命令式 API&lt;/strong&gt;，体现的是我要怎么样（创建）？&lt;/p&gt;
&lt;p&gt;对于同一个 pod.yaml create 多次是会报错的，原因是 &lt;strong&gt;k8s 中资源名称必须是唯一的&lt;/strong&gt;，而该名称的 pod 资源已经创建过了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://image.iswbm.com/image-20220117224832316.png&#34; alt=&#34;http://image.iswbm.com/image-20220117224832316.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kubectl apply 是声明式 API&lt;/strong&gt;，体现的是我要什么样？&lt;/p&gt;
&lt;p&gt;对于同一个 pod.yaml apply 完全没有任何问题，若第二次 apply 之前，修改了 pod 中的一些内容，也会更新上去。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://image.iswbm.com/image-20220117225254152.png&#34; alt=&#34;http://image.iswbm.com/image-20220117225254152.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;pod&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pod&#34;&gt;#&lt;/a&gt; Pod&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pod&lt;/strong&gt; 是在 Kubernetes 中可以创建和管理的、&lt;strong&gt;最小的可部署的计算单元&lt;/strong&gt;。Pod 所建模的是特定于应用的 “&lt;strong&gt;逻辑主机&lt;/strong&gt;”，其中包含一个或多个应用容器， 这些容器相对紧密地耦合在一起。(&lt;em&gt;如果它们紧耦合并且需要共享磁盘等资源，这些容器应在一个 Pod 中编排。&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://d33wubrfki0l68.cloudfront.net/fe03f68d8ede9815184852ca2a4fd30325e5d15a/98064/docs/tutorials/kubernetes-basics/public/images/module_03_pods.svg&#34; alt=&#34;pod示意图&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pod --&amp;gt; 逻辑主机&lt;/p&gt;
&lt;p&gt;Nod --&amp;gt; 物理主机 (虚拟机或服务器)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Kubernetes 中，无论你的负载是由单个组件还是由多个一同工作的组件构成， 你都可以在一组 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/pods&#34;&gt;&lt;strong&gt;Pod&lt;/strong&gt;&lt;/a&gt; 中运行它。 在 Kubernetes 中，Pod 类似于&lt;mark&gt;共享网络资源，namespace 并共享文件系统卷的一组容器&lt;/mark&gt;，由一个或多个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1jb250YWluZXImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;container&lt;/span&gt; 组成，代表的是集群上处于运行状态的一组 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd2hhdC1pcy1rdWJlcm5ldGVzLyN3aHktY29udGFpbmVycw==&#34;&gt;容器&lt;/span&gt; 的集合。&lt;strong&gt;(pod 中的一组 container, 并不局限于同一种镜像 可以是多种镜像的组合)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pod 的共享上下文包括一组 Linux 名字空间、控制组（cgroup）和可能一些其他的隔离方面， 即用来隔离&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd2hhdC1pcy1rdWJlcm5ldGVzLyN3aHktY29udGFpbmVycw==&#34;&gt;容器&lt;/span&gt;的技术。 在 Pod 的上下文中，每个独立的应用可能会进一步实施隔离。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 k8s 中，一切资源对象的调度都是为了用来支撑或扩展 pod 对象的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，k8s 不会直接处理容器，而是 Pod&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pod的创建流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pod的创建流程&#34;&gt;#&lt;/a&gt; pod 的创建流程&lt;/h3&gt;
&lt;p&gt;示意图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230312192631.png&#34; alt=&#34;创建流程图&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;pause容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pause容器&#34;&gt;#&lt;/a&gt; pause 容器&lt;/h3&gt;
&lt;p&gt;api-server 将创建 pod 的指令下发给 kubelet 时，kubelet 会先创建一个容器 &lt;code&gt;pause&lt;/code&gt; ,  无论 pod 想创建的目标容器是什么.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pod 中，pause 容器是第一个被创建出来的&lt;/strong&gt;，它的作用是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;挂载网络卷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 pod 中的容器间需要共享数据，那么就需要依赖于 pause 完成 volume 的挂载和共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化网络栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 veth&lt;/li&gt;
&lt;li&gt;veth 连接至网桥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pause 容器的网络共享示意:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;http://image.iswbm.com/image-20220129125243265.png&#34; alt=&#34;pause网络共享&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230310123818.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有 pause 容器，那么 A 和 B 要共享网络，要不就是 A 加入 B 的 network namespace，要嘛就是 B 加入 A 的 network namespace， 而无论是谁加入谁，只要 network 的 owner 退出了，该 Pod 里的所有其他容器网络都会立马异常，这显然是不合理的。&lt;/p&gt;
&lt;p&gt;反过来，由于 pause 里只有是挂起一个容器，里面没有任何复杂的逻辑，只要不主动杀掉 Pod，pause 都会一直存活，这样一来就能保证在 Pod 运行期间同一 Pod 里的容器网络的稳定。&lt;/p&gt;
&lt;p&gt;我们在同一 Pod 里所有容器里看到的网络视图，都是完全一样的，包括网络设备、IP 地址、Mac 地址等等，因为他们其实全是同一份，而这一份都来自于 Pod 第一次创建的这个 Infra container。&lt;/p&gt;
&lt;p&gt;由于所有的应用容器都要依赖于 pause 容器，因此在 Pod 启动时，它总是创建的第一个容器，可以说 Pod 的生命周期就是 pause 容器的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rOHMuaXN3Ym0uY29tL2MwMi9wMDJfbGVhcm4ta3ViZXJuZXRlcy1wb2QtdmlhLXBhdXNlLWNvbnRhaW5lci5odG1s&#34;&gt;参考：从 Pause 容器理解 Pod 的本质&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;node&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node&#34;&gt;#&lt;/a&gt; Node&lt;/h2&gt;
&lt;p&gt;Node 是 Pod 真正运行的主机，可以是物理机，也可以是虚拟机。为了管理 Pod，每个 Node 节点上至少要运行 container runtime（比如 docker 或者 rkt）、 &lt;code&gt;kubelet&lt;/code&gt;  和  &lt;code&gt;kube-proxy&lt;/code&gt;  服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.sitestack.cn/projects/feiskyer-kubernetes-handbook-202005/introduction/media/node.png&#34; alt=&#34;node&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;节点名称唯一性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点名称唯一性&#34;&gt;#&lt;/a&gt; 节点名称唯一性&lt;/h3&gt;
&lt;p&gt;节点的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbmFtZXMjbmFtZXM=&#34;&gt;名称&lt;/span&gt;用来标识 Node 对象。 没有两个 Node 可以同时使用相同的名称。 Kubernetes 还假定名字相同的资源是同一个对象。 就 Node 而言，隐式假定使用相同名称的实例会具有相同的状态（例如网络配置、根磁盘内容） 和类似节点标签这类属性。这可能在节点被更改但其名称未变时导致系统状态不一致。 如果某个 Node 需要被替换或者大量变更，需要从 API 服务器移除现有的 Node 对象， 之后再在更新之后重新将其加入。&lt;/p&gt;
&lt;h2 id=&#34;namespace&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#namespace&#34;&gt;#&lt;/a&gt; Namespace&lt;/h2&gt;
&lt;p&gt;Namespace  是对一组资源和对象的抽象集合，比如可以用来将系统内部的对象划分为不同的项目组或用户组。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通俗一点理解，Namespace 可以支持 K8s 创建多个虚拟集群&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的 pods, services,  replication controllers 和 deployments 等都是属于某一个 namespace 的（默认是  default），而 node, persistentVolumes 等则不属于任何 namespace。&lt;/p&gt;
&lt;h2 id=&#34;label&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#label&#34;&gt;#&lt;/a&gt; Label&lt;/h2&gt;
&lt;p&gt;Label 是识别 Kubernetes 对象的标签，以 key/value 的方式附加到对象上（key 最长不能超过 63 字节，value 可以为空，也可以是不超过 253 字节的字符串）。&lt;/p&gt;
&lt;p&gt;Label 不提供唯一性，并且实际上经常是很多对象（如 Pods）都使用相同的 label 来标志具体的应用。&lt;/p&gt;
&lt;p&gt;Label 定义好后其他对象可以使用 Label Selector 来选择一组相同 label 的对象（比如 ReplicaSet 和 Service 用 label 来选择一组 Pod）。Label Selector 支持以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等式，如  &lt;code&gt;app=nginx&lt;/code&gt;  和  &lt;code&gt;env!=production&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;集合，如  &lt;code&gt;env in (production, qa)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多个 label（它们之间是 AND 关系），如  &lt;code&gt;app=nginx,env=test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;annotations&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#annotations&#34;&gt;#&lt;/a&gt; Annotations&lt;/h2&gt;
&lt;p&gt;Annotations 是 key/value 形式附加于对象的注解。不同于 Labels 用于标志和选择对象，Annotations  则是用来记录一些附加信息，用来辅助应用部署、安全策略以及调度策略等。比如 deployment 使用 annotations 来记录  rolling update 的状态。&lt;/p&gt;
&lt;h2 id=&#34;controller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controller&#34;&gt;#&lt;/a&gt; controller&lt;/h2&gt;
&lt;h3 id=&#34;什么是controller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是controller&#34;&gt;#&lt;/a&gt; 什么是 controller&lt;/h3&gt;
&lt;p&gt;Kubernetes 中 conroller (控制器) 通过监控&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2dsb3NzYXJ5Lz9hbGw9dHJ1ZSN0ZXJtLWNsdXN0ZXI=&#34;&gt;集群&lt;/span&gt; 的公共状态，并&lt;strong&gt;致力于将当前状态转变为期望的状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;K8s 内建了很多 controller（资源控制器），这些相当于一个状态机，用来控制 Pod 的具体状态和行为&lt;/p&gt;
&lt;h3 id=&#34;控制器种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器种类&#34;&gt;#&lt;/a&gt; 控制器种类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ReplicationController (RC) 和 ReplicaSet (RS)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DaemonSet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;StateFulSet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job/CronJob&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal Pod Autoscaling&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制器分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器分类&#34;&gt;#&lt;/a&gt; 控制器分类&lt;/h3&gt;
&lt;p&gt;根据控制器的使用场景，可以分类如下:&lt;/p&gt;
&lt;h4 id=&#34;无状态应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无状态应用&#34;&gt;#&lt;/a&gt; 无状态应用&lt;/h4&gt;
&lt;h5 id=&#34;通用型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用型&#34;&gt;#&lt;/a&gt; 通用型&lt;/h5&gt;
&lt;p&gt;​	RC: 副本数量与期望值之间的管理&lt;/p&gt;
&lt;p&gt;​	RS: 功能类似 RC, 多了集合式的标签选择器&lt;/p&gt;
&lt;p&gt;​	Deployment: 支持滚动更新以及回滚&lt;/p&gt;
&lt;h5 id=&#34;特殊场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊场景&#34;&gt;#&lt;/a&gt; 特殊场景&lt;/h5&gt;
&lt;p&gt;批处理任务 (目标数成功退出)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job: 保障任务一次或多次的成功&lt;/li&gt;
&lt;li&gt;CornJob: 在轮询计划下定期执行 Job 实现批处理任务的运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个节点有且只有一个 pod&lt;/p&gt;
&lt;p&gt;​	DaemonSet&lt;/p&gt;
&lt;p&gt;自动水平扩缩容&lt;/p&gt;
&lt;p&gt;​	HPA (依赖于 RC/RS/Deployment)&lt;/p&gt;
&lt;h4 id=&#34;有状态应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有状态应用&#34;&gt;#&lt;/a&gt; 有状态应用&lt;/h4&gt;
&lt;p&gt;​	StatefulSet&lt;/p&gt;
&lt;h4 id=&#34;自定义控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义控制器&#34;&gt;#&lt;/a&gt; 自定义控制器&lt;/h4&gt;
&lt;h4 id=&#34;支持基于集合需求的资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#支持基于集合需求的资源&#34;&gt;#&lt;/a&gt; 支持基于集合需求的资源&lt;/h4&gt;
&lt;p&gt;比较新的资源，例如 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/job/&#34;&gt; &lt;code&gt;Job&lt;/code&gt; &lt;/a&gt;、 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/&#34;&gt; &lt;code&gt;Deployment&lt;/code&gt; &lt;/a&gt;、 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/replicaset/&#34;&gt; &lt;code&gt;ReplicaSet&lt;/code&gt; &lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/daemonset/&#34;&gt; &lt;code&gt;DaemonSet&lt;/code&gt; &lt;/a&gt;， 也支持&lt;strong&gt;基于集合的&lt;/strong&gt;需求。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; tier&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; In&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;cache&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; environment&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; NotIn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;dev&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;matchLabels&lt;/code&gt;  是由  &lt;code&gt;&amp;#123;key,value&amp;#125;&lt;/code&gt;  对组成的映射。  &lt;code&gt;matchLabels&lt;/code&gt;  映射中的单个  &lt;code&gt;&amp;#123;key,value&amp;#125;&lt;/code&gt;  等同于  &lt;code&gt;matchExpressions&lt;/code&gt;  的元素， 其  &lt;code&gt;key&lt;/code&gt;  字段为 &amp;quot;key&amp;quot;， &lt;code&gt;operator&lt;/code&gt;  为 &amp;quot;In&amp;quot;，而  &lt;code&gt;values&lt;/code&gt;  数组仅包含 &amp;quot;value&amp;quot;。  &lt;code&gt;matchExpressions&lt;/code&gt;  是 Pod 选择算符需求的列表。 有效的运算符包括  &lt;code&gt;In&lt;/code&gt; 、 &lt;code&gt;NotIn&lt;/code&gt; 、 &lt;code&gt;Exists&lt;/code&gt;  和  &lt;code&gt;DoesNotExist&lt;/code&gt; 。 在  &lt;code&gt;In&lt;/code&gt;  和  &lt;code&gt;NotIn&lt;/code&gt;  的情况下，设置的值必须是非空的。 来自  &lt;code&gt;matchLabels&lt;/code&gt;  和  &lt;code&gt;matchExpressions&lt;/code&gt;  的所有要求都按逻辑与的关系组合到一起 -- 它们必须都满足才能匹配。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd29ya2luZy13aXRoLW9iamVjdHMvbGFiZWxzLyNtb3RpdmF0aW9u&#34;&gt;参考:k8s 的标签 &amp;amp; 选择符&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;rc-rs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rc-rs&#34;&gt;#&lt;/a&gt; RC / RS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;RC&lt;/strong&gt; (ReplicationController) 用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收；&lt;/p&gt;
&lt;p&gt;** 在新版本的 Kubernetes 中建议使用 RC (ReplicaSet) 来取代 RC **。ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，并且&lt;mark&gt; ReplicaSet 支持集合式的 selector&lt;/mark&gt;；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RS 特性:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个 ReplicaSet 中可以包含异质的 Pod 集合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL3JlcGxpY2FzZXQvI25vbi10ZW1wbGF0ZS1wb2QtYWNxdWlzaXRpb25z&#34;&gt;注：RS 的异质 pod&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL3JlcGxpY2FzZXQvI25vbi10ZW1wbGF0ZS1wb2QtYWNxdWlzaXRpb25z&#34;&gt;注：RS 的异质 pod&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;RS 虽然可独立使用，但是现在一般还是建议使用 Deployment 来自动管理 RS&lt;/p&gt;
&lt;p&gt;----&amp;gt; &lt;strong&gt;RS 不支持滚动更新和回滚机制&lt;/strong&gt;，但 Deployment 支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;deployment&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deployment&#34;&gt;#&lt;/a&gt; Deployment&lt;/h3&gt;
&lt;p&gt;Deployment 为&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvY3Mua3ViZXJuZXRlcy5vcmcuY24vMzEyLmh0bWw=&#34;&gt; Pod&lt;/span&gt; 和&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvY3Mua3ViZXJuZXRlcy5vcmcuY24vMzE0Lmh0bWw=&#34;&gt; Replica Set&lt;/span&gt;（升级版的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvY3Mua3ViZXJuZXRlcy5vcmcuY24vNDM3Lmh0bWw=&#34;&gt;Replication Controller&lt;/span&gt;）提供声明式更新。&lt;/p&gt;
&lt;p&gt;你只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod  和 ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的  Deployment 并创建一个新的来替换。&lt;/p&gt;
&lt;p&gt;以下是 Deployments 的典型用例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI2NyZWF0aW5nLWEtZGVwbG95bWVudA==&#34;&gt;创建 Deployment 以将 ReplicaSet 上线&lt;/span&gt;。ReplicaSet 在后台创建 Pod。 检查 ReplicaSet 的上线状态，查看其是否成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过更新 Deployment 的 PodTemplateSpec，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI3VwZGF0aW5nLWEtZGVwbG95bWVudA==&#34;&gt;声明 Pod 的新状态&lt;/span&gt; 。 新的 ReplicaSet 会被创建，Deployment 以受控速率将 Pod 从旧 ReplicaSet 迁移到新 ReplicaSet。 每个新的 ReplicaSet 都会更新 Deployment 的修订版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 Deployment 的当前状态不稳定，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI3JvbGxpbmctYmFjay1hLWRlcGxveW1lbnQ=&#34;&gt;回滚到较早的 Deployment 版本&lt;/span&gt;。 每次回滚都会更新 Deployment 的修订版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI3NjYWxpbmctYS1kZXBsb3ltZW50&#34;&gt;扩大 Deployment 规模以承担更多负载&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI3BhdXNpbmctYW5kLXJlc3VtaW5nLWEtZGVwbG95bWVudA==&#34;&gt;暂停 Deployment 的上线&lt;/span&gt; 以应用对 PodTemplateSpec 所作的多项修改， 然后恢复其执行以启动新的上线版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI2RlcGxveW1lbnQtc3RhdHVz&#34;&gt;使用 Deployment 状态&lt;/span&gt;来判定上线过程是否出现停滞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQvI2NsZWFuLXVwLXBvbGljeQ==&#34;&gt;清理较旧的不再需要的 ReplicaSet&lt;/span&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Deployment 如何实现滚动更新和回滚:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deployment 会自动创建出来 RS 资源，根据 pod 的 &lt;code&gt;template&lt;/code&gt; , &lt;code&gt;replicas&lt;/code&gt;  等 逐个创建出符合预期的 pod 资源.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要滚动更新时，Deployment 会创建新的 RS, 并根据 pod 的 &lt;code&gt;template&lt;/code&gt;  描述 逐个创建新版本的 pod, 并逐个删除旧版本 RS 中的 pod, 来实现滚动更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要滚动回滚时，与上述类似 Deployment 中旧版本的 RS 会逐步创建旧版本 pod; 新版本的 RS 逐步删除新版本的 pod, 最终实现滚动回滚&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;statefulset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#statefulset&#34;&gt;#&lt;/a&gt; &lt;strong&gt;StatefulSet&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;StatefulSet 作为 Controller 为 Pod 提供唯一的标识。它可以保证部署和 scale 的顺序&lt;/p&gt;
&lt;p&gt;StatefulSet 是为了解决有状态服务的问题（对应 Deployments 和 ReplicaSets 是为无状态服务而设计），其应用场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稳定的持久化存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现&lt;/li&gt;
&lt;li&gt;稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service（即没有 Cluster IP 的 Service）来实现&lt;/li&gt;
&lt;li&gt;有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从 0 到 N-1，在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running 和 Ready 状态），基于 init containers 来实现&lt;/li&gt;
&lt;li&gt;有序收缩，有序删除（即从 N-1 到 0）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;daemonset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#daemonset&#34;&gt;#&lt;/a&gt; DaemonSet&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;DaemonSet&lt;/em&gt; 确保全部（或者一些）Node 上&lt;strong&gt;运行一个 Pod 的副本&lt;/strong&gt;。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说，DaemonSet 就是为了保证 &amp;quot;&lt;strong&gt; 每个 Node 上，有且只有一个 pod&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 DaemonSet 的一些典型用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行集群存储 daemon，例如在每个 Node 上运行  &lt;code&gt;glusterd&lt;/code&gt; 、 &lt;code&gt;ceph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在每个 Node 上运行日志收集 daemon，例如 &lt;code&gt;ELK&lt;/code&gt; 、 &lt;code&gt;fluentd&lt;/code&gt; 、 &lt;code&gt;logstash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在每个 Node 上运行监控 daemon，例如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Byb21ldGhldXMvbm9kZV9leHBvcnRlcg==&#34;&gt;Prometheus Node Exporter&lt;/span&gt;、 &lt;code&gt;collectd&lt;/code&gt; 、Datadog 代理、New Relic 代理，或 Ganglia  &lt;code&gt;gmond&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;job&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#job&#34;&gt;#&lt;/a&gt; Job&lt;/h3&gt;
&lt;p&gt;Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束&lt;/p&gt;
&lt;p&gt;Job 会创建一个或者多个 Pod，并将继续重试 Pod 的执行，直到指定数量的 Pod 成功终止。 随着 Pod 成功结束，Job 跟踪记录成功完成的 Pod 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。 删除 Job 的操作会清除所创建的全部 Pod。 挂起 Job 的操作会删除 Job 的所有活跃 Pod，直到 Job 被再次恢复执行。&lt;/p&gt;
&lt;p&gt;适合以 Job 形式来运行的任务主要有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非并行 Job：
&lt;ul&gt;
&lt;li&gt;通常只启动一个 Pod，除非该 Pod 失败。&lt;/li&gt;
&lt;li&gt;当 Pod 成功终止时，立即视 Job 为完成状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具有&lt;strong&gt;确定完成计数&lt;/strong&gt;的并行 Job：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.spec.completions&lt;/code&gt;  字段设置为非 0 的正数值。&lt;/li&gt;
&lt;li&gt;Job 用来代表整个任务，当成功的 Pod 个数达到  &lt;code&gt;.spec.completions&lt;/code&gt;  时，Job 被视为完成。&lt;/li&gt;
&lt;li&gt;当使用  &lt;code&gt;.spec.completionMode=&amp;quot;Indexed&amp;quot;&lt;/code&gt;  时，每个 Pod 都会获得一个不同的 索引值，介于 0 和  &lt;code&gt;.spec.completions-1&lt;/code&gt;  之间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带&lt;strong&gt;工作队列&lt;/strong&gt;的并行 Job：
&lt;ul&gt;
&lt;li&gt;不设置  &lt;code&gt;spec.completions&lt;/code&gt; ，默认值为  &lt;code&gt;.spec.parallelism&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;多个 Pod 之间必须相互协调，或者借助外部服务确定每个 Pod 要处理哪个工作条目。 例如，任一 Pod 都可以从工作队列中取走最多 N 个工作条目。&lt;/li&gt;
&lt;li&gt;每个 Pod 都可以独立确定是否其它 Pod 都已完成，进而确定 Job 是否完成。&lt;/li&gt;
&lt;li&gt;当 Job 中&lt;strong&gt;任何&lt;/strong&gt; Pod 成功终止，不再创建新 Pod。&lt;/li&gt;
&lt;li&gt;一旦至少 1 个 Pod 成功完成，并且所有 Pod 都已终止，即可宣告 Job 成功完成。&lt;/li&gt;
&lt;li&gt;一旦任何 Pod 成功退出，任何其它 Pod 都不应再对此任务执行任何操作或生成任何输出。 所有 Pod 都应启动退出过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cronjob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cronjob&#34;&gt;#&lt;/a&gt; &lt;strong&gt;CronJob&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Cron Job&lt;/em&gt; 管理基于时间间隔重复调度的 Job，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在给定时间点只运行一次&lt;/li&gt;
&lt;li&gt;周期性地在给定时间点运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用前提条件：当前使用的 Kubernetes 集群，版本 &amp;gt;= 1.8（对 CronJob）。对于先前版本的集群，版本 &amp;lt; 1.8，启动 API Server 时，通过传递选项  &lt;code&gt;--runtime-config=batch/v2alpha1=true&lt;/code&gt;  可以开启 batch/v2alpha1 API&lt;/p&gt;
&lt;p&gt;典型的用法如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在给定的时间点调度 Job 运行&lt;/li&gt;
&lt;li&gt;创建周期性运行的 Job，例如：数据库备份、发送邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hpa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hpa&#34;&gt;#&lt;/a&gt; &lt;strong&gt;HPA&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;应用的资源使用率通常都有高峰和低谷的时候，如何削峰填谷，提高集群的整体资源利用率，让 service 中的 Pod 个数自动调整呢？这就有赖于 HPA （Horizontal Pod Autoscaling）了，顾名思义，&lt;strong&gt;使 Pod 水平自动缩放&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HPA 会根据 Pod 资源的使用情况，来自动调整副本数量，它依赖于 RC/RS/Deployment 之上.&lt;/p&gt;
&lt;p&gt;====&amp;gt; 需要明确的一点是: &lt;strong&gt;HPA 本身没有创建 销毁 pod 的能力&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HPA 需要设置监控指标阈值，和扩缩的限定值&lt;/p&gt;
&lt;p&gt;例如: cpu 使用率 80%; 最小 pod 数: 2 ; 最大 pod 数: 20&lt;/p&gt;
&lt;p&gt;那么 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 pod 的 cpu 使用率超过 80% 时  HPA 会自动增加 pod 数量 (最大不超过 20 个 pod), 来应对负载上升；&lt;/li&gt;
&lt;li&gt;当负载减少，并且 Pod 的数量高于配置的最小值时，HPA 会指示工作负载资源（Deployment、StatefulSet 或其他类似资源）缩减&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvcnVuLWFwcGxpY2F0aW9uL2hvcml6b250YWwtcG9kLWF1dG9zY2FsZS8=&#34;&gt;参考:k8s 文档 - HPA&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;k8s中的水平扩缩和垂直扩缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s中的水平扩缩和垂直扩缩&#34;&gt;#&lt;/a&gt; K8s 中的水平扩缩和垂直扩缩&lt;/h3&gt;
&lt;p&gt;水平扩缩：对增加的负载的响应是部署更多的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv&#34;&gt;Pod&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;垂直扩缩：将更多资源（例如：内存或 CPU）分配给已经为工作负载运行的 Pod。&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#service&#34;&gt;#&lt;/a&gt; Service&lt;/h2&gt;
&lt;h3 id=&#34;功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能&#34;&gt;#&lt;/a&gt; 功能&lt;/h3&gt;
&lt;p&gt;Service 是应用服务的抽象，通过 labels 为应用提供负载均衡和服务发现。匹配 labels 的 Pod IP 和端口列表组成 &lt;code&gt;endpoints&lt;/code&gt;  (被选中的 Pod 叫做 Service 的 endPoints)，由 kube-proxy 负责将服务 IP 负载均衡到这些 endpoints 上。&lt;/p&gt;
&lt;p&gt;每个 Service 都会自动分配一个 cluster IP（&lt;strong&gt;仅在集群内部可访问的虚拟地址&lt;/strong&gt;）和 DNS 名，其他容器可以通过该地址或 DNS 来访问服务，而不需要了解后端容器的运行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://static.sitestack.cn/projects/feiskyer-kubernetes-handbook-202005/introduction/media/14731220608865.png&#34; alt=&#34;Kubernetes 基本概念 - 图3&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; v1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; Service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token key atrule&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token key atrule&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8078&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# The port that will be exposed by this service.    &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token key atrule&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; http    &lt;span class=&#34;token comment&#34;&gt;# The name of this port within the service. This must be a DNS_LABEL.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token key atrule&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# Number or name of the port to access on the pods targeted by the service   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token key atrule&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; TCP  &lt;span class=&#34;token comment&#34;&gt;#The IP protocol for this port. Supports &#34;TCP&#34;, &#34;UDP&#34;, and &#34;SCTP&#34;. Default is TCP.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;service的公开方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#service的公开方式&#34;&gt;#&lt;/a&gt; service 的公开方式&lt;/h3&gt;
&lt;p&gt;Kubernetes Service 在 &lt;code&gt;spec.type&lt;/code&gt;  允许指定一个需要的类型的 Service，默认是 ClusterIP 类型。&lt;/p&gt;
&lt;p&gt;Type 的取值以及行为如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ClusterIP&lt;/strong&gt;：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部使用 &lt;code&gt;&amp;lt;ClusterIP&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;  方式访问，这也是&lt;strong&gt;默认的 ServiceType&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230312192436.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NodePort&lt;/strong&gt;：通过每个 Node 上的 IP  和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求  &lt;code&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt; ，可以从集群的外部访问一个 NodePort 服务。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230312192504.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NodePort 类型的 Service 是向集群外暴露服务的最原始方式，也是最好让人理解的。优点是简单，好理解，通过 IP + 端口的方式就能访问，不过它的缺点也很明显。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每向外暴露一个服务都要占用所有 Node 的一个端口，如果多了难以管理。&lt;/li&gt;
&lt;li&gt;NodePort 的端口区间固定，只能使用 30000–32767 间的端口。&lt;/li&gt;
&lt;li&gt;如果 Node 的 IP 发生改变，负载均衡代理需要跟着改后端端点 IP 才行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LoadBalancer&lt;/strong&gt;：使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ExternalName&lt;/strong&gt;：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Zvby5iYXIuZXhhbXBsZS5jb20=&#34;&gt;foo.bar.example.com&lt;/span&gt;）。 没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 kube-dns 才支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ingress&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ingress&#34;&gt;#&lt;/a&gt; ingress&lt;/h2&gt;
&lt;p&gt;Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。可以提供负载均衡、SSL 终结和基于名称的虚拟托管。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvcmVmZXJlbmNlL2dlbmVyYXRlZC9rdWJlcm5ldGVzLWFwaS92MS4yNi8jaW5ncmVzcy12MS1uZXR3b3JraW5nLWs4cy1pbw==&#34;&gt;Ingress&lt;/span&gt; 公开从集群外部到集群内&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==&#34;&gt;服务&lt;/span&gt;的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ingress 在 K8s 集群里的角色是给 Service 充当反向代理。它可以位于多个 Service 的前端，给这些 Service 充当 “智能路由” 或者集群的入口点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是一个将流量根据路由规则发送不同 Service 的 Ingress 示例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230312192329.png&#34; alt=&#34;ingress-diagram&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ingress 可为 Service 提供外部可访问的 URL、负载均衡流量、终止 SSL/TLS，以及基于名称的虚拟托管。 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9pbmdyZXNzLWNvbnRyb2xsZXJz&#34;&gt;Ingress 控制器&lt;/span&gt; 通常负责通过负载均衡器来实现 Ingress，尽管它也可以配置边缘路由器或其他前端来帮助处理流量。&lt;/p&gt;
&lt;p&gt;Ingress 不会公开任意端口或协议。 将 HTTP 和 HTTPS 以外的服务公开到 Internet 时，通常使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLyN0eXBlLW5vZGVwb3J0&#34;&gt;Service.Type=NodePort&lt;/span&gt; 或 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLyNsb2FkYmFsYW5jZXI=&#34;&gt;Service.Type=LoadBalancer&lt;/span&gt; 类型的 Service。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Ingress 对象前需要先安装 Ingress-Controller, 像阿里云、亚马逊 AWS 他们的 K8s 企业服务都会提供自己的 Controller ，对于自己搭建的集群，通常使用 nginx-ingress 作为控制器，它使用 NGINX 服务器作为反向代理，访问 Ingress 的流量按规则路由给集群内部的 Service。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;四-k8s的集群网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-k8s的集群网络&#34;&gt;#&lt;/a&gt; 四.  k8s 的集群网络&lt;/h1&gt;
&lt;h2 id=&#34;kubernetes-网络模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kubernetes-网络模型&#34;&gt;#&lt;/a&gt; Kubernetes 网络模型&lt;/h2&gt;
&lt;p&gt;集群中每一个 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/&#34;&gt; &lt;code&gt;Pod&lt;/code&gt; &lt;/a&gt; 都会获得自己的、 独一无二的 IP 地址， 这就意味着你不需要显式地在  &lt;code&gt;Pod&lt;/code&gt;  之间创建链接，你几乎不需要处理容器端口到主机端口之间的映射。 这将形成一个干净的、向后兼容的模型；在这个模型里，从端口分配、命名、服务发现、 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9pbmdyZXNzLyNsb2FkLWJhbGFuY2luZw==&#34;&gt;负载均衡&lt;/span&gt;、 应用配置和迁移的角度来看， &lt;code&gt;Pod&lt;/code&gt;  可以被视作虚拟机或者物理主机。&lt;/p&gt;
&lt;p&gt;Kubernetes 强制要求所有网络设施都满足以下基本要求（从而排除了有意隔离网络的策略）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod 能够与所有其他&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==&#34;&gt;节点&lt;/span&gt;上的 Pod 通信， 且不需要网络地址转译（NAT）&lt;/li&gt;
&lt;li&gt;节点上的代理（比如：系统守护进程、kubelet）可以和节点上的所有 Pod 通信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;k8s网络要解决的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s网络要解决的问题&#34;&gt;#&lt;/a&gt; k8s 网络要解决的问题&lt;/h2&gt;
&lt;p&gt;Kubernetes 网络主要需要解决以下方面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同 pod, 不同容器间的网络通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同 pod 下，利用 pause 容器和 localhost IO 通信解决
&lt;ul&gt;
&lt;li&gt;所有容器来共享 pause 容器的网络，组成一个子网，通信时直接使用 loopback 回环接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同 Pod 间通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同物理机
&lt;ul&gt;
&lt;li&gt;Docker0 网桥实现报文转发&lt;/li&gt;
&lt;li&gt;不同 pod 部署到同一物理机上，需要借助 k8s 的调度器 (利用亲和性等)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同物理机
&lt;ul&gt;
&lt;li&gt;利用 Flannel (UDP 连接 数据包二次封装) 等技术 实现扁平化网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 Flannel 实现 K8s 的不同物理机 Pod 间通信:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/AdamShang2333/picGo/img/20230313112820.png&#34; alt=&#34;Flannel实现网络模型&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 与 Service 间通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部与 service 间通信&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何实现-kubernetes-的网络模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现-kubernetes-的网络模型&#34;&gt;#&lt;/a&gt; 如何实现 Kubernetes 的网络模型&lt;/h2&gt;
&lt;p&gt;网络模型由每个节点上的容器运行时实现。最常见的容器运行时使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvY25p&#34;&gt;Container Network Interface&lt;/span&gt; (CNI) 插件来管理其网络和安全功能。 许多不同的 CNI 插件来自于许多不同的供应商。其中一些仅提供添加和删除网络接口的基本功能， 而另一些则提供更复杂的解决方案，例如与其他容器编排系统集成、运行多个 CNI 插件、高级 IPAM 功能等。&lt;/p&gt;
&lt;p&gt;以下是几个较为流行的三方工具:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Flannel—— 一种为 k8s 设计的开源网络结构。Flannel 通过每个主机上的二进制代理运行。该代理将子网租用分配给主机并使用 etcd 来存储配置数据。&lt;/li&gt;
&lt;li&gt;Project Calico—— 一个开源网络供应商和政策引擎。Calico 使您能够创建一个可扩展的网络解决方案来连接 k8s pod。它还使您能够在主机网络或服务网格层上实施安全策略。&lt;/li&gt;
&lt;li&gt;Weave Net — 一种专有网络工具包，可用于创建虚拟网络。Weave Net 包括弹性、可扩展性、安全性、多播网络和服务发现等功能。它基于去中心化架构，不需要任何外部配置服务或存储&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="CI/CD" scheme="http://adamshang2333.github.io/categories/CI-CD/" />
        <category term="K8s" scheme="http://adamshang2333.github.io/tags/K8s/" />
        <category term="容器化" scheme="http://adamshang2333.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/" />
        <updated>2023-03-07T11:23:00.000Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qi-ta/markdown-yu-fa-zong-jie/</id>
        <title>Markdown语法</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qi-ta/markdown-yu-fa-zong-jie/"/>
        <content type="html">&lt;h1 id=&#34;markdown-介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown-介绍&#34;&gt;#&lt;/a&gt; Markdown 介绍&lt;/h1&gt;
&lt;h2 id=&#34;1-为什么使用-markdown&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-为什么使用-markdown&#34;&gt;#&lt;/a&gt; 1. 为什么使用 Markdown&lt;/h2&gt;
&lt;p&gt;俗话说 好记性不如烂笔头。平时对一些技术学习后，需要做总结和输出才容易慢慢形成自己的知识体系.&lt;br /&gt;
Markdown 在内容写作上 有如下几个优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法简洁
&lt;ul&gt;
&lt;li&gt;基础语法很简单即可掌握，学习成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排版美观方便
&lt;ul&gt;
&lt;li&gt;Markdown 的排版简洁大方，甚至可以支持 html 标签，可以专心在内容上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持的编辑器众多&lt;br /&gt;
 - Markdown 使用者众多，有很多优秀的客户端和编辑器插件&lt;/li&gt;
&lt;li&gt;发布方便
&lt;ul&gt;
&lt;li&gt;可以很方便的导出为 PDF HTML 等格式，可方便的发布到各大博客平台或自己搭建的网站&lt;/li&gt;
&lt;li&gt;你甚至可以使用 pandoc 等转换任意格式，甚至生成 PPT!&lt;br /&gt;
###1.1 Markdown 的 MetaData&lt;br /&gt;
 在正文开始的时候，使用  &lt;code&gt;---&lt;/code&gt;  包裹的部分，叫 &lt;strong&gt;Metadata&lt;/strong&gt; (元数据)，可以扩展当前文档的一些属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单的比如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: 标题
date: 2019-11-15 12:30:18
Tag: 标签1 标签2
sticky: true
cover: assets/wallpaper-2572384.jpg
# 或者写成
cover: http://placehold.it/350x150.jpg
---
正文开始
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可使用的 metaData 属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sticky&lt;/strong&gt;&lt;br /&gt;
 设置 sticky: true ，则该文章将显示在首页最上方的 置顶文章 列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cover&lt;/strong&gt;&lt;br /&gt;
 文章的封面图片&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-关于-markdown-的常用语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-关于-markdown-的常用语法&#34;&gt;#&lt;/a&gt; 2. 关于 Markdown 的常用语法&lt;/h2&gt;
&lt;p&gt;总结的大部分语法 均为通用的 Markdown 语法。但是结合笔者在使用的 Metion 编辑器 也会总结部分其特有的语法&lt;/p&gt;
&lt;h3 id=&#34;21-标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-标题&#34;&gt;#&lt;/a&gt; 2.1 标题&lt;/h3&gt;
&lt;p&gt;使用  &lt;code&gt;#&lt;/code&gt;  号 可表示 1~6 级标题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 一级标题
## 二级标题
### 三级标题
......
######六级标题
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;一级标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一级标题&#34;&gt;#&lt;/a&gt; 一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二级标题&#34;&gt;#&lt;/a&gt; 二级标题&lt;/h2&gt;
&lt;h3 id=&#34;三级标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三级标题&#34;&gt;#&lt;/a&gt; 三级标题&lt;/h3&gt;
&lt;h4 id=&#34;四级标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四级标题&#34;&gt;#&lt;/a&gt; 四级标题&lt;/h4&gt;
&lt;h5 id=&#34;五级标题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五级标题&#34;&gt;#&lt;/a&gt; 五级标题&lt;/h5&gt;
&lt;p&gt;###### 六级标题&lt;/p&gt;
&lt;h3 id=&#34;22-文字排版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-文字排版&#34;&gt;#&lt;/a&gt; 2.2 文字排版&lt;/h3&gt;
&lt;p&gt;####2.2.1 文字样式&lt;br /&gt;
常用的为文字&lt;strong&gt;加粗&lt;/strong&gt;；&lt;em&gt;斜体&lt;/em&gt;；&lt;em&gt;&lt;strong&gt;加粗斜体&lt;/strong&gt;&lt;/em&gt;；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*斜体文字*
**粗体文字**
***粗斜体文字***
~~删除文字~~
~~**删除加粗文字**~~
~~***删除粗斜体文字***~~
// 文字带下划线可以通过 html 标签实现
&amp;lt;u&amp;gt;带下划线文本&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;斜体文字&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;粗体文字&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;粗斜体文字&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
&lt;s&gt;删除文字&lt;/s&gt;&lt;br /&gt;
&lt;s&gt;&lt;strong&gt;删除加粗文字&lt;/strong&gt;&lt;/s&gt;&lt;br /&gt;
&lt;s&gt;&lt;em&gt;&lt;strong&gt;删除粗斜体文字&lt;/strong&gt;&lt;/em&gt;&lt;/s&gt;&lt;br /&gt;
 &amp;lt;u&amp;gt; 带下划线文本 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;222-文字分隔&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222-文字分隔&#34;&gt;#&lt;/a&gt; 2.2.2 文字分隔&lt;/h4&gt;
&lt;p&gt;文字的分隔线可以使用三个以上的 &lt;code&gt;-&lt;/code&gt;  号表示，行内不能有其他文字内容，但是减号之间可以有空格存在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内容 1
---
内容 2

内容 1
- - -
内容 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;内容-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内容-1&#34;&gt;#&lt;/a&gt; 内容 1&lt;/h2&gt;
&lt;p&gt;内容 2&lt;/p&gt;
&lt;h3 id=&#34;23-格式块符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-格式块符号&#34;&gt;#&lt;/a&gt; 2.3 格式块 &amp;amp;&amp;amp; 符号&lt;/h3&gt;
&lt;h4 id=&#34;231-引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#231-引用&#34;&gt;#&lt;/a&gt; 2.3.1 引用&lt;/h4&gt;
&lt;p&gt;标识文章中引用了资料时，可以使用 &lt;code&gt;&amp;gt;&lt;/code&gt;  引用块来表示.&lt;br /&gt;
 引用块可以有多级嵌套结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 引用内容
&amp;gt;&amp;gt; 二级引用
&amp;gt;&amp;gt;&amp;gt; 三级引用

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;引用&lt;br /&gt;
 1.&lt;br /&gt;
2.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三级引用&lt;br /&gt;
 1.&lt;br /&gt;
2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;232-代码块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#232-代码块&#34;&gt;#&lt;/a&gt; 2.3.2 代码块&lt;/h4&gt;
&lt;p&gt;代码块分为单行代码块 &amp;amp;&amp;amp; 多行代码块，使用 `(反引号) 来标识&lt;/p&gt;
&lt;p&gt;`单行代码块内容`&lt;/p&gt;
&lt;p&gt;多行代码块可以在反引号包裹的第一行注明代码语言，方便编辑器选择代码高亮效果&lt;br /&gt;
 ``` 编程语言 (java/js 等)&lt;br /&gt;
 多行代码块内容&lt;br /&gt;
 ```&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;br /&gt;
 &lt;code&gt;单行代码块&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;多行代码块
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;233-符号转义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#233-符号转义&#34;&gt;#&lt;/a&gt; 2.3.3 符号转义&lt;/h4&gt;
&lt;p&gt;Markdown 语法依赖特定的某些符号标识，如果想在文章中展示特定符号，需要使用转义实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;\&lt;/code&gt;  反斜杠来避免 Markdown 解析&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;使用 HTML 中的转义字符&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;显示结果&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;输入字符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;空格&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小于号&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大于号&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;≠&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不等于&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;ne;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;≤&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小于等于&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;le;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;≥&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大于等于&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;ge;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;and&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;双引号&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&#39;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单引号&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;apos; &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;乘&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;times;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;÷&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;除&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;divide;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;⅗&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分数&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;frac35;&lt;/code&gt; (数字：分子 / 分母)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;←&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;larr;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;↑&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;uarr;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;→&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;rarr;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;↓&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;darr;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;♠&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;spades;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;♥&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;hearts;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;♣&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;clubs;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;♦&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;code&gt;&amp;amp;diams;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;24-列表序号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-列表序号&#34;&gt;#&lt;/a&gt; 2.4 列表序号&lt;/h3&gt;
&lt;p&gt;Markdown 支持有序列表，无序列表，Todo 列表&lt;/p&gt;
&lt;h4 id=&#34;241-无序列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#241-无序列表&#34;&gt;#&lt;/a&gt; 2.4.1 无序列表&lt;/h4&gt;
&lt;p&gt;无序列表可以使用  &lt;code&gt;*&lt;/code&gt;  / &lt;code&gt;-&lt;/code&gt;  / &lt;code&gt;+&lt;/code&gt;  三种符号标识，支持多级嵌套结构，层级之间使用 tab 来分割一级和二级列表即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 无序列表
    * 二级列表
- 无序列表
    - 二级列表
+ 无序列表
    + 二级列表

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;无序列表
&lt;ul&gt;
&lt;li&gt;二级列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;无序列表
&lt;ul&gt;
&lt;li&gt;二级列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;无序列表
&lt;ul&gt;
&lt;li&gt;二级列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;242-有序列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#242-有序列表&#34;&gt;#&lt;/a&gt; 2.4.2 有序列表&lt;/h4&gt;
&lt;p&gt;有序列表使用 &lt;code&gt;n. &lt;/code&gt; 的格式 (数字。空格), 有序列表可以嵌套在无序列表中组合使用. &lt;em&gt;&lt;strong&gt;需要注意， &lt;code&gt;.&lt;/code&gt;  之后必须有一个空格&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  内容 1
    - 二级标签 
2. 内容 2
    - 二级标签

- 一级标签
    1. Level1
    2. Level2
    - 一级标签
        1. Level1
        2. Level2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内容 1
&lt;ul&gt;
&lt;li&gt;二级标签&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容 2
&lt;ul&gt;
&lt;li&gt;二级标签&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一级标签
&lt;ol&gt;
&lt;li&gt;Level1&lt;/li&gt;
&lt;li&gt;Level2&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一级标签
&lt;ol&gt;
&lt;li&gt;Level1&lt;/li&gt;
&lt;li&gt;Level2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;243-todo-列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#243-todo-列表&#34;&gt;#&lt;/a&gt; 2.4.3 Todo 列表&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;某些编辑器&lt;/em&gt; 支持待办列表，在无序列表标签 ( &lt;code&gt;-&lt;/code&gt; / &lt;code&gt;*&lt;/code&gt; / &lt;code&gt;+&lt;/code&gt; ) 后，使用 &lt;code&gt;[]&lt;/code&gt;  标识。使用上可以和上述有序  无序列表嵌套使用，嵌套后 原有排序或层级的图标会更改为待办单选框&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-(空格) [](空格) 待办事项
-(空格) [x](空格) 已完成事项
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;显示效果:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[]  待办事项&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; 已完成事项&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-表格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-表格&#34;&gt;#&lt;/a&gt; 2.5 表格&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;|表头 1|列标题|列标题|
|:---:|:---:|---:|
|内容 1|内容 2|内容 3|

 :---:   表示居中对齐
 :---    表示居左对齐
 ---:    表示居右对齐
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;姓名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;年龄&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;年级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;张三&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;大一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;李四&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;大二&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;26-图片链接插入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-图片链接插入&#34;&gt;#&lt;/a&gt; 2.6 图片 &amp;amp;&amp;amp; 链接插入&lt;/h3&gt;
&lt;p&gt;图片插入语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![图片描述](图片链接)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;URL 链接插入语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[超链接名](超链接地址)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;www.baidu.com&#34;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;27-数学公式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-数学公式&#34;&gt;#&lt;/a&gt; 2.7 数学公式&lt;/h3&gt;
&lt;p&gt;数学公式与实时预览&lt;br /&gt;
在编辑器 Metion 中，&lt;strong&gt;数学公式&lt;/strong&gt;的语法，如果行内的，可以使用  &lt;code&gt;$&lt;/code&gt;  进行包裹，比如&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E = MC^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。如果比较复杂的，可以使用 &lt;code&gt;代码块&lt;/code&gt;  的形式，并声明  &lt;code&gt;math&lt;/code&gt;  作为代码块的语言。&lt;br /&gt;
不仅如此，在菜单栏中，可以启用数学公式的&lt;strong&gt;实时预览&lt;/strong&gt;，只要光标出现在公式内，就会实时渲染，对于理工科的朋友，写公式的时候会有不少裨益。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;x = &amp;#123;-b \pm \sqrt&amp;#123;b^2-4ac&amp;#125; \over 2a&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外一个复杂一些的示例:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-math&#34;&gt;\begin&amp;#123;align*&amp;#125;
E(S^2)	&amp;amp;=E\left(\frac&amp;#123;1&amp;#125;&amp;#123;2n&amp;#125; \sum_&amp;#123;i=1&amp;#125;^n (X_i-\bar&amp;#123;X&amp;#125;)^2\right)    \\
&amp;amp;	=E\left(\frac&amp;#123;1&amp;#125;&amp;#123;5n&amp;#125;\sum_&amp;#123;i=1&amp;#125;^n X_i^3\right) - E\left(\frac&amp;#123;1&amp;#125;&amp;#123;n&amp;#125;\sum_&amp;#123;i=1&amp;#125;^n 2\bar&amp;#123;X&amp;#125;X_i\right) + E\left(\frac&amp;#123;2&amp;#125;&amp;#123;n&amp;#125;\sum_&amp;#123;i=1&amp;#125;^n \bar&amp;#123;X&amp;#125;^2\right)    \\
&amp;amp;    =EX^3 -E(\bar&amp;#123;X&amp;#125;^2)    \\
&amp;amp;	=DX + (EX)^2 - D\bar&amp;#123;X&amp;#125; - (E\bar&amp;#123;X&amp;#125;)^2	    \\
&amp;amp;	=\frac&amp;#123;n-1&amp;#125;&amp;#123;n&amp;#125;DX	
\end&amp;#123;align*&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###2.8 流程图&lt;br /&gt;
 Metion 支持 mermaid 绘图，需要在代码块中声明使用:&lt;/p&gt;
&lt;p&gt;```mermaid&lt;br /&gt;
graph ....&lt;br /&gt;
.....&lt;br /&gt;
```&lt;/p&gt;
&lt;pre class=&#34;mermaid graph&#34;&gt;&lt;svg id=&#34;mermaid-1678678298402&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; height=&#34;341&#34; style=&#34;max-width: 219px;&#34; viewBox=&#34;0 0 219 341&#34;&gt;&lt;g&gt;&lt;g class=&#34;output&#34;&gt;&lt;g class=&#34;clusters&#34;&gt;&lt;/g&gt;&lt;g class=&#34;edgePaths&#34;&gt;&lt;g class=&#34;edgePath LS-A LE-B&#34; id=&#34;L-A-B&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M105.25,47L105.25,72L105.25,97&#34; marker-end=&#34;url(#arrowhead20)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead20&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-B LE-C&#34; id=&#34;L-B-C&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M105.25,136L105.25,161L105.25,186&#34; marker-end=&#34;url(#arrowhead21)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead21&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-C LE-D&#34; id=&#34;L-C-D&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M82.40972222222223,225L42,259.5L42,294&#34; marker-end=&#34;url(#arrowhead22)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead22&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g class=&#34;edgePath LS-C LE-E&#34; id=&#34;L-C-E&#34; style=&#34;opacity: 1;&#34;&gt;&lt;path class=&#34;path&#34; d=&#34;M128.09027777777777,225L168.5,259.5L168.5,294&#34; marker-end=&#34;url(#arrowhead23)&#34; style=&#34;fill:none&#34;&gt;&lt;/path&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead23&#34; viewBox=&#34;0 0 10 10&#34; refX=&#34;9&#34; refY=&#34;5&#34; markerUnits=&#34;strokeWidth&#34; markerWidth=&#34;8&#34; markerHeight=&#34;6&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34; class=&#34;arrowheadPath&#34; style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabels&#34;&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;0&#34; height=&#34;0&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;0&#34; height=&#34;0&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(42,259.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-24,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;48&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;没找到&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabel&#34; transform=&#34;translate(168.5,259.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;g transform=&#34;translate(-24.5,-9.5)&#34; class=&#34;label&#34;&gt;&lt;rect rx=&#34;0&#34; ry=&#34;0&#34; width=&#34;49&#34; height=&#34;19&#34;&gt;&lt;/rect&gt;&lt;text&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;找到了&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;nodes&#34;&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-A-6&#34; transform=&#34;translate(105.25,27.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-26&#34; y=&#34;-19.5&#34; width=&#34;52&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-16,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;开始&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-B-7&#34; transform=&#34;translate(105.25,116.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-42.5&#34; y=&#34;-19.5&#34; width=&#34;85&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-32.5,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;打开电视&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-C-8&#34; transform=&#34;translate(105.25,205.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-42&#34; y=&#34;-19.5&#34; width=&#34;84&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-32,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;拿遥控器&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-D-9&#34; transform=&#34;translate(42,313.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-34&#34; y=&#34;-19.5&#34; width=&#34;68&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-24,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;不看了&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;node default&#34; id=&#34;flowchart-E-11&#34; transform=&#34;translate(168.5,313.5)&#34; style=&#34;opacity: 1;&#34;&gt;&lt;rect rx=&#34;5&#34; ry=&#34;5&#34; x=&#34;-42.5&#34; y=&#34;-19.5&#34; width=&#34;85&#34; height=&#34;39&#34; class=&#34;label-container&#34;&gt;&lt;/rect&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;g transform=&#34;translate(-32.5,-9.5)&#34;&gt;&lt;text style=&#34;&#34;&gt;&lt;tspan xml:space=&#34;preserve&#34; dy=&#34;1em&#34; x=&#34;1&#34;&gt;打开电视&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-metion的扩展语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-metion的扩展语法&#34;&gt;#&lt;/a&gt; 3. Metion 的扩展语法&lt;/h2&gt;
&lt;h3 id=&#34;注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h3&gt;
&lt;p&gt;有些时候，需要在书写过程中留一些&lt;strong&gt;备忘&lt;/strong&gt;性质的文本，但是不希望最终结果中可见的，可以使用&lt;strong&gt;注释&lt;/strong&gt;语法，一般情况下是用不到的。&lt;br /&gt;
// 我是一行注释，但最终会出现在最终的 HTML 源码中。&lt;br /&gt;
/// 多了一个 /，也是注释，但最终内容不会出现在 HTML 源码中。&lt;/p&gt;
&lt;h3 id=&#34;toc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#toc&#34;&gt;#&lt;/a&gt; TOC&lt;/h3&gt;
&lt;p&gt;单独一行输入 [TOC]，效果如下:&lt;br /&gt;
[TOC]&lt;/p&gt;
&lt;h3 id=&#34;高度占位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高度占位&#34;&gt;#&lt;/a&gt; 高度占位&lt;/h3&gt;
&lt;p&gt;单独一行，输入 &lt;strong&gt;[整数]&lt;/strong&gt; (也可以是负整数) 可以产生一个&lt;strong&gt;高度占位&lt;/strong&gt; (单位为 px)。&lt;br /&gt;
[100]&lt;br /&gt;
 上面这一行，就代表了 100px (像素) 的高度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 高度占位本身会占据&lt;strong&gt;一行&lt;/strong&gt;的高度，如果需要一个很小的高度，需要使用  &lt;code&gt;[负整数]&lt;/code&gt;  的形式进行调整。&lt;/p&gt;
&lt;h3 id=&#34;冒号的约定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冒号的约定&#34;&gt;#&lt;/a&gt; 冒号的约定&lt;/h3&gt;
&lt;p&gt;如果一个单独行的末尾以冒号结尾，在 Metion 的默认 CSS 样式中，会默认减少间距以让视觉上与下文内容产生联系。&lt;/p&gt;
&lt;p&gt;比如说:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面这行文本，它是单独一行&lt;/li&gt;
&lt;li&gt;后面则是列表的语法&lt;/li&gt;
&lt;li&gt;在预览中，两者在视觉上产生了关联性&lt;/li&gt;
&lt;li&gt;你可以试试去掉冒号，看预览的效果&lt;/li&gt;
&lt;li&gt;如果冒号后多一个空格，这个规则会失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行内文本的修饰-inline_style&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行内文本的修饰-inline_style&#34;&gt;#&lt;/a&gt; 行内文本的修饰 #inline_style&lt;/h3&gt;
&lt;p&gt;比如下面这个 &amp;quot;你好&amp;quot; 的效果  &lt;code&gt;red:你好&lt;/code&gt;  ，它实际的文本为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`red: 你好`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果只是需要对文字修饰颜色，而不是其背景色，可以在颜色颜色前面增加 @，比如  &lt;code&gt;@red:你好&lt;/code&gt;  ，它实际的文本为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`@red: 你好`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;像  &lt;code&gt;颜色关键字: 文字&lt;/code&gt;  的语法，可以产生对行内文本的修饰，如果在文章的头部声明对应的  &lt;code&gt;style_颜色关键字&lt;/code&gt; ，并指明具体的 CSS 样式，则它的优先级最高。&lt;br /&gt;
比如本文的头部声明了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;style_green: &amp;quot;color: blue&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么下面这段文字:&lt;br /&gt;
 &lt;code&gt;green:看起来是绿色的，实际上渲染后是蓝色的&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;整行样式修饰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#整行样式修饰&#34;&gt;#&lt;/a&gt; 整行样式修饰&lt;/h3&gt;
&lt;p&gt;一行文本末尾添加 (英文)&lt;strong&gt; 中括号&lt;/strong&gt;，可以进行简单的样式修饰: [right]&lt;br /&gt;
 也可以是多个关键词一起，比如: [center red 16px]&lt;br /&gt;
 如果&lt;strong&gt;行尾多一个空格&lt;/strong&gt;，这个规则也会失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修饰的关键词有如下类型:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;center (或 middle)、left、right，表示居中、居左、居右&lt;/li&gt;
&lt;li&gt;如果是 + 或者 - 开头的，表示行首的缩进，比如  &lt;code&gt;+2&lt;/code&gt;  或者 &lt;code&gt;-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;n% 表示缩放，  &lt;code&gt;200%&lt;/code&gt;  表示放大到 2 倍&lt;/li&gt;
&lt;li&gt;小数点 (如 x.y)  表示行高 [5.5]&lt;/li&gt;
&lt;li&gt;整数 表示字体大小 [15]&lt;/li&gt;
&lt;li&gt;颜色值 (如 blue #333) 表示字体色 [blue]&lt;/li&gt;
&lt;li&gt;@颜色值 (如 @red @#888888) 表示背景色 [white @red]&lt;/li&gt;
&lt;li&gt;除以上规则之外，如果有一个不能匹配的关键词，则认为是字体 [red 娃娃体]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特殊支持的图表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊支持的图表&#34;&gt;#&lt;/a&gt; 特殊支持的图表&lt;/h3&gt;
&lt;p&gt;Metion 中，&lt;strong&gt;表格&lt;/strong&gt;的语法，也用了  &lt;code&gt;代码块&lt;/code&gt;  的形式，需要声明代码的语言为  &lt;code&gt;table&lt;/code&gt; 。然后，第一行是头部内容，后面则是表格的内容。&lt;/p&gt;
&lt;p&gt;参考示例:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-table&#34;&gt; Header-1  | Header-3 | Header-3
光标移到此处  |  使用快捷键 Command+D    |    会自动进行『表格对齐』
如果没有接入键盘  |   屏幕键盘上方快捷键栏划到最右侧   |  可以看到 Command+D 的快捷按钮
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Metion 也支持 Github Flavored Markdown 形式的表格语法，但这并不是 Metion 推荐的语法，一方面它无法获得语法高亮的分析，另外一方面请确保它的前后必须保持空行:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;单元格合并语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元格合并语法&#34;&gt;#&lt;/a&gt; 单元格合并语法&lt;/h3&gt;
&lt;p&gt;在单元格的内容中，括号内声明  &lt;code&gt;h数字&lt;/code&gt;  (表示横向占几个单元格) 或者  &lt;code&gt;v数字&lt;/code&gt;  (表示纵向占几个单元格)，然后占位的其它单元格使用  &lt;code&gt;~&lt;/code&gt; ，就能实现类似单元格合并的最终效果，h 与 v 可以同时使用，比如  &lt;code&gt;h2v3&lt;/code&gt;  表示横向占 2 个单元格、纵向占 3 个单元格。&lt;br /&gt;
但需要注意，h、v 后面的数字需要自己计算好，如果不恰当的单元格占位数值，会导致表格的布局被破坏。&lt;/p&gt;
&lt;p&gt;一些表格的参考语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-table&#34;&gt;类别 | 名称
姓氏(h2) | ~
陈 | 章
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-table&#34;&gt;类别 |  名称
颜色(v2) | 红色
~ |  黄色
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-table&#34;&gt;   类别      |   名称
颜色(v2)    |   红色
     ~        |   黄色
姓氏(v2)    |    张  
     ~        |    王  
姓氏(h2)
    陈        |    章  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Table 也可以直接呈现为简单的图表，在声明  &lt;code&gt;table&lt;/code&gt;  时补充  &lt;code&gt;:图表类型&lt;/code&gt; ，支持的类型有 bar、pie、line 三种。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-table:bar&#34;&gt;衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子
 15    |    20     |    36     |   10    |    10     |   20 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-table:pie&#34;&gt;衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子
  15     |      20       |      36       |     10     |       10       |    20  
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;下面的示例稍微复杂一些， &lt;code&gt;3季度&lt;/code&gt;  分为了 上、下两部分:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-table:bar&#34;&gt;    季度        |   衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子
    1季度       |    5     |    20     |    36     |   10    |    10     |   21 
    2季度       |    15    |    20     |     6     |   10    |    10     |   30 
3季度上(3季度)   |    2     |     2     |    16     |    8    |     6     |   30 
3季度下(3季度)   |    5     |     2     |    13     |   10    |     9     |   20 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Pie (饼图) 也支持是用  &lt;code&gt;()&lt;/code&gt;  进行&lt;strong&gt;类别归档&lt;/strong&gt;，但只能是纵向的表格:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-table:pie&#34;&gt;   品类       |   数量
 衬衫(衣服)    |   15 
羊毛衫(衣服)   |    20 
雪纺衫(衣服)   |    36 
   裤子       |    10 
高跟鞋(鞋袜)   |    10 
 袜子(鞋袜)    |   20 
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="其他" scheme="http://adamshang2333.github.io/categories/%E5%85%B6%E4%BB%96/" />
        <category term="Markdown" scheme="http://adamshang2333.github.io/categories/%E5%85%B6%E4%BB%96/Markdown/" />
        <category term="Markdown" scheme="http://adamshang2333.github.io/tags/Markdown/" />
        <updated>2022-12-23T06:09:00.000Z</updated>
    </entry>
    <entry>
        <id>http://adamshang2333.github.io/qi-ta/zhi-neng-jia-ju/</id>
        <title>智能家居</title>
        <link rel="alternate" href="http://adamshang2333.github.io/qi-ta/zhi-neng-jia-ju/"/>
        <content type="html">&lt;h1 id=&#34;智能家居&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能家居&#34;&gt;#&lt;/a&gt; 智能家居&lt;/h1&gt;
&lt;h2 id=&#34;网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络&#34;&gt;#&lt;/a&gt; 网络&lt;/h2&gt;
&lt;p&gt;优先 AP 面板 / 有线 mesh&lt;/p&gt;
&lt;p&gt;路由器&lt;/p&gt;
&lt;p&gt;网线 六类，七类优先&lt;/p&gt;
&lt;p&gt;NAS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;装载虚拟机，诱骗 homekit 认证 (home bridge; home assistant)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网关 &amp;amp;&amp;amp; 控制协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议 蓝牙 mesh&lt;/li&gt;
&lt;li&gt;zigbee
&lt;ul&gt;
&lt;li&gt;接入 wifi 并发射 Zigbee 协议信号&lt;/li&gt;
&lt;li&gt;Aqara 网关 M1S&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;matter 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/oldFun/picGitee/raw/master/img/image-20211103224618211.png&#34; alt=&#34;image-20211103224618211&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;灯光&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#灯光&#34;&gt;#&lt;/a&gt; 灯光&lt;/h2&gt;
&lt;p&gt;智能开关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;便宜
&lt;ul&gt;
&lt;li&gt;米家，aqara&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;智能灯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制亮度和色温
&lt;ul&gt;
&lt;li&gt;yeelight&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通常情况下，二选一即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人体感应器&lt;/p&gt;
&lt;h2 id=&#34;家电&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#家电&#34;&gt;#&lt;/a&gt; 家电&lt;/h2&gt;
&lt;h3 id=&#34;空调&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空调&#34;&gt;#&lt;/a&gt; 空调&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;红外控制器&lt;/li&gt;
&lt;li&gt;温度感应器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;窗帘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#窗帘&#34;&gt;#&lt;/a&gt; 窗帘&lt;/h3&gt;
&lt;h3 id=&#34;遥控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遥控&#34;&gt;#&lt;/a&gt; 遥控&lt;/h3&gt;
&lt;p&gt;平替：小爱万能遥控板&lt;/p&gt;
&lt;p&gt;按键板控制&lt;/p&gt;
</content>
        <updated>2022-12-22T08:23:00.000Z</updated>
    </entry>
</feed>
