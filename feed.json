{
    "version": "https://jsonfeed.org/version/1",
    "title": "一位Blog",
    "subtitle": "bit =>byte KB MB GB TB ... 积跬步而行千里",
    "icon": "http://adamshang2333.github.io/images/favicon.ico",
    "description": "<div style='font-size: 0.8em;'> I.is(null); <br/>If(U.appear()) <br/>I.turn(new World('Fill With Love')) <br/>// 我的世界 <br/>// 直至遇见你 <br/>// 才熠熠生辉 </div> ",
    "home_page_url": "http://adamshang2333.github.io",
    "items": [
        {
            "id": "http://adamshang2333.github.io/hou-duan/zhong-jian-jian/redis/",
            "url": "http://adamshang2333.github.io/hou-duan/zhong-jian-jian/redis/",
            "title": "redis基础",
            "date_published": "2023-03-08T11:32:51.116Z",
            "content_html": "<h2 id=\"一-redis特性\"><a class=\"anchor\" href=\"#一-redis特性\">#</a> 一. Redis 特性</h2>\n<ol>\n<li>\n<p>速度快</p>\n<p>基于内存，C 语言实现，单线程架构，集性能和优雅于一身的代码</p>\n</li>\n<li>\n<p>基于键值对的数据结构服务器</p>\n<p>REmote DIctionary Server. 值可以是字符串 / 哈希 / 列表 / 集合 / 有序集合，Bitmap 等等</p>\n</li>\n<li>\n<p>丰富的功能</p>\n<p>键过期功能。发布 - 订阅功能 (实现消息系统), Lua 脚本，简单的事务，流水线 (Pipeline)</p>\n</li>\n<li>\n<p>简单稳定</p>\n<p>代码少，早期版本 2 万行. 3.0 版本以后加入集群功能，5 万行。单线程模型</p>\n</li>\n<li>\n<p>客户端语言多</p>\n</li>\n<li>\n<p>持久化</p>\n<p>(RDB 和 AOF 方式) 存放到硬盘中</p>\n</li>\n<li>\n<p>主从复制</p>\n</li>\n<li>\n<p>高可用和分布式</p>\n</li>\n</ol>\n<h2 id=\"二-redis使用场景\"><a class=\"anchor\" href=\"#二-redis使用场景\">#</a> 二. Redis 使用场景</h2>\n<ol>\n<li>\n<p>缓存 /session</p>\n</li>\n<li>\n<p>排行榜系统</p>\n</li>\n<li>\n<p>计数器应用</p>\n<p>视频的播放 / 浏览次数。并发量太大，对传统数据库挑战较大</p>\n</li>\n<li>\n<p>社交网络</p>\n<p>赞 / 踩，粉丝，共同好友 / 喜好等等杂的数据</p>\n</li>\n<li>\n<p>消息队列系统</p>\n<p>主要用于业务解耦</p>\n</li>\n</ol>\n<h2 id=\"三-redis安装\"><a class=\"anchor\" href=\"#三-redis安装\">#</a> 三. Redis 安装</h2>\n<p>使用 docker 安装 redis</p>\n<h2 id=\"四-redis-shell\"><a class=\"anchor\" href=\"#四-redis-shell\">#</a> 四. Redis Shell</h2>\n<ol>\n<li>\n<p>redis-server 启动 Redis</p>\n<p>默认端口 6379, 使用 <code>--port xxx</code>  指定端口号<br />\n指定配置文件</p>\n</li>\n<li>\n<p>redis-cli 命令行接口</p>\n</li>\n</ol>\n<h2 id=\"五-redis使用\"><a class=\"anchor\" href=\"#五-redis使用\">#</a> 五. Redis 使用</h2>\n<h3 id=\"1-全局命令\"><a class=\"anchor\" href=\"#1-全局命令\">#</a> 1. 全局命令</h3>\n<p>keys *</p>\n<p>dbsize</p>\n<p>exists key</p>\n<p>del key</p>\n<p>expire key seconds</p>\n<p>type key</p>\n<h3 id=\"2-数据结构和内部编码\"><a class=\"anchor\" href=\"#2-数据结构和内部编码\">#</a> 2. 数据结构和内部编码</h3>\n<h4 id=\"21-数据结构\"><a class=\"anchor\" href=\"#21-数据结构\">#</a> 2.1 数据结构</h4>\n<ol>\n<li>\n<p>string 字符串</p>\n<p>key 都是字符串类型，而且其他几种数据结构都是在字符串类型基础上构建的.</p>\n<p>字符串类型的值实际上可以是简单或复杂的字符串 (JSON/XML), 数字，甚至是二进制 (图片，音频，视频，最大 512M)</p>\n<p>mset, 批量设置值，可以提高开发效率<br />\n mget, 批量获取值</p>\n<p>计数，<br />\nincr key, ++<br />\ndecr key, --<br />\nincrby key xx,<br />\ndecrby key xx</p>\n<p>开发中合理的 key 名，业务名：对象名🆔属性</p>\n</li>\n<li>\n<p>hash 哈希</p>\n<p>hset key field value<br />\nhget key field<br />\nhdel key field<br />\nhlen key<br />\nhmget key field<br />\nhmset key field value<br />\nhexists key field<br />\nhkeys key<br />\nhvals key<br />\nhgetall key</p>\n</li>\n<li>\n<p>list 列表</p>\n<p>存储多个有序的字符串<br />\n rpush key value ... 右边插入元素<br />\n lpush key value ... 左边<br />\n lrange key start end<br />\nlpop key 左侧 pop<br />\nlrem key count value</p>\n</li>\n<li>\n<p>set 集合</p>\n<p>不允许有重复元素.</p>\n<p>同时处理多个集合的交集 / 并集 / 差集</p>\n<p>sadd key element ...<br />\nexists key<br />\nsrem key element ... 删除元素<br />\n scard key 元素个数<br />\n sismember key element 判断是否在集合中<br />\n smembers key 所有元素</p>\n</li>\n<li>\n<p>zset 有序集合</p>\n<p>zadd key score member [score member...]<br />\nzcard key<br />\nzscore key member<br />\nzrem key member<br />\nzincrby key score member<br />\nzrevrange key start end</p>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/zhong-jian-jian/mybatis/",
            "url": "http://adamshang2333.github.io/hou-duan/zhong-jian-jian/mybatis/",
            "title": "Mybatis",
            "date_published": "2023-03-08T11:32:51.108Z",
            "content_html": "<p>[toc]</p>\n<h2 id=\"重要组成部分\"><a class=\"anchor\" href=\"#重要组成部分\">#</a> 重要组成部分</h2>\n<ul>\n<li>\n<p>SqlSessionFactory</p>\n</li>\n<li>\n<p>SqlSession</p>\n</li>\n<li>\n<p>configuration</p>\n</li>\n</ul>\n<h3 id=\"sqlsessionfactory\"><a class=\"anchor\" href=\"#sqlsessionfactory\">#</a> SqlSessionFactory</h3>\n<blockquote>\n<ol>\n<li>是用来创建 SqlSession 对象的 ，而 SqlSession 用来操作数据库的</li>\n<li><strong>SqlSessionFactory 是线程安全的</strong>，它一旦被创建，应该在应用执行期间都存在。在应用运行期间不要重复创建多次，建议使用单例模式。</li>\n<li>SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的 Configuration 的实例构建出 SqlSessionFactory 的实例.</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义配置文件的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"org/mybatis/example/mybatis-config.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 通过 Mybatis 中的工具类 Resources 获取一个流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 实例化一个 SqlSessionFactory</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sqlsession\"><a class=\"anchor\" href=\"#sqlsession\">#</a> SqlSession</h3>\n<blockquote>\n<p>Mybatis 中的核心<br />\n Mybatis 工作最重要的  java 接口，通过这个接口来执行命令，获取 mapper 以及管理事务<br />\n sqlSession，顾名思义，就是 sql 的一个会话，<br />\n<strong>在这个会话中发生的事不影响别的会话，如果会话提交，则生效，不提交不生效</strong>。<br />\n　  　---&gt; 即: <mark><strong>如果在事务里，则 Spring 给你的 sqlSession 是一个；<br />\n　　　　否则，每一个 sql 给你一个新的 sqlSession , 且每次都会提交</strong></mark></p>\n</blockquote>\n<h3 id=\"configuration\"><a class=\"anchor\" href=\"#configuration\">#</a> configuration</h3>\n<blockquote>\n<p>用来设置 Mybatis 的各项，配置文件包含了会深深影响 MyBatis 行为的设置和属性信息<br />\n其中，envirments -- datasources &amp; transactionManager ; mappers 都是最基础和重要的</p>\n<pre><code>配置文档的层级结构:\n configuration（配置）\n</code></pre>\n</blockquote>\n<pre><code>properties（属性）\nsettings（设置 !!）\ntypeAliases（类型别名 !）\ntypeHandlers（类型处理器 !）\nobjectFactory（对象工厂）\nplugins（插件）\nenvironments（环境配置 !!!)\n   environment（环境变量）\n      transactionManager（事务管理器）\n      dataSource（数据源）\ndatabaseIdProvider（数据库厂商标识）\nmappers（映射器 !!!）\n</code></pre>\n<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p><strong>配置文件实例</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 选择 mybatis 的运行环境 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在该标签下可以创建多个配置，例如开发环境 (localhost) 和生产环境 (部署后)--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 选择事务管理器，默认使用 JDBC 的事务管理器 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">&lt;!-- 配置数据源，实际上就是数据库连接池 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">&lt;!--mappers 元素则是包含一组映射器（mapper），</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。--></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 映射器的作用就是将 xml 中的文件和命名空间中对应的接口类做映射  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  生成相应的接口实现类 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BookMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CategoryMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"mybatis-xml配置-environmentsmapperdatasourcesetting\"><a class=\"anchor\" href=\"#mybatis-xml配置-environmentsmapperdatasourcesetting\">#</a> Mybatis XML 配置  (environments&amp;mapper&amp;datasource&amp;setting)</h2>\n<blockquote>\n<p><strong>注意！！</strong>:<br />\n 在 Mybatis 的  <code>&lt;configuration&gt; </code>  中配置的其他子标签是有顺序的<br />\n　即: setting --&gt; typeAliases --&gt; typeHandlers --&gt; environments --&gt; mappers<br />\n<mark> 如果不按照顺序，那么会报错 无法创建 SessionFactory</mark></p>\n</blockquote>\n<h3 id=\"setting-配置\"><a class=\"anchor\" href=\"#setting-配置\">#</a> Setting 配置</h3>\n<p>setting 是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p>\n<h4 id=\"setting-常用配置表格\"><a class=\"anchor\" href=\"#setting-常用配置表格\">#</a> Setting 常用配置表格</h4>\n<p>以下是部分设置，标记高亮的是常用设置:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">设置名</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">有效值</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cacheEnabled</td>\n<td style=\"text-align:left\">全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。</td>\n<td style=\"text-align:left\">true / false</td>\n<td style=\"text-align:left\">true</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lazyLoadingEnabled</td>\n<td style=\"text-align:left\">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td>\n<td style=\"text-align:left\">true / false</td>\n<td style=\"text-align:left\">false</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><mark>useGeneratedKeys</mark></strong></td>\n<td style=\"text-align:left\">允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）</td>\n<td style=\"text-align:left\">true / false</td>\n<td style=\"text-align:left\">False</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">autoMappingBehavior</td>\n<td style=\"text-align:left\">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。</td>\n<td style=\"text-align:left\">NONE, PARTIAL, FULL</td>\n<td style=\"text-align:left\">PARTIAL</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">defaultStatementTimeout</td>\n<td style=\"text-align:left\">设置超时时间，它决定驱动等待数据库响应的秒数。</td>\n<td style=\"text-align:left\">任意正整数</td>\n<td style=\"text-align:left\">未设置 (null)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong><mark>mapUnderscoreToCamelCase</mark></strong></td>\n<td style=\"text-align:left\">是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射</td>\n<td style=\"text-align:left\">true / false</td>\n<td style=\"text-align:left\">False</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><mark><strong>logImpl</strong></mark></td>\n<td style=\"text-align:left\">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>\n<td style=\"text-align:left\">SLF4J  / LOG4J/LOG4J2 / JDK_LOGGING / COMMONS_LOGGING / STDOUT_LOGGING / NO_LOGGING</td>\n<td style=\"text-align:left\">未设置</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvY29uZmlndXJhdGlvbi5odG1sI3NldHRpbmdz\">完整的 setting 设置链接</span></p>\n<p><strong>setting 的 Demo</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 开启 Mybatis 缓存 (默认开启一级缓存)--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        一级缓存：同一个 sqlSession 才会从缓存中获取数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        二级缓存：不同的 sqlSession 也会从缓存中获取数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cacheEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 开启下划线形式的列名与小驼峰形式的属性名自动映射；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        和在 mapper.xml 中设置 resultMap 属性 autoMapping = true 效果一样 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapUnderscoreToCamelCase<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG4J<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"mybatis数据库缓存\"><a class=\"anchor\" href=\"#mybatis数据库缓存\">#</a> Mybatis 数据库缓存</h4>\n<p><strong>关于 Mybatis 数据库的缓存</strong><br />\n缓存的目的 :<br />\n 避免频繁的与数据库进行交互，尤其是在查询越多、缓存命中率越高的情况下， 使用缓存对性能的提高更明显</p>\n<p>mybatis 也提供了对缓存的支持， 分为一级缓存和二级缓存。<br />\n在默认的情况下， Mybatis 开启一级缓存 (SQLSession 缓存)<br />\n<strong> 一级缓存是对同一个 SqlSession 而言的，二级缓存对不同的 SqlSession 而言。</strong></p>\n<p>一级缓存 (SqlSession 级别):</p>\n<blockquote>\n<p>1   <strong>同一个 SqlSession 对象</strong>，调用同一个 <code>&lt;select&gt;</code>  标签，只有第一次执行 SQL 语句，<br />\n　　第一次的查询结果会缓存到 SQLSession 的缓存区 (内存) 中<br />\n　　---&gt; 所以被查询的实体类要实现序列化的接口以便缓存<br />\n　　<strong>有效范围：同一个 sqlSession 对象</strong><br />\n 2   缓存的是 Statement 对象 (一个 <code>&lt;select&gt;</code>  对应一个 statement )<br />\n　　<strong>也就是说，即使 SQL 语句一样 有可能也不会走缓存，只看  <code>&lt;select&gt;</code>  标签的 id 值</strong></p>\n</blockquote>\n<p>二级缓存 (SqlSessionFactory 级别):</p>\n<blockquote>\n<p>1  二级缓存和一级缓存使用的是不同的内存空间，<br />\n　<mark>只有在 SQLSession.commit () 或者 sqlSession.close () 的时候，<br />\n　才会从一级缓存放入二级缓存中</mark><br />\n　有效范围：同一个 SqlSessionFactory 中的任一 sqlSession 对象<br />\n 2  当数据频繁被使用，很少被修改的时候，适合开启二级缓存，<mark><strong> 频繁修改一定不要开二级！！</strong></mark><br />\n　数据被修改的时候，缓存在内存中的数据没有及时同步，会产生 &quot;落后&quot; 的<strong>脏数据</strong><br />\n　那么再次查询时，读取缓存中的数据与数据库中的就会不一致</p>\n</blockquote>\n<p><strong>开启二级缓存的方式</strong></p>\n<ol>\n<li>在 xxxmapper.xml 中添加 <code>&lt;cache readOnly = &quot;true&quot;/&gt;</code></li>\n<li>在 xxxmapper.xml 中添加 <code>&lt;cache/&gt;</code>  ; 并且结果集对应实体类实现序列化接口</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">eviction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FIFO<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">&lt;!--回收策略为先进先出--</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flushInterval=\"60000\" <span class=\"token comment\">&lt;!-- 自动刷新时间 60s--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>size=\"512\" <span class=\"token comment\">&lt;!-- 最多缓存 512 个引用对象 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>readOnly=\"true\"/> <span class=\"token comment\">&lt;!-- 只读 --></span></pre></td></tr></table></figure><h3 id=\"typealiases-别名配置\"><a class=\"anchor\" href=\"#typealiases-别名配置\">#</a> typeAliases (别名) 配置</h3>\n<blockquote>\n<p>为 Java 类型设置一个短的名字。<br />\n它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余</p>\n</blockquote>\n<p>常用的有两种配置方式:<br />\n1 精确的指定别名<br />\n 2 扫描指定包下的所有 bean</p>\n<blockquote>\n<p>在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名；<br />\n 若有注解，则别名为其 javaBean 类上的注解值 (@Alias (&quot;author&quot;) )</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">&lt;!--xml 映射文件中，将类起一个别名 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 为某个包下的所有类都自动设置别名，Mybatis 可以正确的识别出来</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        默认的别名为类名，与大小写无关</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        可以两种混用 但是 typeAlias 需要写在 package 前面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 方式一 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Book<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Permission<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>permission<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Category<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>category<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 方式二 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"typehandlers类型处理器配置\"><a class=\"anchor\" href=\"#typehandlers类型处理器配置\">#</a> typeHandlers (类型处理器) 配置</h3>\n<p>typeHandler 一般在两个地方会用到:</p>\n<ol>\n<li>由 java 向 DB 传入参数时 (java 类型 --&gt;JDBC 类型 )</li>\n<li>将结果集中的 JDBC 数据类型转换成 java 中的对应类型</li>\n</ol>\n<blockquote>\n<p><strong>实例</strong>   设置一个 Money 类的 typeHandler<br />\njava bean</p>\n<pre><code class=\"language-java\"></code></pre>\n</blockquote>\n<p>public class Product &#123;<br />\nprivate Integer id;<br />\nprivate String name;<br />\nprivate String currencyUnit;<br />\nprivate Money money;<br />\n&#125;<br />\npublic class Money &#123;<br />\nprivate long value;<br />\n&#125;</p>\n<pre><code>&gt;mapper.xml\n&gt;```xml\n&gt;&lt;!--设置好Money类的typeHandler后,可以直接以#&#123;money&#125;的方式传入参数--&gt;\n&gt;&lt;!--没设置的话,只能以#&#123;money.value&#125;的方式传入--&gt;\n&gt;&lt;insert id=&quot;add&quot;&gt;\n        insert into tb_product \n          values (null,#&#123;name&#125;,#&#123;currencyUnit&#125;,#&#123;money&#125;)\n&lt;/insert&gt;\n&gt;```\n&gt;mybatis-config.xml  \n&gt;&gt;在配置mybatis的xml中设置typeHandler   \n&gt;**注意, 和 typeAliases一样 , package要在 typeHanlder后面**\n&gt;\n&gt;```xml\n&gt;&lt;typeHandlers&gt;\n        &lt;typeHandler handler=&quot;com.lanou.demo.handler.JodaMoneyTypeHandler&quot;/&gt;\n        &lt;!--和配置typeAliases一样,也可以直接扫描包--&gt;\n        &lt;package name=&quot;com.lanou.demo.handler&quot;/&gt;\n&lt;/typeHandlers&gt;\n&gt;```\n&gt;MoneyTypeHandler\n&gt;&gt;继承BaseTypeHandler,重写其中的setxxx和getxxx的方法  \n&gt;&gt;两种方法就是在对应向DB传入参数和取出参数\n&gt;\n&gt;```java\n/**\n * 继承BaseTypeHandler (TypeHandler的一个子类)\n * 所填入的泛型,是要处理的类型(java中哪个类型的变量 要对应jdbc中的数据类型)\n */\npublic class MoneyTypeHandler extends BaseTypeHandler &lt;Money&gt;&#123;\n    /**\n     * 设置传入参数时, java中数据类型与jdbc中数据类型的对应关系\n     * JDBJ中设置传入参数的方法:\n     * prepareStatement ps = conn.getPrepareStatement(&quot;insert into xxx values (null,?,?)&quot;)\n     * ps.setString(1,aaa);\n     * ps.setLong(2,bbb);\n     * ****************************************\n     * @param ps prepareStatement sql语句编译预处理对象\n     * @param i 要处理的参数是传入的第几个\n     * @param parameter 要交给类型处理器处理的属性参数\n     * @param jdbcType 对应的jdbc类型\n     * @throws SQLException\n     * 设置好后, 在mapper.xml中使用参数 不用按照#&#123;price.value&#125;的形式来使用参数 可以直接#&#123;price&#125;了\n     */\n    @Override\n    public void setNonNullParameter(PreparedStatement ps, int i, Money parameter, JdbcType jdbcType) throws SQLException &#123;\n        ps.setLong(i,parameter.getValue());\n    &#125;\n    /**\n     * @param columnName 列名(方法中指定了泛型Money的列)\n     * @return 返回对应处理的java类型\n     */\n    @Override\n    public Money getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;\n        long value = rs.getLong(columnName);\n        Money money = new Money();\n        money.setValue(value);\n        return money;\n    &#125;\n    /**\n     * @param columnIndex 第几列(方法中指定了泛型Money的列)\n     * @return 返回对应处理的java类型\n     */\n    @Override\n    public Money getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;\n        long value = rs.getLong(columnIndex);\n        Money money = new Money();\n        money.setValue(value);\n        return money;\n    &#125;\n    /**\n     * 在存储过程中使用,与上面的用法基本一致\n     * @param cs 可以看做prepareStatement来使用\n     * @param columnIndex 第几列\n     * @return\n     */\n    @Override\n    public Money getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;\n        long value = cs.getLong(columnIndex);\n        Money money = new Money();\n        money.setValue(value);\n        return money;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"environments环境配置\"><a class=\"anchor\" href=\"#environments环境配置\">#</a> environments (环境) 配置</h3>\n<blockquote>\n<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。<br />\n例如，开发、测试和生产环境需要有不同的配置；<br />\n或者想在具有相同 Schema 的多个生产数据库中 使用相同的 SQL 映射。<br />\n<strong><mark>不过：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</mark></strong></p>\n</blockquote>\n<p>指定加载环境 :</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//.build 方法可以接收一个环境参数，如果忽略了环境参数，那么加载 xml 的默认环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>xml 中配置加载环境:</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 选择事务管理器，默认使用 JDBC 的事务管理器 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token comment\">&lt;!-- 配置数据源，实际上就是数据库连接池 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/db_1021<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 生产环境的配置 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prop<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注意这里的关键点:</p>\n</blockquote>\n<ol>\n<li>默认使用的环境 ID（比如：default=&quot;development&quot;）。<br />\n<strong>至少要有一个  <code>&lt;environment&gt;</code>  的 id 值与  <code>&lt;environments&gt;</code>  的 default 值匹配</strong></li>\n<li>每个 environment 元素定义的环境 ID（比如：id=&quot;development&quot;）。</li>\n<li>事务管理器的配置（比如：type=&quot;JDBC&quot;）。</li>\n<li>数据源的配置（比如：type=&quot;POOLED&quot;）。</li>\n</ol>\n<p>===</p>\n<p><strong>transactionManager (事务管理器)</strong></p>\n<blockquote>\n<p>MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）<br />\nJDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。<br />\nMANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接</p>\n</blockquote>\n<blockquote>\n<p><code>提示:</code> <br />\n<em><strong> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，<br />\n　因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</strong></em></p>\n</blockquote>\n<p><strong>dataSource type (数据源类型)</strong></p>\n<blockquote>\n<p>许多 MyBatis 的应用程序会按示例中的例子来配置数据源。<br />\n虽然这是可选的，但为了使用延迟加载，数据源是必须配置的.</p>\n</blockquote>\n<p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p>\n<ul>\n<li><strong>UNPOOLED</strong></li>\n</ul>\n<blockquote>\n<p>这个数据源的实现只是每次被请求时打开和关闭连接。<br />\n虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。<br />\n不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形</p>\n</blockquote>\n<ul>\n<li>\n<p>配置属性 :<br />\ndriver – 这是 JDBC 驱动的 Java 类的完全限定名<br />\n（并不是 JDBC 驱动中可能包含的数据源类）。<br />\nurl – 这是数据库的 JDBC URL 地址。<br />\nusername – 登录数据库的用户名。<br />\npassword – 登录数据库的密码。</p>\n</li>\n<li>\n<p><strong>POOLED</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>这种数据源的实现利用 “池” 的概念将 JDBC 连接对象组织起来，<br />\n避免了创建新的连接实例时所必需的初始化和认证时间。<br />\n这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p>\n</blockquote>\n<ul>\n<li><strong>JNDI</strong></li>\n</ul>\n<blockquote>\n<p>这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，<br />\n容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。<br />\n这种数据源配置只需要两个属性 : initial_context , data_source</p>\n</blockquote>\n<p><strong>mappers (映射器)</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 根据接口类来找同名的 xml 文件 (xml 文件和接口类要放在同一个包下面才会生效！！)--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 在 resources 中 建立多级目录的时候，需要使用 / 而不是 \".\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         ==> \".\" 创建的文件夹只有一个，名字是 com.lanou.demo --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;mapper class=\"com.lanou.demo.mapper.BookMapper\"/>--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;mapper resource=\"BookMapper.xml\"/>--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;mapper resource=\"CategoryMapper.xml\"/>--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;mapper resource=\"UserMapper.xml\"/>--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 扫描包下面的所有 xml 映射文件 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.demo.mapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"xml映射xxxmapperxml\"><a class=\"anchor\" href=\"#xml映射xxxmapperxml\">#</a> XML 映射 (XXXMapper.xml)</h2>\n<p>最常见和使用的就是 xml 形式的结果集映射，也可以做注解形式的配置<br />\n但是 sql 语句过长和复杂的时候，代码的可读性会下降</p>\n<ul>\n<li>注解形式，在方法上面使用 @select/@insert 注解就行，value 值填入 sql 语句</li>\n<li>XML 形式，使用 select /insert/update /delete/resultMap 标签来完成映射</li>\n</ul>\n<p><strong>xml 映射文件结构</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- 一个接口类对应一个 mapper--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 具体对应哪个接口类的实现，通过 namespace 来指明 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.demo.mapper.BookMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!--select 是最常用的标签，resultType 和 resultMap 是做结果集映射的 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    id: 与接口类的方法名一致；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    resultType: 指明结果集映射的实体对象</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    resultMap: 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       ...</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findWithCategory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findWithCategory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findWithCategory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      ...</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>del<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       ...</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       ...</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>xml 映射文件中的配置</strong></p>\n<ul>\n<li>主键返回 (insert 和 update)</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--  useGeneratedKeys 是否使用生成的主键；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      keyColumn 主键在表中的列名；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      keyProperty 主键在属性中对应的属性名 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在方法中调用 addOne 方法之后，会将传入的参数重新赋值 把自增的主键补全 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">useGeneratedKeys</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token attr-name\">keyColumn</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyProperty</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        insert into tb_book (name, id, author,category_id)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        values (#&#123;name&#125;, null, #&#123;author&#125;,#&#123;categoryId&#125;)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>缓存刷新 (使用默认值即可，不用配置)</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--flushCache=\"true\" 增删改中默认为 true 查询默认为 false ;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    设置为 true , 会在增删改的时候 清空所有的缓存内容 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>update<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">flushCache</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        update tb_book</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        set name   = #&#123;name&#125;,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            author = #&#123;author&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        where id = #&#123;id&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><hr />\n<p><strong>复杂结果映射</strong><br />\n常见的结果映射可能会出现非基本数据类型，<br />\n 比如会有某个属性是引用的其他类:   <code>private Address address;</code> <br />\n 或者某个属性是一个集合 (具有泛型):  <code>private List&lt;Role&gt; roles;</code></p>\n<p>结果集要映射的实体类:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 引用类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 引用的集合类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Role</span><span class=\"token punctuation\">></span></span> roles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种时候，需要使用  <code>&lt;resultMap&gt;</code>  来做高级映射 :<br />\n 对于一对一或者一对多，使用  <code>&lt;association&gt;</code> <br />\n 对于多对多，使用  <code>&lt;collection&gt;</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findOneDetailsWithAddress<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>association</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Address<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>address<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>association</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roles<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rcode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>code<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>permissions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Permission<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>purl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"动态sql\"><a class=\"anchor\" href=\"#动态sql\">#</a> 动态 SQL</h2>\n<p>实例 :</p>\n<pre><code>// 根据条件进行动态查询\n    // 可以根据书名/作者来进行查询, 条件的数量是不确定的\n\n    /**\n     * 无条件时: select * from tb_book\n     * 有书名时: select * from tb_book where name like %书名%;\n     * 有作者时: select * from tb_book where author like %作者%;\n     * 有书名和作者时: select * from tb_book\n                      where name like %作者% and author like %作者%;\n     */\n    List&lt;Book&gt; findByCondition(Book book);\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findByCondition<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.lanou.pojo.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        select * from tb_book</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 如果里面有标签，拼接上 where--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 接口方法参数对象中的属性名 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 直接传入的直接写属性，引用类型的属性用 A.B 的方法写属性名 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name != null and name.trim().length()>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                name like concat ('%',#&#123;name&#125;,'%')</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                and author like #&#123;author&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"where-标签\"><a class=\"anchor\" href=\"#where-标签\">#</a>  <code>&lt;where&gt;</code>  标签</h4>\n<p>自动去除第一个 and , 如果 where 内没有内容 自身会被清除</p>\n<h4 id=\"if-标签\"><a class=\"anchor\" href=\"#if-标签\">#</a>  <code>&lt;if&gt;</code>  标签</h4>\n<p>做判断用，符合条件的才会执行  <code>&lt;if&gt; &lt;/if&gt;</code>  中包裹的 sql 语句<br />\n<mark><strong>注意 :</strong></mark></p>\n<blockquote>\n<ol>\n<li>if 中的 test =&quot; &quot; 使用的是 OGNL 表达式进行的判断<br />\n　　----&gt; 可以直接写传入参数的 Key 或者传入对象的属性名 不需要添加任何特殊符号<br />\n　　即：不要像 mybatis 中那样，使用 #{ } 或者 $</li>\n<li>test 中要使用 <strong>and</strong> 和 <strong>or</strong>  , 不要使用 &amp;&amp; , ||</li>\n</ol>\n</blockquote>\n<h4 id=\"choose-when-otherwise标签\"><a class=\"anchor\" href=\"#choose-when-otherwise标签\">#</a>  <code> &lt;choose&gt;</code>  , <code>&lt;when&gt;</code>  ,  <code>&lt;otherwise&gt;</code>  标签</h4>\n<p>只要有一个标签中的内容成立，下面其他的 sql 语句都不会被执行</p>\n<pre><code>&lt;choose&gt;\n    &lt;where test = &quot; &quot;&gt;\n    &lt;/where&gt;\n    &lt;where test = &quot; &quot;&gt;\n    &lt;/where&gt;\n&lt;/choose&gt;\n</code></pre>\n<h4 id=\"set标签\"><a class=\"anchor\" href=\"#set标签\">#</a>  <code>&lt;set&gt;</code>  标签</h4>\n<p>常常用在修改中<br />\n作用：去掉最后一个 &quot;,&quot; 如果 set 中没有内容 自身会被清除<br />\n<mark><strong>注意 :</strong></mark></p>\n<blockquote>\n<ol>\n<li>set 标签在进行修改的时候，<br />\n<strong> 如果里面包含的内容为空 sql 语法会不合规 导致报错</strong><br />\n<strong>修改中没有 set 从句，属于 sql 的语法错误！！</strong><br />\n　解决：set 中添加一个固定值，保证不为空 :</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>update user </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 添加一条绝对成立的条件，保证 sql 的正确 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  id = #&#123;id&#125;,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>pwd != null<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">and</span> <span class=\"token attr-name\">pwd</span> <span class=\"token attr-name\">!</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      pwd = #&#123;pwd&#125;,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>email != null<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">and</span> <span class=\"token attr-name\">email</span> <span class=\"token attr-name\">!</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      email = #&#123;email&#125;,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/spring/springmvc-lan-jie-qi-fang-fa-can-shu-jie-xi-qi/",
            "url": "http://adamshang2333.github.io/hou-duan/spring/springmvc-lan-jie-qi-fang-fa-can-shu-jie-xi-qi/",
            "title": "SpringMVC 拦截器&方法参数解析器",
            "date_published": "2023-03-08T11:32:50.960Z",
            "content_html": "<h2 id=\"springmvc-拦截器方法参数解析器\"><a class=\"anchor\" href=\"#springmvc-拦截器方法参数解析器\">#</a> SpringMVC 拦截器 &amp; 方法参数解析器</h2>\n<h3 id=\"拦截器\"><a class=\"anchor\" href=\"#拦截器\">#</a> 拦截器</h3>\n<blockquote>\n<p>拦截器是 SpringMVC 中的技术<br />\n　　　针对 Handler (处理器) 进行的拦截；<br />\n 过滤器是 Serlvet 中的技术<br />\n　　　针对 Request (请求) 进行拦截</p>\n</blockquote>\n<p><strong> <code>常见使用:实现HandlerInterceptor接口,重写preHandle 判断请求是否可以进入Handler</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    拦截器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    拦截器是对处理器 (Handler) 进行拦截</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 返回 true: 可以进入 Handler</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 返回 false: 不可以进入 Handler</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 该方法会在请求进入 Handler 之前执行，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 返回值表示请求是否会继续往下执行 可以做一些权限的拦截</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                              <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                              <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果是使用 ReqestMapping 注解形式创建的 handler,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 那么方法参数中 handler 对象的真正类型是: HandlerMethod</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 所以可以针对 @RequestMapping 类型的请求进行 Handler 的类型转换</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// HandlerMethod 对象可以拿到 controller 中的注解。参数等信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">HandlerMethod</span> hm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    在处理器 Handler 刚执行完毕之后，该方法会被调用</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    方法参数有: Handler 和 ModelAndView 对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                           <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                           <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                           <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    响应已经返回给用户之后，该方法会执行</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    用的很少，可能会做一些资源释放 / 日志打印等等</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方法参数解析器\"><a class=\"anchor\" href=\"#方法参数解析器\">#</a> 方法参数解析器</h3>\n<blockquote>\n<p>方法参数解析器的作用<br />\n就是在 Controller 中，能在接口方法传入的参数中设置任意的类<br />\n并且通过框架能直接在方法中调用传入的参数 (类).<br />\n 对传入参数映射到对应类型的过程 就需要方法参数解析器</p>\n</blockquote>\n<p><strong> <code>Step1 自定义一个注解,标识执行自定义方法参数解析器的实体类</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 一个简单的标记注解</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 只是标识一下哪个参数是要使用自定义的方法参数解析器来进行处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author OldFun</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2019-10-15 16:58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>PARAMETER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CurrentUser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>Step2 自定义方法参数解析的接口实现类</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CurrentUserMethodArgumentResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/*  数据校验和方法参数解析器都是</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        @requestMapping 中的方法扩展</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        是 SpringMVC 中的技术</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 用来确定该解析器能处理什么规则的方法参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 这个规则需要我们自己进行定义</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> methodParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 规则:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 1. 必须有 @Current 注解</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 2. 方法的参数类型必须是 User 类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 两个条件必须同时满足 (使用短路机制，提高运行效率)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> methodParameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CurrentUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">&amp;&amp;</span> methodParameter<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 表示如何为满足上面条件的对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @param methodParameter</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param modelAndViewContainer</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param nativeWebRequest</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param webDataBinderFactory</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @return 返回被赋值后的对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> methodParameter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                  <span class=\"token class-name\">ModelAndViewContainer</span> modelAndViewContainer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                  <span class=\"token class-name\">NativeWebRequest</span> nativeWebRequest<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                  <span class=\"token class-name\">WebDataBinderFactory</span> webDataBinderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 从 session 中取出当前登录用户，并且返回即可</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 先获取到当前的请求对象</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> nativeWebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNativeRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 如果不登录</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>Step3 在接口中,使用自定义注解标识使用自定义方法参数解析器的类</code> </strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book/add\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResoult</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@CurrentUser</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">,</span><span class=\"token string\">\"添加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/spring/spring-jdbc/",
            "url": "http://adamshang2333.github.io/hou-duan/spring/spring-jdbc/",
            "title": "Spring JDBC",
            "date_published": "2023-03-08T11:32:50.928Z",
            "content_html": "<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>是封装了 JDBC 操作的一个框架 必须依赖 Spring</p>\n<p>SpringJDBC 本身就是基于模板模式进行开发，提供一个 JDBCTemplate 类</p>\n<h2 id=\"jdbc操作流程\"><a class=\"anchor\" href=\"#jdbc操作流程\">#</a> JDBC 操作流程</h2>\n<h3 id=\"1-加载驱动类\"><a class=\"anchor\" href=\"#1-加载驱动类\">#</a> 1  加载驱动类</h3>\n<p><code>原生jdbc: Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code></p>\n<blockquote>\n<p>被封装成了 DateSource , 放入了连接池</p>\n</blockquote>\n<h3 id=\"2-建立连接\"><a class=\"anchor\" href=\"#2-建立连接\">#</a> 2  建立连接</h3>\n<p><code>原生jdbc: Connection con = DriverManager.getConnection(&quot;jdbc:mysql:/&quot;)</code></p>\n<h3 id=\"3-创建语句集\"><a class=\"anchor\" href=\"#3-创建语句集\">#</a> 3  创建语句集</h3>\n<p><code>PreparedStatement pstm = con.prepareStatement(&quot;select ... &quot;)</code></p>\n<h3 id=\"4-执行语句集\"><a class=\"anchor\" href=\"#4-执行语句集\">#</a> 4  执行语句集</h3>\n<p><code>ResultSet rs = pstm.executeQuery()</code></p>\n<h3 id=\"5-获取结果集\"><a class=\"anchor\" href=\"#5-获取结果集\">#</a> 5  获取结果集</h3>\n<p><code>rs.get...</code></p>\n<blockquote>\n<p>被封装成了 ORM 过程 (Object Relation Mapping)</p>\n<p>思路：将 result 对象中的对象 使用反射转换到 javaBean 中</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/java-de-nei-bu-lei/",
            "url": "http://adamshang2333.github.io/hou-duan/java/java-de-nei-bu-lei/",
            "title": "java的内部类",
            "date_published": "2023-03-08T11:32:50.820Z",
            "content_html": "<h2 id=\"前言-类的成员\"><a class=\"anchor\" href=\"#前言-类的成员\">#</a> 前言 -- 类的成员</h2>\n<blockquote>\n<p>一个类的成员，包含如下内容:<br />\n 属性<br />\n方法<br />\n类<br />\n静态代码块</p>\n</blockquote>\n<p>内部类可以看做一个外部类的属性，<br />\n 在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。与之对应，包含内部类的类被称为外部类。<br />\n优势：内部类提供了更好的封装，可以把内部类隐藏在外部类之内，通过访问修饰符控制其他类对内部类的访问，更好的实现了信息隐藏<br />\n分类：成员内部类、静态内部类、方法内部类、匿名内部类</p>\n<h2 id=\"内部类的分类\"><a class=\"anchor\" href=\"#内部类的分类\">#</a> 内部类的分类</h2>\n<p>内部类可以分为:<br />\n<strong> 普通内部类</strong><br />\n<strong>静态内部类</strong><br />\n<strong>匿名内部类</strong><br />\n<strong>局部内部类</strong></p>\n<h2 id=\"普通内部类\"><a class=\"anchor\" href=\"#普通内部类\">#</a> 普通内部类</h2>\n<blockquote>\n<p><strong>特点 :</strong></p>\n<ol>\n<li>内部类可以直接访问外部类的成员；<br />\n　　如果出现同名属性或者方法，优先访问内部类中定义的  (默认存在 this)</li>\n<li>可以使用 <strong>外部类.this. 成员</strong> 的方式，访问外部类中同名的信息 (成员属性和成员方法)</li>\n<li>外部类访问内部类信息，需要通过内部类实例，无法直接访问</li>\n<li>一个外部类可以有多个内部类对象 (引用的内存地址不同)<br />\n　　<strong>注：当一个类还有内部类引用的时候，这个类不会被 JVM 回收</strong><br />\n　　　　　　可以类比为数据库的外键约束，有引用的情况下不能被删除</li>\n</ol>\n</blockquote>\n<p><strong>创建类示例 :</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> outer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 外部类的构造方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"外部类\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outer <span class=\"token operator\">=</span> <span class=\"token string\">\"我是大佬\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是外部类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是外部类,调用内部类方法:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 调用内部类的方法，需要 new 一个内部类对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>inter <span class=\"token operator\">=</span> \" <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 声明为内部类</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 内部类属性</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> inter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 内部类的构造方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"内部类\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inter <span class=\"token operator\">=</span> <span class=\"token string\">\"我是菜鸡\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是内部类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是内部类,调用外部类方法:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer = \"</span> <span class=\"token operator\">+</span> outer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>一个类可以创建多个内部类对象:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inter</span> inter <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inter</span> inter2 <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 输出: false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>inter<span class=\"token operator\">==</span>inter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"静态内部类\"><a class=\"anchor\" href=\"#静态内部类\">#</a> 静态内部类</h2>\n<blockquote>\n<p>我们知道，<strong> 一个类的静态成员独立于这个类的任何一个对象存在.</strong><br />\n 只要在具有访问权限的地方，<br />\n我们就可以通过 <mark><strong>类名。静态成员名</strong></mark> 的形式来访问这个静态成员，</p>\n</blockquote>\n<p>同样的，静态内部类也是作为一个外部类的静态成员而存在，<br />\n<strong> 创建一个类的静态内部类对象不需要依赖其外部类对象。</strong></p>\n<blockquote>\n<p>特点 :</p>\n<ol>\n<li>创建无需依赖外部类对象，通过类来创建即可</li>\n<li>只能访问外部类的静态成员变量</li>\n<li>外部类依然可以访问静态内部类对象的所有访问权限的成员</li>\n</ol>\n</blockquote>\n<p><strong>定义静态内部类:</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 外部类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 普通成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> outer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 静态成员变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> slogen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 静态内部类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticInter</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是静态内部类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getOuterFiled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Outer</span><span class=\"token punctuation\">.</span>slogen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// System.out.println(Outer.name);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/basics/java-ji-chu/",
            "url": "http://adamshang2333.github.io/hou-duan/java/basics/java-ji-chu/",
            "title": "IO基础",
            "date_published": "2023-03-08T11:32:41.652Z",
            "content_html": "<p><strong>IO 概念</strong></p>\n",
            "tags": [
                "java",
                "基础"
            ]
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/javaweb-ji-chu/",
            "url": "http://adamshang2333.github.io/hou-duan/java/javaweb-ji-chu/",
            "title": "JavaWeb基础",
            "date_published": "2023-03-08T11:32:40.764Z",
            "content_html": "<h2 id=\"应用组成结构\"><a class=\"anchor\" href=\"#应用组成结构\">#</a> 应用组成结构</h2>\n<p><img data-src=\"https://images0.cnblogs.com/i/289233/201405/172304056712920.png\" alt=\"组成\" /></p>\n<p><strong>注: !!! 在 JavaWeb 中，没有明显的主函数</strong></p>\n<p><strong>WEB-INF</strong> 　－－＞&quot;安全区&quot; 后端判断有无权限获取该文件夹下的内容</p>\n<blockquote>\n<p>WEB-INF 文件夹 是一个对前端隐藏的文件夹<br />\n即，前端没法通过访问 WEB-INF 路径访问里面的内容 --&gt;<br />\n 如果必须要访问，只能通过后台代码转发.</p>\n</blockquote>\n<p><strong>web.xml</strong>　－－＞配置文件设置</p>\n<blockquote>\n<p>在 javaWeb 程序启动时，最早加载的配置文件</p>\n</blockquote>\n<h2 id=\"webxml\"><a class=\"anchor\" href=\"#webxml\">#</a> web.xml</h2>\n<p>.xml 代码示例 :</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;\n         version=&quot;4.0&quot;&gt;\n      \n     // 配置servlet    \n     // Step 1 : servlet的本地设置\n    &lt;servlet&gt;\n        // 给每个servlet起别名(外号)\n        &lt;servlet-name&gt;mservlet&lt;/servlet-name&gt;  //*关联,须一致*\n        // 指定servlet的类(Java类 关联)\n        &lt;servlet-class&gt;com.oldFun.controller.MainServlet&lt;/servlet-class&gt;\n    &lt;/servlet&gt;\n    //  Step 2 : 创建和服务器的映射\n    &lt;servlet-mapping&gt;\n        // 和本地的&quot;外号&quot;关联\n        &lt;servlet-name&gt;mservlet&lt;/servlet-name&gt;  //*关联,须一致*\n        // 指定访问的地址(起一个名字,别忘了&quot;/&quot;!!!)\n        &lt;url-pattern&gt;/main&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n    \n    &lt;servlet&gt;\n        // 起名字(外号)\n        &lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;\n        // 指定servlet的类\n        &lt;servlet-class&gt;com.oldFun.controller.HelloServlet&lt;/servlet-class&gt;\n    &lt;/servlet&gt;\n    // 映射\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;helloServlet&lt;/servlet-name&gt;\n        // 指定地址\n        &lt;url-pattern&gt;/suibian&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;\n</code></pre>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<p><code>背景 </code></p>\n<blockquote>\n<p>sun 公司提供的一门用于开发动态 web 资源的技术<br />\n Sun 公司在其 API 中提供了一个 servlet 接口，</p>\n</blockquote>\n<p><code>实现</code></p>\n<blockquote>\n<p>用户若想用发一个动态 web 资源 (即开发一个 Java 程序向浏览器输出数据)<br />\n 需要完成以下 2 个步骤：<br />\n　　<strong>1、编写一个 Java 类，实现 servlet 接口。<br />\n　　2、把开发好的 Java 类部署到 web 服务器中。</strong><br />\n　　　　按照一种约定俗成的称呼习惯，<strong>通常也把实现了 servlet 接口的 java 程序，称之为 Servlet</strong></p>\n</blockquote>\n<p><code>作用</code></p>\n<blockquote>\n<p>Servlet 接口就是处理网络请求的一套规范，<br />\n负责连接 web 服务器（如 tomcat 服务器)，存取数据<br />\n交互式的生成动态的 web 内容</p>\n</blockquote>\n<p><code>小结</code></p>\n<blockquote>\n<p>Servlet : JavaWeb 负责处理所有请求的类<br />\n每一个请求，对应一个 servlet 对象；每一个 servlet 类 只有一个对象 (单例设计模式)<br />\n－－＞ <strong>每一个请求，对应一个 Servlet 类</strong></p>\n</blockquote>\n<h3 id=\"servlet实现方式\"><a class=\"anchor\" href=\"#servlet实现方式\">#</a> Servlet 实现方式</h3>\n<h4 id=\"1-通过接口实现-需要实现所有的方法\"><a class=\"anchor\" href=\"#1-通过接口实现-需要实现所有的方法\">#</a> 1.    通过接口实现 －－＞ 需要实现所有的方法！！！</h4>\n<p>​\t <code>常用重要方法</code> <br />\n​</p>\n<pre><code>&gt;init 方法 : 初始化方法,只执行一次(创建servlet对象的时候执行.)  \n　     作用：做一些设置和初始化工作    \n&gt;\n&gt;service 方法 : 会被执行多次  \n　     作用：负责每次请求要显示的内容    \n&gt;\n&gt;destroy 方法 : 当servlet对象被销毁时执行 (服务器停止运行时, 对象被销毁)  \n　     作用：做一些资源释放的操作 \n</code></pre>\n<p>实例:</p>\n<pre><code>//** implements 来实现:\npublic class HelloServlet implements Servlet &#123;\n\n    /**\n     * 该方法是servlet对象的初始化方法, 只会执行一次\n     * 在创建servlet对象的时候执行.\n     * 作用: 做一些设置和初始化工作\n     * @param servletConfig\n     * @throws ServletException\n     */\n    @Override\n    public void init(ServletConfig servletConfig) throws ServletException &#123;\n        System.out.println(&quot;HelloServlet初始化&quot;);\n    &#125;\n\n    @Override\n    public ServletConfig getServletConfig() &#123;\n        return null;\n    &#125;\n\n    /**\n     * 这个方法会被执行多次,负责每次请求要显示的内容\n     * @param servletRequest  请求\n     * @param servletResponse 响应\n     * @throws ServletException\n     * @throws IOException\n     */\n    @Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;\n        System.out.println(&quot;service方法执行&quot;);\n    &#125;\n\n    @Override\n    public String getServletInfo() &#123;\n        return null;\n    &#125;\n\n    /**\n     * 当servlet对象被销毁时执行该方法\n     * 服务器停止运行时, 对象被销毁\n     * 做一些资源释放的操作\n     */\n    @Override\n    public void destroy() &#123;\n        System.out.println(&quot;helloServlet被销毁&quot;);\n    &#125;\n  &#125;\n</code></pre>\n<h4 id=\"2-通过继承实现-\"><a class=\"anchor\" href=\"#2-通过继承实现-\">#</a> 2.    通过继承实现  －－＞</h4>\n<blockquote>\n<p>继承来实现，设计模式上属于适配器模式<br />\n适用场景：接口过多，但是常用的方法很少<br />\n优点：不常用的方法</p>\n</blockquote>\n<p><code>继承父类: </code></p>\n<h4 id=\"21-继承genericservlet\"><a class=\"anchor\" href=\"#21-继承genericservlet\">#</a> 2.1 继承 GenericServlet</h4>\n<blockquote>\n<p>常用于重写 <strong>service</strong> 方法</p>\n</blockquote>\n<p>实例</p>\n<pre><code>public class MainServlet  extends GenericServlet &#123;\n\n    @Override\n    public void service (ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;\n        // 给页面显示一点内容\n        System.out.println(&quot;service方法&quot;);\n        // 开启一个字符流\n        PrintWriter writer = servletResponse.getWriter();\n        writer.println(&quot;&lt;h1&gt;hello servlet&lt;/h1&gt;&quot;);\n        // 关闭字符流\n        writer.close();\n</code></pre>\n<p><code>或者</code></p>\n<h4 id=\"22-继承httpservlet\"><a class=\"anchor\" href=\"#22-继承httpservlet\">#</a> 2.2 继承 HttpServlet</h4>\n<blockquote>\n<p>重写 <strong>doPost</strong>  <strong>doGet</strong> 方法</p>\n</blockquote>\n<p><code>继承HttpServlet更常用,使用时注意删除super.doGet ;  super.doGet</code></p>\n<p>实例</p>\n<pre><code>\n// @WebServlet -- 快速配置 不用在xml中再配置了\n// !!!!url 中的&quot;/&quot;要记得写,不然很多的请求中报错很难找\n// !!!url中的大小写有要求,会按照大小写区分\n@WebServlet(urlPatterns = &quot;/home&quot;)\npublic class IntroServlet  extends HttpServlet &#123;\n\n    @Override\n    protected void doGet(HttpServletRequest req,\n                         HttpServletResponse resp) throws ServletException, IOException &#123;\n         // super.doGet(req, resp);  必须删掉 不然会不支持这个请求\n                 \n         // 在头部文件指明发送给浏览器的内容以及格式\n         // resp设置响应头, 方便浏览器直接判断响应的内容\n        resp.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;);\n\n        ServletContext context = this.getServletContext();\n\n        // 读取context中的数据\n        Object name = context.getAttribute(&quot;name&quot;);\n        // 需要先访问存值的页面, 再访问取值的页面 才能取到context中的值\n        System.out.println(&quot;从context中读取的数据&quot;+name);\n        // 删除context保存的数据\n        context.removeAttribute(&quot;name&quot;);\n        System.out.println(&quot;删除context的数据&quot;);\n        PrintWriter pw = resp.getWriter();\n        pw.write(&quot;&lt;div&gt;第一个请求&lt;/div&gt;&quot;);\n        pw.close();\n    &#125;\n\n    @Override\n    protected void doPost(HttpServletRequest req,\n                          HttpServletResponse resp) throws ServletException, IOException &#123;\n          // 从父类继承过来的doPost方法需要删除\n          // ?? : 父类中默认不支持 doPost 和 dpGet\n//        super.doPost(req, resp);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"servlet的常用三大对象requset-session-servletcontext\"><a class=\"anchor\" href=\"#servlet的常用三大对象requset-session-servletcontext\">#</a> Servlet 的常用三大对象 (requset ; session ; servletContext)</h3>\n<p><code>获取方法</code></p>\n<blockquote>\n<p>三大常用对象，<br />\n 都是通过<strong> request 调用 get 方法</strong>来得到一个对象</p>\n</blockquote>\n<p><code>区别</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">种类</th>\n<th style=\"text-align:center\">类名</th>\n<th style=\"text-align:center\">生命周期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>request</strong></td>\n<td style=\"text-align:center\">HttpServletRequest</td>\n<td style=\"text-align:center\">本次请求有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>session</strong></td>\n<td style=\"text-align:center\">HttpSession</td>\n<td style=\"text-align:center\">当前浏览器有效，可以跨页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>servletContext</strong></td>\n<td style=\"text-align:center\">ServletContext</td>\n<td style=\"text-align:center\">整个项目有效，可以跨页面</td>\n</tr>\n</tbody>\n</table>\n<p>``</p>\n<h4 id=\"servletcontext\"><a class=\"anchor\" href=\"#servletcontext\">#</a> servletContext</h4>\n<blockquote>\n<p>一个项目只有一个 servletContext 对象  (全局)<br />\n 在项目启动期间，保存在 servletContext 中的数据可以一直使用 (跨页面)</p>\n</blockquote>\n<p><code>生命周期</code> <br />\n项目启动到关闭，服务器重启时 会被销毁</p>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/java-fan-she/",
            "url": "http://adamshang2333.github.io/hou-duan/java/java-fan-she/",
            "title": "Java反射",
            "date_published": "2023-03-08T11:32:40.752Z",
            "content_html": "<h1 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h1>\n<h2 id=\"反射机制的概念\"><a class=\"anchor\" href=\"#反射机制的概念\">#</a> 反射机制的概念</h2>\n<p>将类的各个组成部分，封装为其他对象</p>\n<blockquote>\n<p>在运行状态中，<br />\n 对任意一个类，都能够知道这个类的所有属性和方法；<br />\n 对任意一个对象，都能够调用它的任意一个属性和方法；</p>\n</blockquote>\n<h2 id=\"反射的功能\"><a class=\"anchor\" href=\"#反射的功能\">#</a> 反射的功能</h2>\n<p>1 . 在程序的运行过程中，可以操作这些对象</p>\n<ol start=\"2\">\n<li>可以解耦，提高程序的可扩展性</li>\n</ol>\n<h2 id=\"获取class类对象三个方法\"><a class=\"anchor\" href=\"#获取class类对象三个方法\">#</a> 获取 Class 类对象 (三个方法)</h2>\n<p><code>源码阶段</code></p>\n<ol>\n<li><strong>Class.forName (&quot;全类名&quot;)</strong> : 将字节码文件加载进内存，返回 Class 对象</li>\n</ol>\n<p><code>Class 类对象阶段</code></p>\n<ol start=\"2\">\n<li><strong>类名.Class</strong>: 通过类名的属性 class 获取</li>\n</ol>\n<p><code>实例化对象阶段</code> <br />\n 3.  <strong>对象.getClass ()</strong> : getClass 方法在 Object 类中定义着</p>\n<blockquote>\n<p>注意：对象阶段，new Person ( ) 调用无参构造方法</p>\n</blockquote>\n<h2 id=\"class类的方法-通过class类对象调用\"><a class=\"anchor\" href=\"#class类的方法-通过class类对象调用\">#</a> Class 类的方法 (通过 class 类对象调用)</h2>\n<h3 id=\"获取类名类全名类名\"><a class=\"anchor\" href=\"#获取类名类全名类名\">#</a> 获取类名 (类全名 &amp;&amp; 类名)</h3>\n<h3 id=\"获取构造器构造方法\"><a class=\"anchor\" href=\"#获取构造器构造方法\">#</a> 获取构造器 (构造方法)</h3>\n<h3 id=\"实例化对象\"><a class=\"anchor\" href=\"#实例化对象\">#</a> 实例化对象</h3>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/java-collection/",
            "url": "http://adamshang2333.github.io/hou-duan/java/java-collection/",
            "title": "Java collection",
            "date_published": "2023-03-08T11:32:40.732Z",
            "content_html": "<h2 id=\"collection容器\"><a class=\"anchor\" href=\"#collection容器\">#</a> Collection 容器</h2>\n<blockquote>\n<p>容器的特点:<br />\n1. 只用于<strong>存储对象</strong>  --&gt; 但可以使用泛型规定具体对象<br />\n --&gt;  如果是基本类型，在 Java 内部也会转为对应类的对象<br />\n 2. 长度可变<br />\n 3. 存储对象的类型可以不同 --&gt; 无泛型时</p>\n</blockquote>\n<h4 id=\"容器方法\"><a class=\"anchor\" href=\"#容器方法\">#</a> 容器方法</h4>\n<h4 id=\"add-添加一个对象\"><a class=\"anchor\" href=\"#add-添加一个对象\">#</a> .add  添加一个对象</h4>\n<h4 id=\"addall-把参数容器的所有元素添加到容器中\"><a class=\"anchor\" href=\"#addall-把参数容器的所有元素添加到容器中\">#</a> .addAll  把参数容器的<strong>所有元素</strong>添加到容器中</h4>\n<pre><code>// 把参数容器(a2)整体作为一个对象add进数组arr中\n arr.addAll(a2);      \n</code></pre>\n<h4 id=\"size-获取容器的大小无参\"><a class=\"anchor\" href=\"#size-获取容器的大小无参\">#</a> .size () 获取容器的大小 (无参)</h4>\n<h4 id=\"removeobject-移除只移除遇到的第一个\"><a class=\"anchor\" href=\"#removeobject-移除只移除遇到的第一个\">#</a> .remove (object) 移除 (只移除遇到的第一个)</h4>\n<h4 id=\"contains-判断是否包含某一对象遇到的第一个\"><a class=\"anchor\" href=\"#contains-判断是否包含某一对象遇到的第一个\">#</a> .contains () 判断是否包含某一对象 (遇到的第一个)</h4>\n<blockquote>\n<p>.contains 返回布尔值</p>\n</blockquote>\n<h2 id=\"迭代器-iterator\"><a class=\"anchor\" href=\"#迭代器-iterator\">#</a> 迭代器 iterator</h2>\n<pre><code>    // 迭代器使用完之后 指针指向迭代器之前停止的位置(遍历后 指针停在最后) 无法重复利用\n    // 迭代器想用时要再次赋值 !!!\n</code></pre>\n<pre><code> Iterator&lt;String&gt; it = arr.iterator();\n        while (it.hasNext()) &#123;\n        // 每次.next 调用一次指针 进行一次迭代器的移位  \n        // 实质上在循环内执行了两次指针的移动 对奇数次来说 最后一次会找不到可用元素\n              System.out.println(it.next());           \n             if (&quot;王五&quot;.equals(it.next())) &#123;\n                it.remove();\n\n            &#125;\n        &#125;\n        // 迭代器使用完之后 指针指向迭代器之前停止的位置(遍历后 指针停在最后) 无法重复利用\n        // 迭代器想用时要再次赋值 !!!\n        it = arr.iterator();\n</code></pre>\n<h2 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h2>\n<blockquote>\n<p>限制容器中保存的对象类型<br />\n每次取出的对象，想让它是规定的类型 (不是 object)<br />\n<strong>&lt; &gt; 内可以放入类 基本数据类型等</strong></p>\n</blockquote>\n<pre><code>\tList&lt;String&gt; l = new ArrayList&lt;&gt;();\n</code></pre>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<blockquote>\n<p>威力增强版的数组，特点 :<br />\n1. 元素有序 (按放入顺序)<br />\n2. <strong>按下标取值 (从 0 开始)</strong><br />\n 3. 放入对象可重复<br />\n 4. 继承自 collection</p>\n</blockquote>\n<h4 id=\"list特有方法\"><a class=\"anchor\" href=\"#list特有方法\">#</a> List 特有方法</h4>\n<h4 id=\"按下标-添加-元素\"><a class=\"anchor\" href=\"#按下标-添加-元素\">#</a> 按下标 添加 元素</h4>\n<pre><code>arr.add(0,&quot;小金刚&quot;);\n</code></pre>\n<h4 id=\"按下标-移除-元素注意下标越界\"><a class=\"anchor\" href=\"#按下标-移除-元素注意下标越界\">#</a> 按下标 移除 元素 (注意下标越界)</h4>\n<pre><code> arr.remove(2);\n</code></pre>\n<h4 id=\"按下标-修改-元素注意下标越界\"><a class=\"anchor\" href=\"#按下标-修改-元素注意下标越界\">#</a> 按下标 修改 元素 (注意下标越界)</h4>\n<pre><code> arr.set(0,&quot;太二真人&quot;);\n</code></pre>\n<h4 id=\"按下标-获取-元素注意下标越界\"><a class=\"anchor\" href=\"#按下标-获取-元素注意下标越界\">#</a> 按下标 获取 元素 (注意下标越界)</h4>\n<pre><code> arr.get(5);\n</code></pre>\n<h4 id=\"list遍历三种方法\"><a class=\"anchor\" href=\"#list遍历三种方法\">#</a> List 遍历 (三种方法)</h4>\n<h4 id=\"fori-循环代码需要顺序或者下标参与\"><a class=\"anchor\" href=\"#fori-循环代码需要顺序或者下标参与\">#</a> fori --&gt; 循环代码需要顺序或者下标参与</h4>\n<pre><code> // 第一种 for循环 arr.fori\n      \n        for (int i = 0; i &lt; arr.size(); i++) &#123;\n            System.out.println(arr.get(i));\n        &#125;\n</code></pre>\n<h4 id=\"for-循环代码只需要元素-不需要下标\"><a class=\"anchor\" href=\"#for-循环代码只需要元素-不需要下标\">#</a> for --&gt; 循环代码只需要元素 不需要下标</h4>\n<pre><code> // 第二种 foreach 循环  arr.for\n\n        // 内部的 o1 就相当于 arr.get(i)  方法替我们实现 直接使用o1就行\n        for (Object o1 : arr) &#123;\n\n        &#125;\n</code></pre>\n<h4 id=\"迭代器-需要在遍历期间更改list的长度\"><a class=\"anchor\" href=\"#迭代器-需要在遍历期间更改list的长度\">#</a> 迭代器  --&gt; 需要在遍历期间更改 List 的长度</h4>\n<pre><code>// 第三种 使用迭代器遍历List\n        // 前两种在遍历过程中不能对数组元素做增删操作!!!\n\n        // step1 获取容器的迭代器对象\n        Iterator it = arr.iterator();\n\n        // 返回布尔值 标示&quot;之后还有没有值&quot;\n        // boolean b = it.hasNext();\n        // step2 判断迭代器中还有没有元素\n        while (it.hasNext())&#123;\n            // step3 获取下一个元素\n            Object obj = it.next();\n            if (&quot;李四&quot;.equals(obj))&#123;\n                it.remove();\n            &#125;\n       &#125; \n</code></pre>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<blockquote>\n<p>特点 :</p>\n<ol>\n<li>元素无序</li>\n<li>元素<strong>不能重复 (可以去重)</strong><br />\n 继承自 collection</li>\n</ol>\n</blockquote>\n<h4 id=\"list遍历两种方法\"><a class=\"anchor\" href=\"#list遍历两种方法\">#</a> List 遍历 (两种方法)</h4>\n<h4 id=\"for-循环代码只需要元素-不需要下标-2\"><a class=\"anchor\" href=\"#for-循环代码只需要元素-不需要下标-2\">#</a> for --&gt; 循环代码只需要元素 不需要下标</h4>\n<pre><code>  for (Object o1 : set) &#123;\n\n        &#125;\n</code></pre>\n<h4 id=\"迭代器-需要在遍历期间更改list的长度-2\"><a class=\"anchor\" href=\"#迭代器-需要在遍历期间更改list的长度-2\">#</a> 迭代器  --&gt; 需要在遍历期间更改 List 的长度</h4>\n<pre><code>Iterator itset = set.iterator();\n        while (itset.hasNext())&#123;\n            System.out.println(itset.next());\n        &#125;\n</code></pre>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<blockquote>\n<p>Map -- <strong>不是继承自 collection</strong><br />\n1. 只能存储对象<br />\n 2. 长度可变<br />\n 3. 可以存储不同类型的对象</p>\n</blockquote>\n<pre><code>\t\t// List 更倾向存储相同 类型&amp;&amp;作用的数据 -- 直接遍历做集中处理即可\n        // Map  更倾向存储不同 类型&amp;&amp;作用的数据\n        // 当数据类型复杂多变,但是又要集中处理的情况, 就可以使用MAp\n        // 如果数据类型是固定的, 那么可以使用类来替代Map\n</code></pre>\n<h4 id=\"map独有特点\"><a class=\"anchor\" href=\"#map独有特点\">#</a> Map 独有特点:</h4>\n<blockquote></blockquote>\n<ol>\n<li>无序</li>\n<li>以<strong>键值对</strong> (key-value) 的方式存储数据</li>\n<li><strong>key 不能重复</strong>，一个 key 只对应一个 value  (kay 又被称为映射) y=f (x)</li>\n</ol>\n<h3 id=\"map方法\"><a class=\"anchor\" href=\"#map方法\">#</a> Map 方法</h3>\n<h4 id=\"putkeyvalue-存储键值对\"><a class=\"anchor\" href=\"#putkeyvalue-存储键值对\">#</a> .put (key,value) 存储键值对</h4>\n<pre><code> Map map = new HashMap();\n        map.put(&quot;name&quot;,&quot;张三&quot;);\n        map.put(&quot;age&quot;,14);\n        \n        // !!!key 值相同(name) \n        //    --&gt; 张三会被覆盖为李四\n        map.put(&quot;name&quot;,&quot;李四&quot;);\n</code></pre>\n<h4 id=\"getkey-获取值\"><a class=\"anchor\" href=\"#getkey-获取值\">#</a> .get (key)  获取值</h4>\n<pre><code> map.get(&quot;name&quot;);\n</code></pre>\n<h4 id=\"removekey-移除值删除键值对\"><a class=\"anchor\" href=\"#removekey-移除值删除键值对\">#</a> .remove (key)  移除值 (删除键值对)</h4>\n<pre><code> map.remove(&quot;name&quot;);\n</code></pre>\n<h4 id=\"containskeykey-判断是否包含key\"><a class=\"anchor\" href=\"#containskeykey-判断是否包含key\">#</a> .containsKey (key)  判断是否包含 key</h4>\n<pre><code> map.containsKey(&quot;name&quot;);\n</code></pre>\n<h4 id=\"containsvaluevalue-判断是否包含值\"><a class=\"anchor\" href=\"#containsvaluevalue-判断是否包含值\">#</a> .containsValue (value)   判断是否包含值</h4>\n<pre><code> map.containsValue(&quot;李四&quot;);\n</code></pre>\n<h4 id=\"size-map的大小一个键值对算一条数据\"><a class=\"anchor\" href=\"#size-map的大小一个键值对算一条数据\">#</a> .size ()  map 的大小 (一个键值对算一条数据)</h4>\n<pre><code> map.size();\n</code></pre>\n<h4 id=\"isempty-判断是否大小为0-返回值为boolean\"><a class=\"anchor\" href=\"#isempty-判断是否大小为0-返回值为boolean\">#</a> .isEmpty ( )   判断是否大小为 0 -- 返回值为 Boolean</h4>\n<pre><code> map.isEmpty();\n</code></pre>\n<h4 id=\"clear-清空map删除所有值\"><a class=\"anchor\" href=\"#clear-清空map删除所有值\">#</a> .clear ()   清空 Map (删除所有值)</h4>\n<pre><code> map.clear();\n</code></pre>\n<h3 id=\"遍历\"><a class=\"anchor\" href=\"#遍历\">#</a> 遍历</h3>\n<blockquote>\n<p>map 的遍历很少用到 (遍历目的是对数据做集中处理)<br />\n// 1. 只要有 key, 一定会获得 value<br />\n//    --&gt; 无 key 输出 null<br />\n// 2. map 是无序的 (无法使用 fori)<br />\n// 3. <strong>map 和迭代器没有关系</strong> (迭代器只针对 collection 接口)</p>\n</blockquote>\n<h4 id=\"遍历方法1\"><a class=\"anchor\" href=\"#遍历方法1\">#</a> 遍历方法 1:</h4>\n<pre><code>        // 获取所有的key 遍历所有的key获取value 放入set\n\n        // 拿到所有的key -- 放入set中(?: set 和 key都是不能重复的)\n        Set set = map.keySet();\n        for (Object key : set) &#123;\n            Object v = map.get(key);\n            System.out.println(key + &quot;的值是&quot; + v);\n        &#125;\n</code></pre>\n<h4 id=\"方法2\"><a class=\"anchor\" href=\"#方法2\">#</a> 方法 2:</h4>\n<pre><code>        // 在Map里面 每一个键值对都是一个entry对象\n        // 容量很大,不确定 的时候适合用\n        // 不许记忆... 很少用\n        Set entrySet = map.entrySet();\n        for (Object entry : entrySet) &#123;\n            Map.Entry e = (Map.Entry) entry;\n            Object key = e.getKey();\n            Object value = e.getValue();\n            System.out.println(key+&quot;的值是:&quot;+value);\n        &#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/java/jdbc/",
            "url": "http://adamshang2333.github.io/hou-duan/java/jdbc/",
            "title": "JDBC",
            "date_published": "2023-03-08T11:32:40.720Z",
            "content_html": "<blockquote>\n<p>全称: Java DataBase Connectivity<br />\n 是 java 语言中，用来规范客户端程序如何来访问数据库的 API (应用程序接口)</p>\n</blockquote>\n<p><code>!!JDBC比框架的效率高</code></p>\n<h2 id=\"准备工具\"><a class=\"anchor\" href=\"#准备工具\">#</a> 准备工具</h2>\n<p>JDBC 需要导入 jar 包  ---&gt;  mysql-connector-java-5.1.47.jar</p>\n<h2 id=\"操作步骤-增删改\"><a class=\"anchor\" href=\"#操作步骤-增删改\">#</a> 操作步骤 -- 增，删，改</h2>\n<blockquote>\n<p>以下将一个完整的 JDBC<strong> 添加</strong>过程拆解成若干步骤</p>\n</blockquote>\n<h3 id=\"1准备数据库账户及链接地址\"><a class=\"anchor\" href=\"#1准备数据库账户及链接地址\">#</a> 1. 准备数据库账户及链接地址</h3>\n<pre><code> public void jdbc() &#123;\n\t// 添加 ?useSSL=false (false或者true都可以 ,目的是取消控制台的报红--&gt;规定是否使用SSL)\n\t// 设置成静态的类属性,不用实例化一个对象就能使用\n\tprivate static final String URL = &quot;jdbc:mysql://localhost:3306/db0503?useSSL=false&quot;;\n    private static final String DRIVER = &quot;com.mysql.jdbc.Driver&quot;;\n    private static final String USERNAME = &quot;root&quot;;\n    private static final String PASSWORD = &quot;123456&quot;;\n</code></pre>\n<h3 id=\"2加载驱动\"><a class=\"anchor\" href=\"#2加载驱动\">#</a> 2. 加载驱动</h3>\n<pre><code>      Connection conn = null;\n      PreparedStatement stmt = null;\n      try &#123;\n            // Class: jar包中封装好的类\n            Class.forName(DRIVER);\n</code></pre>\n<h3 id=\"3建立数据库链接\"><a class=\"anchor\" href=\"#3建立数据库链接\">#</a> 3. 建立数据库链接</h3>\n<pre><code> \tconn = DriverManager.getConnection(URL, USERNAME, PASSWORD);\n</code></pre>\n<h3 id=\"4准备sql语句\"><a class=\"anchor\" href=\"#4准备sql语句\">#</a> 4. 准备 SQL 语句</h3>\n<blockquote>\n<p>准备 SQL 语句的时候，注意防止 SQL 语句注入<br />\n SQL 注入 :   ---&gt; 强行进行账户的免密登录等<br />\n利用字符串的拼接，将传入的字符串改为 SQL 语句<br />\n以达到能够强行更改 SQL 的操作；结束 SQL 后面的语句执行</p>\n</blockquote>\n<pre><code>stmt = conn.prepareStatement(&quot;insert into student(name, age, gender) values (?,?,?)&quot;); \n\t// 使用这种方式向sql中填值\n\t// 不论这个数据有多复杂, 都会被安全填入数据库(将特殊符号等转义掉) \n\t// 1,2,3对应第1个name 第2个age 第3个gender\n \t   stmt.setString(1, &quot;大光&quot;);\n       stmt.setInt(2, 30);\n       stmt.setString(3, &quot;男&quot;);\n</code></pre>\n<blockquote>\n<p>对于增删改，不需要像查询一样创建结果集将结果返回获取<br />\n只是在准备 SQL 语句的时候有不同<br />\n实际的数据库操作中，基本不会涉及到数据库中数据的删除</p>\n</blockquote>\n<p><code>改的SQL语句示例:</code></p>\n<pre><code> stmt = conn.prepareStatement(&quot;update student set age=? ,gender=?,name=? where name=?&quot;);\n            stmt.setInt(1,38);\n            stmt.setString(2,&quot;女&quot;);\n            stmt.setString(3,&quot;大刚&quot;);\n            stmt.setString(4,&quot;宋浩&quot;);\n</code></pre>\n<h3 id=\"5执行sql语句\"><a class=\"anchor\" href=\"#5执行sql语句\">#</a> 5. 执行 SQL 语句</h3>\n<blockquote>\n<p>返回一个 int 值；<br />\n 代表了该语句影响了几行数据 (0 表示未对表做任何改动)</p>\n</blockquote>\n<pre><code>  int i = stmt.executeUpdate();\n   &#125; catch (ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n</code></pre>\n<h3 id=\"6关闭数据库链接\"><a class=\"anchor\" href=\"#6关闭数据库链接\">#</a> 6. 关闭数据库链接</h3>\n<blockquote>\n<p>关闭链接，准备的 SQL 语句才会开始执行</p>\n</blockquote>\n<pre><code> &#125; catch (ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n        // 注意: 必须放入finally中,确保一定会关掉\n            try &#123;\n                if (stmt != null) &#123;\n                // 关闭准备语句\n                    stmt.close();\n                &#125;\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if (conn != null) &#123;\n                // 关闭数据库链接\n                    conn.close();\n                &#125;\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n\n</code></pre>\n<h2 id=\"操作步骤-查\"><a class=\"anchor\" href=\"#操作步骤-查\">#</a> 操作步骤 -- 查</h2>\n<blockquote>\n<p>数据的查询操作，前期的账户准备和链接建立都一样，<br />\n 主要的不同在于:<br />\n 需要在查询后<strong>创建一个 JDBC 结果集 (.executeQuery ()</strong>);<br />\n 在准备阶段也要 ** 创建一个结果接收容器 (List)** 用于接收结果集中的数据</p>\n</blockquote>\n<h3 id=\"1接收容器声明\"><a class=\"anchor\" href=\"#1接收容器声明\">#</a> 1. 接收容器声明</h3>\n<pre><code> List&lt;Student&gt; studentList =new ArrayList&lt;&gt;();\n\n</code></pre>\n<h3 id=\"2建立链接查询语句准备结果集准备\"><a class=\"anchor\" href=\"#2建立链接查询语句准备结果集准备\">#</a> 2. 建立链接，查询语句准备，结果集准备</h3>\n<pre><code>\t\t// 声明 链接\n\t\tConnection coon=null;\n\t\t// 声明 准备语句\n        PreparedStatement stmt=null;\n        // 声明 结果集 \n        ResultSet rs=null;\n         try &#123;\n            // 加载驱动 \n            Class.forName(DRIVER);\n            coon = DriverManager.getConnection(URL, USERNAME, PASSWORD);\n            stmt = coon.prepareStatement(&quot;select * from student where age &gt; ?&quot;);\n            stmt.setInt(1,15);\n</code></pre>\n<h3 id=\"3查询-将结果集中的数据遍历添加到接受容器\"><a class=\"anchor\" href=\"#3查询-将结果集中的数据遍历添加到接受容器\">#</a> 3. 查询，将结果集中的数据遍历添加到接受容器</h3>\n<pre><code> \t\trs = stmt.executeQuery();\n \t\t            // 对结果集进行遍历 .next方法\n \t\t            // --&gt; 类似 迭代器的.hasNext (确认是否还有值,返回布尔值)\n             while ( rs.next())&#123;\n                 // 按列名取值\n                 int sid = rs.getInt(&quot;sid&quot;);\n                 String name = rs.getString(&quot;name&quot;);\n                 // 也可以按照列的序号取值\n                 int age = rs.getInt(3);\n                 String gender = rs.getString(4);\n                 System.out.println(sid +&quot;:&quot;+name+&quot;年龄:&quot;+age+&quot;性别:&quot;+gender);\n\n                 // 每次循环都创建一个新的student对象\n                 Student stu = new Student();\n                 stu.setSid(sid);\n                 stu.setAge(age);\n                 stu.setName(name);\n                 stu.setGender(gender);\n\n                 // 将创建出来的学生对象添加到接受容器(list)中\n                 studentList.add(stu);\n             &#125;\n</code></pre>\n<h3 id=\"4关闭链接注意结果集也要关闭\"><a class=\"anchor\" href=\"#4关闭链接注意结果集也要关闭\">#</a> 4. 关闭链接 (<span class=\"spoiler\" title=\"你知道得太多了\">注意结果集也要关闭</span>！)</h3>\n<blockquote>\n<p>关闭：链接；准备语句；结果集<br />\n关闭顺序：后开的先关；先开的后关</p>\n</blockquote>\n<pre><code>finally &#123;\n            try &#123;\n                if (rs != null) &#123;\n                  // 关闭结果集\n                    rs.close();\n                &#125;\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n\n            try &#123;\n                if (stmt != null) &#123;\n                  // 关闭SQL语句 \n                    stmt.close();\n                &#125;\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if (coon != null) &#123;\n                // 关闭数据库链接\n                    coon.close();\n                &#125;\n            &#125; catch (SQLException e) &#123;\n                e.printStackTrace();\n            &#125;\n</code></pre>\n<h2 id=\"jdbc优化-代码封装\"><a class=\"anchor\" href=\"#jdbc优化-代码封装\">#</a> JDBC 优化 -- 代码封装</h2>\n<blockquote>\n<p>上述的 JDBC 操作有很多的重复地方，<br />\n 可以使用封装来提升代码的复用性<br />\n例如:</p>\n<ol>\n<li>每次的建立链接和关闭代码都是固定的</li>\n<li>对于增，删，改而言，最大的不同就是准备的 SQL 语句有所不同</li>\n<li>查询的语句虽然不同，<br />\n　但是遍历结果集，传入接收容器的过程都是一样的</li>\n</ol>\n</blockquote>\n<h3 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h3>\n<pre><code>public class DBUtil &#123;\n    private static final String DRIVE = &quot;com.mysql.jdbc.Driver&quot;;\n    private static final String URL = &quot;jdbc:mysql://localhost:3306/db0503?useSSL=true&quot;;\n    private static final String USER = &quot;root&quot;;\n    private static final String PASSWORD = &quot;123456&quot;;\n</code></pre>\n<h3 id=\"封装-建立链接\"><a class=\"anchor\" href=\"#封装-建立链接\">#</a> 封装 -- 建立链接</h3>\n<blockquote>\n<p>建立连接这种纯粹的功能实现，不需要创建对象<br />\n使用静态方法比较好；对象在有存储不同值的场景使用更好</p>\n</blockquote>\n<p><code>!!!对于有异常处理的情况, 如果有返回值,**注意在try里面和外面都要写return!!!**</code></p>\n<pre><code>// 返回Connection , 在其他的方法中关闭时使用\npublic static Connection getConnection() &#123;\n        Connection conn=null;\n        try &#123;\n            Class.forName(DRIVE);\n            conn = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t    // 返回链接 --确保无论如何都会返回\n            return conn;\n        &#125; catch (SQLException | ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;\n        // 返回链接 --确保无论如何都会返回\n        return conn;\n    &#125;\n</code></pre>\n<h3 id=\"封装-关闭链接\"><a class=\"anchor\" href=\"#封装-关闭链接\">#</a> 封装 -- 关闭链接</h3>\n<blockquote>\n<p>关闭链接时，要考虑是否有查询的情况:<br />\n 如果有查询，则亦需要关闭开启的结果集<br />\n　－－＞通过 <strong>重载</strong> 来实现方法的适应性</p>\n</blockquote>\n<pre><code>\n public static void closeAll(Connection conn, PreparedStatement preStmt) &#123;\n        try &#123;\n            if (preStmt != null) &#123;\n                preStmt.close();\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;\n        try &#123;\n            if (conn != null) &#123;\n                conn.close();\n            &#125;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;\n\n    &#125;\n    \n    \n     /**\n     * 适用于数据库查询的连接关闭方法\n     * @param conn    jdbc连接对象\n     * @param preStmt jdbcSQL语句处理对象\n     * @param rs      jdbc查询结果集对象\n     */\n    // 重载 适用于查询中调用\n    public static void closeAll(Connection conn, PreparedStatement preStmt, ResultSet rs) &#123;\n        try &#123;\n      \t  // 关闭额外开启的结果集\n            rs.close();\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125;\n        // 在重载中调用同名的两个参数的方法\n        closeAll(conn, preStmt);\n    &#125;\n</code></pre>\n<h3 id=\"封装-数据库查询\"><a class=\"anchor\" href=\"#封装-数据库查询\">#</a> 封装 -- 数据库查询</h3>\n<blockquote>\n<p>数据库的查询封装，需要考虑到 SQL 语句的适应性:<br />\nSQL 语句的查询条件需要的<strong>传入参数 长度和类型都不确定</strong><br />\n　－－＞解决：使用 <strong>Object... a</strong> 不定长参数 (系统自带)<br />\n 不定长参数写法:<br />\n 在参数列表中的最后一个位置，<br />\n 以<strong>类型... 参数名</strong> (三个 &quot;.&quot; , 且与参数名之间<strong>有空格</strong>)<br />\n 在方法中以数组的形式存在</p>\n</blockquote>\n<pre><code>public static int updateSQL(String sql, Object... a) &#123;\n        Connection conn = null;\n        PreparedStatement preStmt = null;\n        try &#123;\n            conn = getConnection();\n            preStmt = conn.prepareStatement(sql);\n//            preStmt.setString(1, &quot;娃哦ED&quot;);\n//            preStmt.setInt(2, 18);\n//            preStmt.setString(3, &quot;男&quot;);\n            //\n            // 优化: 利用不定长参数 遍历参数a的数组\n            for (int i = 0; i &lt; a.length; i++) &#123;\n                Object o = a[i];\n                preStmt.setObject(i + 1, o);\n            &#125;\n\n            int result = preStmt.executeUpdate();\n            return result;\n        &#125; catch (SQLException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            DBUtil.closeAll(conn, preStmt);\n        &#125;\n        // 如果未执行try内代码 则执行return 0\n        return 0;\n    &#125;\n</code></pre>\n<h2 id=\"commons-dbutils\"><a class=\"anchor\" href=\"#commons-dbutils\">#</a> Commons-DButils</h2>\n<blockquote>\n<p>阿帕奇组织专门封装的 JDBC 工具</p>\n</blockquote>\n<p>订单<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>这里是说明的开始，顾城，童话诗人，以及坏掉了的人。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/ding-wei/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/ding-wei/",
            "title": "CSS-定位",
            "date_published": "2023-03-08T11:32:40.284Z",
            "content_html": "<h2 id=\"定位\"><a class=\"anchor\" href=\"#定位\">#</a> 定位</h2>\n<blockquote>\n<p>定位的使用包含两个部分：</p>\n</blockquote>\n<ol>\n<li>定位的方式</li>\n<li>偏移值  left,right,top,bottom</li>\n</ol>\n<p><strong>偏移值准确的理解是 “距离什么位置有多大” 如 top:100px; 距离顶部为 100 像素 （向下走）</strong></p>\n<h3 id=\"静态定位\"><a class=\"anchor\" href=\"#静态定位\">#</a> 静态定位</h3>\n<blockquote>\n<p>所有的标准流都是静态定位</p>\n</blockquote>\n<pre><code>position:static;\n</code></pre>\n<ul>\n<li>一般用于将某些已经定位的元素还原成标准流，用的很少</li>\n<li>偏移值对于静态定位来说不起作用，我们以后说的元素定位不包括静态定位</li>\n</ul>\n<h3 id=\"相对定位\"><a class=\"anchor\" href=\"#相对定位\">#</a> 相对定位</h3>\n<blockquote>\n<p>相对定位是相对自己的标准流的位置进行定位移动</p>\n</blockquote>\n<pre><code>position:relative;\n</code></pre>\n<p>特性：</p>\n<pre><code>1. 移动的出发点是自身标准流的位置\n2. 相对定位移动的元素不会对别的元素产生干扰，“没有脱标”，\n   真正占得位置还是标准流的位置（肉体不在 灵魂永驻）\n3. 可以盖在其他标准流的上方\n4. 一般用于微调元素和配合绝对定位来实现效果\n</code></pre>\n<h3 id=\"绝对定位\"><a class=\"anchor\" href=\"#绝对定位\">#</a> 绝对定位</h3>\n<pre><code>position:absolute;\n</code></pre>\n<p>特性：</p>\n<pre><code>1.移动的出发点：\n\t从绝对元素开始一直往上级找（直到找到最大的html标签），\n\t在这个过程中，只要有一个元素（A元素）是定位（相对，绝对，固定）的任何一个，\n\t这个绝对定位的元素就会参照这个A元素进行定位，并且不会在往上找了，\n\t如果一个都没有，最终会以html元素定位\n\n2.脱标\n\t1.1. 脱标的元素不占标准流的位置\n\t1.2. 不会继承父级的宽度，内容有多大就撑多大 （不论块级还是行内）\n\t1.3. 可以直接写宽高 （不论块级还是行内）\n\t1.4. margin:auto对于脱标元素不起作用\n</code></pre>\n<p>巧妙运用：让一个定位盒子水平垂直居中</p>\n<pre><code>left: 50%;\ntop: 50%;\nmargin-left:-自身宽度的一半;\nmargin-top:-自身高度的一半;\n</code></pre>\n<p>使用方式：</p>\n<pre><code>在工作中，绝对定位&quot;大多&quot;配合相对定位一起使用（父相子绝） \n父相：在标准流上占有位置\n子绝：针对这个标准流在去移动\n\n注意：父绝子绝的情况也有，只是很少，不要完全形成思维定式。\n</code></pre>\n<h3 id=\"固定定位\"><a class=\"anchor\" href=\"#固定定位\">#</a> 固定定位</h3>\n<pre><code>position: fixed;\n</code></pre>\n<p>特性：</p>\n<pre><code>1.脱标\n\t1.1.脱标的元素不占标准流的位置\n\t1.2.不会继承父级的的宽度，内容有多个就撑多大 （不论块级还是行内）\n\t1.3.可以直接写宽高 （不论块级还是行内）\n\t1.4.margin:auto对于脱标元素不起作用\n2.移动的出发点：浏览器窗口 （直接表现：滚动条对于固定元素没有作用）\n</code></pre>\n<h3 id=\"四种定位总结\"><a class=\"anchor\" href=\"#四种定位总结\">#</a> 四种定位总结</h3>\n<table>\n<thead>\n<tr>\n<th>定位模式</th>\n<th>是否脱标占有位置</th>\n<th>是否可以使用边偏移</th>\n<th>移动位置基准</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>静态 static</td>\n<td>不脱标，正常模式</td>\n<td>不可以</td>\n<td>正常模式</td>\n</tr>\n<tr>\n<td>相对定位 relative</td>\n<td>不脱标，占有位置</td>\n<td>可以</td>\n<td>相对自身位置移动</td>\n</tr>\n<tr>\n<td>绝对定位 absolute</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于定位的父级移动位置</td>\n</tr>\n<tr>\n<td>固定定位 fixed</td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于浏览器移动位置</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"z-index\"><a class=\"anchor\" href=\"#z-index\">#</a> z-index</h2>\n<blockquote>\n<p>控制 “定位” 元素的叠放层级</p>\n</blockquote>\n<ol>\n<li>z-index 只针对定位元素有效果</li>\n<li>z-index 值越大，层级越高</li>\n</ol>\n<p>思考：上大盒子压住下大盒子 下大盒子里面的子元素压住上盒子</p>\n<ol start=\"3\">\n<li>如果父元素已经比较过层级了（父元素 “都有” z-index 的时候，并且值不为 auto），那么子元素与子元素之间是不会再去比较的</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/js-ji-chu/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/js-ji-chu/",
            "title": "JS总结",
            "date_published": "2023-03-08T11:32:40.272Z",
            "content_html": "<p>[toc]</p>\n<h2 id=\"js组成部分\"><a class=\"anchor\" href=\"#js组成部分\">#</a> jS 组成部分</h2>\n<p>EMAScript: ES5  ES6  基础语法和标准<br />\n DOM : 文档元素进行操作<br />\n BOM : 对浏览器进行操作 browser</p>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<h3 id=\"命名规范\"><a class=\"anchor\" href=\"#命名规范\">#</a> 命名规范</h3>\n<blockquote>\n<ol>\n<li>以数字 字母 下划线 $ 组成，不能以数字开头！！！</li>\n<li>见名知意</li>\n<li>以驼峰结构命名 personName</li>\n<li>不能使用系统关键字 (var body 等)</li>\n</ol>\n</blockquote>\n<h3 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<blockquote>\n<p>var a = 100<br />\nalert (typeof (a) )   //alert 提示框  typeof () 获取类型</p>\n</blockquote>\n<h4 id=\"number-数字类型\"><a class=\"anchor\" href=\"#number-数字类型\">#</a> number (数字类型)</h4>\n<blockquote>\n<p>JS 中没有浮点型，都是 number 类型 (弱类型语言)</p>\n</blockquote>\n<h4 id=\"string-字符串类型\"><a class=\"anchor\" href=\"#string-字符串类型\">#</a> string (字符串类型)</h4>\n<blockquote>\n<p>字符串赋值时使用 &quot;&quot; 包裹内容<br />\n字符串可以进行拼接 (使用 + 号)<br />\n 数值和字符进行拼接时，发生隐式类型转换 (数值 --&gt; 字符串；布尔值 --&gt; 0/1)<br />\n<strong> 注意！！从左到右的顺序 会影响拼接效果</strong><br />\n &quot;3&quot; + 4 + 5  ---&gt; &quot;345&quot; ; 3 + 4 + &quot;5&quot; ---&gt; &quot;75&quot;</p>\n</blockquote>\n<h4 id=\"booleanbool-布尔值\"><a class=\"anchor\" href=\"#booleanbool-布尔值\">#</a> boolean (bool) 布尔值</h4>\n<blockquote>\n<p>只有 true (1) , false (0) 两种<br />\n用作逻辑判断 (if 判断中，亦可遵循 &quot;非 0 即为真&quot;)</p>\n</blockquote>\n<h4 id=\"undefined\"><a class=\"anchor\" href=\"#undefined\">#</a> undefined</h4>\n<blockquote>\n<p>变量定义但未初始化赋值时返回 (空的变量)<br />\n console 数值为 NaN<br />\ntypeof 为 undefined</p>\n</blockquote>\n<h4 id=\"null\"><a class=\"anchor\" href=\"#null\">#</a> null</h4>\n<blockquote>\n<p>访问一个尚未存在的对象时所返回的值 (空的对象)<br />\n console 数值为 0   (表示空指针对象)<br />\n typeof 为 object</p>\n</blockquote>\n<h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<h4 id=\"与\"><a class=\"anchor\" href=\"#与\">#</a> &amp;&amp; (与)</h4>\n<blockquote>\n<p>可以有三个及以上的变量<br />\n X &amp;&amp; Y &amp;&amp; Z</p>\n</blockquote>\n<h4 id=\"或\"><a class=\"anchor\" href=\"#或\">#</a> || (或)</h4>\n<blockquote>\n<p>可以有三个及以上的变量</p>\n</blockquote>\n<h4 id=\"非-一元运算符\"><a class=\"anchor\" href=\"#非-一元运算符\">#</a> ! (非，一元运算符)</h4>\n<blockquote>\n<p>经常用来取反<br />\n取反 (=!) 注意与不等 (!=) 区分</p>\n</blockquote>\n<h3 id=\"算数运算符\"><a class=\"anchor\" href=\"#算数运算符\">#</a> 算数运算符</h3>\n<h4 id=\"取余\"><a class=\"anchor\" href=\"#取余\">#</a> % (取余)</h4>\n<blockquote>\n<p>取余常用来判断奇偶，提取数字各个位的值 (与 parseInt ()--&gt; 取整 结合使用)</p>\n</blockquote>\n<pre><code>\t//提取百位的值\n   var fir = parseInt(d / 100); \n   //提取十位的值 (亦可在提取百位后,减去百位)\n   var sec = parseInt(d / 10)%10;\n   //提取个位的值\n   var thr = d % 10\n</code></pre>\n<h4 id=\"-自加自减\"><a class=\"anchor\" href=\"#-自加自减\">#</a> ++/-- (自加 / 自减)</h4>\n<blockquote>\n<p>n++ 和 ++n 都是自身值加一 区别在于返回值 (赋值)</p>\n</blockquote>\n<pre><code>\t\tvar n = 3;\n        var x = n++;// 先返回(赋值) , 再自加\n        var y = ++n;//先自加 , 再返回(赋值)\n        console.log(x,n);//输出 x = 3  n = 4\n        console.log(y,n);//输出 y = 4  n = 4\n</code></pre>\n<h4 id=\"-加-减-乘-除\"><a class=\"anchor\" href=\"#-加-减-乘-除\">#</a> + - * / (加 减 乘 除)</h4>\n<blockquote>\n<p>注意有简写: +=  -=  *=  /= %=<br />\ni += 2  等价于 i = i + 2</p>\n</blockquote>\n<h3 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h3>\n<h4 id=\"不等式\"><a class=\"anchor\" href=\"#不等式\">#</a> 不等式 &lt;&lt;=&gt; &gt;= !=</h4>\n<h4 id=\"等式-数值相等即为相等-严格相等类型也要相等\"><a class=\"anchor\" href=\"#等式-数值相等即为相等-严格相等类型也要相等\">#</a> 等式  == --&gt; 数值相等即为相等  === --&gt; 严格相等 (类型也要相等)</h4>\n<pre><code>\t\tvar z = &quot;10&quot; == 10;//值相等即为相等\n        console.log(z);//true  自动类型转换 将数字转换为字符串\n\n        var m = &quot;10&quot; === 10;//值和类型完全相等才行\n        console.log(m);//false\n</code></pre>\n<h4 id=\"三目运算符\"><a class=\"anchor\" href=\"#三目运算符\">#</a> 三目运算符</h4>\n<blockquote>\n<p>var  x  = 判断条件？成立时执行语句：不成立执行语句</p>\n</blockquote>\n<pre><code>var c = a &gt; b ? a : b;// &quot;?&quot;条件成立 返回 a 值给 c; 不成立 返回 b 值给 c\n\n//冒号前后可使用表达式 数值 字符串等各种内容\nvar d = a &gt; b &amp;&amp; a &gt; 0 ? a + b : a - b;\n</code></pre>\n<h2 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h2>\n<h3 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a> if ...</h3>\n<h3 id=\"if-else\"><a class=\"anchor\" href=\"#if-else\">#</a> if ... else ...</h3>\n<h3 id=\"if-else-if-else-if-else\"><a class=\"anchor\" href=\"#if-else-if-else-if-else\">#</a> if ... else if...  else if ... else</h3>\n<h3 id=\"switch-case-break-case-break-default-break\"><a class=\"anchor\" href=\"#switch-case-break-case-break-default-break\">#</a> switch ... case break ...  case break ... default break</h3>\n<h2 id=\"元素获取-操作\"><a class=\"anchor\" href=\"#元素获取-操作\">#</a> 元素获取 操作</h2>\n<blockquote>\n<p>只有对 class 进行属性赋值的时候，注意为 className 不是 class<br />\n 更改样式属性时，生成行间样式<br />\n innerHTML 是一种属性<br />\n document.write () 是一种方法</p>\n</blockquote>\n<pre><code>  var oName = document.getElementById(&quot;name&quot;);\n  oName.style.backgroundColor = &quot;red&quot;;\n  oName.className = &quot;name&quot;\n  \n  //获取或设置的标签里面的内容 -- 内容指标签内的所有子标签及文本\n  //常用作 设置文本 \n  var str = oName.innerHTML;\n  oName.innerHTML = &quot;西红柿牛腩&quot;;\n  \n  //清空标签内的内容\n  oName.innerHTML = &quot;&quot;;\n  \n  document.write(&quot;&lt;div class= 'name' &gt;哈哈哈哈哈&lt;/div&gt;&quot;);\n  document.write(&quot;&lt;div class= \\&quot;name\\&quot; &gt;哈哈哈哈&lt;/div&gt;&quot;);\n\n</code></pre>\n<h2 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h2>\n<h3 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> for 循环</h3>\n<h3 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h3>\n<h3 id=\"循环结束\"><a class=\"anchor\" href=\"#循环结束\">#</a> 循环结束</h3>\n<h4 id=\"break\"><a class=\"anchor\" href=\"#break\">#</a> break</h4>\n<blockquote>\n<p>完全跳出循环，循环结束</p>\n</blockquote>\n<h4 id=\"continue\"><a class=\"anchor\" href=\"#continue\">#</a> continue</h4>\n<blockquote>\n<p>结束本次循环，循环继续</p>\n</blockquote>\n<h2 id=\"math方法\"><a class=\"anchor\" href=\"#math方法\">#</a> Math 方法</h2>\n<pre><code> \t    // 1. π\n        console.log(Math.PI);\n\n        // 2. max\n        var max = Math.max(32,545,65,24,-3534);\n        console.log(max);\n\n        // 3. min \n        var min = Math.min(32,545,65,24,-3534);\n        console.log(min);\n\n        // 4.向上取整\n        console.log(Math.ceil(1.1));// 2\n        console.log(Math.ceil(1.9));// 2\n        console.log(Math.ceil(-1.1));// -1\n\n        // 5. 向下取整\n        console.log(Math.floor(1.1));// 1\n        console.log(Math.floor(-1.1));// -2\n\n        // 6. !!!四舍五入\n        console.log(Math.round(3.2));//3\n        console.log(Math.round(3.5));//4\n\n        // 7. !!!取绝对值\n        console.log(Math.abs(-100));// 100\n        console.log(Math.abs(100));//100\n\n        // 8. Math.pow(a,b) a的b次方\n        console.log(Math.pow(5,3));\n        \n        // 9. Math.sqrt() 开方\n        console.log(Math.sqrt(81));\n\n        // 10. 随机数 [0 , 1) 可随机出0\n        console.log(Math.random());\n\n\n        //Math.floor(Math.random()* (max - min + 1) + min)\n        var a = Math.floor(Math.random()*(99 - 66 + 1) + 66); // 取值范围: [ ]\n        console.log(a);\n\n</code></pre>\n<h2 id=\"定时器\"><a class=\"anchor\" href=\"#定时器\">#</a> 定时器</h2>\n<h3 id=\"interva定时器\"><a class=\"anchor\" href=\"#interva定时器\">#</a> Interva 定时器</h3>\n<h3 id=\"timeout定时器\"><a class=\"anchor\" href=\"#timeout定时器\">#</a> Timeout 定时器</h3>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<h3 id=\"无参无返回\"><a class=\"anchor\" href=\"#无参无返回\">#</a> 无参无返回</h3>\n<h3 id=\"有参无返回\"><a class=\"anchor\" href=\"#有参无返回\">#</a> 有参无返回</h3>\n<h3 id=\"无参无返回-2\"><a class=\"anchor\" href=\"#无参无返回-2\">#</a> 无参无返回</h3>\n<h2 id=\"offset\"><a class=\"anchor\" href=\"#offset\">#</a> offset</h2>\n<h3 id=\"offsetleft\"><a class=\"anchor\" href=\"#offsetleft\">#</a> offsetLeft</h3>\n<h3 id=\"offsettop\"><a class=\"anchor\" href=\"#offsettop\">#</a> offsetTop</h3>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/js-xuan-ze-qi/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/js-xuan-ze-qi/",
            "title": "js选择器",
            "date_published": "2023-03-08T11:32:40.260Z",
            "content_html": "<h3 id=\"基本选择器\"><a class=\"anchor\" href=\"#基本选择器\">#</a> 基本选择器</h3>\n<ol>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器</li>\n</ol>\n<blockquote>\n<p>优先级:<br />\n 继承 &lt; 通配符 &lt; 标签选择器 &lt; 类选择器 &lt; ID 选择器 &lt; 行内样式 &lt;　!important</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>组合选择器</strong></p>\n<p>1. 群组选择器<br />\n 2. 后代选择器</p>\n</li>\n</ul>\n<h3 id=\"属性选择器\"><a class=\"anchor\" href=\"#属性选择器\">#</a> 属性选择器</h3>\n<h4 id=\"语法例标签后中接属性选择包含特定属性的元素\"><a class=\"anchor\" href=\"#语法例标签后中接属性选择包含特定属性的元素\">#</a> 语法例:\t标签后 [] 中接属性，选择包含特定属性的元素</h4>\n<h4 id=\"无优先级看执行顺序\"><a class=\"anchor\" href=\"#无优先级看执行顺序\">#</a> 无优先级，看执行顺序</h4>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n   a[href]&#123;\n   \t\t&#125;     []内  \n   \t\tp[class]&#123;\n\t\t\t\tcolor: deepskyblue;\n\t\t\t&#125;\n\t\t\t\n\ta[href=&quot;####&quot;]&#123;\n\t\t\t\tcolor: gray;\n\t\t\t&#125;\n&lt;/style&gt;\n\t&lt;body&gt;\n\t\t&lt;!--a[href=&quot;#&quot;]&#123;&#125;--&gt;\n\t\t&lt;a href=&quot;#&quot; class=&quot;title&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;p class=&quot;title&quot;&gt;中午吃点啥&lt;/p&gt;\n\t\t&lt;p&gt;我也不知道&lt;/p&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;####&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a &gt;cc&lt;/a&gt;\n\t&lt;/body&gt;\n</code></pre>\n<h3 id=\"结构选择器\"><a class=\"anchor\" href=\"#结构选择器\">#</a> 结构选择器</h3>\n<p>1. 子代元素选择<br />\n div&gt;span<br />\n<strong> 只能选择儿子辈标签，不能跨级选择</strong></p>\n<p>2. 紧邻元素选择<br />\n span+a<br />\n<strong> 对紧接着的 span 下面的第一个 a 标签进行选择，其余的同类标签不会选中</strong></p>\n<h3 id=\"伪类选择器\"><a class=\"anchor\" href=\"#伪类选择器\">#</a> 伪类选择器</h3>\n<p>:not  &quot;反向&quot; 选择<br />\n:not (.color)</p>\n<pre><code>/*未设置成.color的*/\n\t\t\t:not(.color)&#123;\n\t\t\t\tcolor: blue;\n\t\t\t&#125;\n\t\t\t\n\t\t\t:not(div .color)&#123;\n\t\t\t\tcolor: goldenrod;\n\t\t\t&#125;\n</code></pre>\n<p>:nth- &quot;序列&quot; 选择<br />\n可以设置 n 为负值，eg:nth-of-type (-n+5)--n<br />\n 从 0 开始取值，只能选中前 5 个子代元素</p>\n<pre><code> /*所有父标签中的第二个标签,如果是p标签,选择器可以选中*/\n\t\t\t/*第二个不是p标签则无效*/\n\t\t\tp:nth-child(2)&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\t&lt;!--倒序查找选择--&gt;\n\t\t\tp:nth-last-child(4)&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\tp:nth-of-type(2)&#123;\n\t\t\t\tcolor: blue;\n\t\t\t&#125;\n\t\t\t \n\t\t\t/*n从0开始*/\n\t\t\tp:nth-of-type(2n+1)&#123;\n\t\t\t\tcolor: gray;\n\t\t\t&#125;\n\t\t\t\n\t\t\t/*倒数第几个*/\n\t\t\tp:nth-last-of-type(1)&#123;\n\t\t\t\tcolor: deepskyblue;\n\t\t\t&#125;\n</code></pre>\n<pre><code>\t\t\tp:first-of-type&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\tp:last-of-type&#123;\n\t\t\t\tcolor: greenyellow;\n\t\t\t&#125;\n\t\t\t\n\t\t\t/*所有父标签中p标签只有一个*/\n\t\t\tp:only-of-type&#123;\n\t\t\t\tcolor: red; \n\t\t\t&#125;\n\t\t\t\n\t\t\t/*所有父标签中只有一个子标签,并且是p标签*/\n\t\t\tp:only-child&#123;\n\t\t\t\tcolor: skyblue;\n\t\t\t&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/html-ji-chu/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/html-ji-chu/",
            "title": "HTML基础",
            "date_published": "2023-03-08T11:32:40.248Z",
            "content_html": "<h1 id=\"html模板\"><a class=\"anchor\" href=\"#html模板\">#</a> html 模板</h1>\n<pre><code>&lt;!--申明一个HTML文档--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;!--代表一个网页的整体--&gt;\n&lt;html&gt;\n\t&lt;!--展示网页标题，样式等--&gt;\n\t&lt;head&gt;\n\t\t&lt;!--设置编码格式，防止乱码（UTF-8 常用编码格式）--&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t\t&lt;!--设置网页标题--&gt;\n\t\t&lt;title&gt;百度一下&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;!--网页主体（直观见到的）--&gt;\n\t&lt;body&gt;\n\t\t\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h1 id=\"项目文件创建\"><a class=\"anchor\" href=\"#项目文件创建\">#</a> 项目文件创建</h1>\n<p>**img 😗* 项目图片资源，可以有子文件夹，对不同的页面分类</p>\n<p>**js 😗* 外部引入的 js 文件</p>\n<p>**css 😗* 外部引入的 css 文件，比如 normalize.css, 或框架 css 文件</p>\n<p>**index/home.html 😗* 首页<br />\n<strong> favicon.ico</strong> : 浏览器标签栏图标</p>\n<h1 id=\"标签分类\"><a class=\"anchor\" href=\"#标签分类\">#</a> 标签分类</h1>\n<ul>\n<li>\n<p>模板 功能类</p>\n<pre><code> html body head link title style meta strong  em   \n link: \n</code></pre>\n</li>\n<li>\n<p>块标签</p>\n<pre><code> div h1~h6 p ul ol li  br hr\n</code></pre>\n<p><strong>特性:</strong></p>\n<ol>\n<li>display:block</li>\n<li>占父级的一行</li>\n<li>可以嵌套块标签和行标签 (p 标签只能嵌套行标签)</li>\n<li>居中：给<strong>本身</strong>加 margin: 0 auto</li>\n<li>可以设置宽高，不设置高度时，由内容撑开</li>\n</ol>\n</li>\n<li>\n<p>行标签</p>\n</li>\n</ul>\n<pre><code>span a img i  b sub sup input  \n</code></pre>\n<p><strong>特性</strong></p>\n<ol>\n<li>display:inline</li>\n<li>多个行标签可在一行显示</li>\n<li>不能设置宽高，默认由内容撑开</li>\n<li>行标签可以嵌套行标签</li>\n<li>居中：给父标签加 : text-align:center</li>\n<li>垂直方向 margin,padding 失效</li>\n</ol>\n<ul>\n<li>表单</li>\n</ul>\n<pre><code>form tbody  label input select textarea \n</code></pre>\n<ul>\n<li>表格</li>\n</ul>\n<pre><code>table tr td th  \n</code></pre>\n<h1 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h1>\n<ul>\n<li><strong>基本选择器</strong></li>\n</ul>\n<ol>\n<li>id 选择器</li>\n<li>类选择器</li>\n<li>标签选择器</li>\n<li>通配符选择器</li>\n</ol>\n<blockquote>\n<p>优先级:<br />\n 继承 &lt; 通配符 &lt; 标签选择器 &lt; 类选择器 &lt; ID 选择器 &lt; 行内样式 &lt;　!important</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>组合选择器</strong></p>\n<p>1. 群组选择器<br />\n 2. 后代选择器</p>\n</li>\n</ul>\n<h1 id=\"布局\"><a class=\"anchor\" href=\"#布局\">#</a> 布局</h1>\n<h3 id=\"盒模型\"><a class=\"anchor\" href=\"#盒模型\">#</a> 盒模型</h3>\n<ul>\n<li>border</li>\n<li>margin  : 垂直方向合并问题</li>\n<li>padding</li>\n<li>box-sizing : border-box</li>\n</ul>\n<p><strong>兄弟关系用 margin, 父子关系用 padding</strong></p>\n<p>### 浮动</p>\n<blockquote>\n<p>浮动最早是解决文字环绕问题，现在一般用来做左右布局使用，使用时注意清浮动.</p>\n</blockquote>\n<p><strong>清浮动: overflow : hidden</strong></p>\n<p><strong>浮动元素的特性</strong></p>\n<blockquote></blockquote>\n<ol>\n<li>浮动元素不占文档流</li>\n<li>设置成浮动后不再具有行块标签的特性，称为浮动元素</li>\n<li>浮动元素可以设置宽高，默认由内容撑开</li>\n</ol>\n<p><strong>注意：浮动元素的兄弟标签都要为浮动</strong></p>\n<h3 id=\"定位\"><a class=\"anchor\" href=\"#定位\">#</a> 定位</h3>\n<ul>\n<li>\n<p><strong>static</strong> 默认值</p>\n</li>\n<li>\n<p><strong>fixed</strong> 固定定位</p>\n<p>特性:</p>\n<ol>\n<li>相对于浏览器定位</li>\n<li>不占文档流</li>\n<li>不再是行块标签，成为定位元素</li>\n<li>可以设置宽高，由内容撑开</li>\n<li>一般用作导航 / 导航弹出框等</li>\n</ol>\n</li>\n<li>\n<p><strong>relative</strong> 相对定位</p>\n<p>特性:</p>\n<ol>\n<li>相对于自身定位</li>\n<li>占文档流</li>\n<li>不改变标签本身特性</li>\n<li>一般用来做微调或者是绝对定位的父级</li>\n</ol>\n</li>\n<li>\n<p><strong>absolute</strong> 绝对定位</p>\n</li>\n</ul>\n<p>特性:</p>\n<ol>\n<li>相对于最近的定位父级 (从父标签往外找) , 如果没有定位父级，相对于浏览器定位<br />\n 2. 不占文档流<br />\n 3. 不再是行块标签，成为定位元素</li>\n</ol>\n<pre><code>**top / left / right / bottom / z-index :只能和定位配合使用**  \n**定位居中**\n</code></pre>\n<h1 id=\"css样式\"><a class=\"anchor\" href=\"#css样式\">#</a> css 样式</h1>\n<h3 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h3>\n<ul>\n<li>background</li>\n<li>background-image</li>\n<li>background-color</li>\n<li>background-size: 水平 垂直</li>\n<li>background-repeat</li>\n<li>background-position</li>\n<li>background-clip</li>\n</ul>\n<h3 id=\"字体\"><a class=\"anchor\" href=\"#字体\">#</a> 字体</h3>\n<ul>\n<li>font-size</li>\n<li>font-famliy</li>\n<li>font-style</li>\n<li>font-weight</li>\n<li>font-height</li>\n<li>line-height</li>\n<li>word-spacing</li>\n<li>letter-spacing</li>\n<li>text-decoration  (下划线等)</li>\n<li>text-align</li>\n<li>text-shadow</li>\n<li>color</li>\n</ul>\n<h3 id=\"杂七杂八\"><a class=\"anchor\" href=\"#杂七杂八\">#</a> 杂七杂八</h3>\n<ul>\n<li>border-radius</li>\n<li>list-style</li>\n<li>cursor</li>\n<li>vertical-align</li>\n<li>box-shadow</li>\n<li>box-sizing</li>\n<li>overflow</li>\n<li>outline (input 点击后的边框)</li>\n<li>max-width</li>\n<li>min-width</li>\n</ul>\n<h3 id=\"透明度\"><a class=\"anchor\" href=\"#透明度\">#</a> 透明度</h3>\n<ul>\n<li>opcity</li>\n<li>filter : alpha () -- 适配 IE</li>\n<li>rgba</li>\n</ul>\n<h3 id=\"隐藏\"><a class=\"anchor\" href=\"#隐藏\">#</a> 隐藏</h3>\n<ul>\n<li>display: none ; 不占文档流</li>\n<li>visibility : hidden ; 占文档流</li>\n<li>透明度为 0</li>\n</ul>\n<h3 id=\"颜色值\"><a class=\"anchor\" href=\"#颜色值\">#</a> 颜色值</h3>\n<ul>\n<li>单词</li>\n<li>rgb</li>\n<li>rgba</li>\n<li>十六进制</li>\n</ul>\n<h3 id=\"单位\"><a class=\"anchor\" href=\"#单位\">#</a> 单位</h3>\n<ul>\n<li>px</li>\n<li>em</li>\n<li>rem</li>\n<li>deg</li>\n</ul>\n<h1 id=\"h5新增标签和选择器\"><a class=\"anchor\" href=\"#h5新增标签和选择器\">#</a> H5 新增标签和选择器</h1>\n<h3 id=\"新增标签\"><a class=\"anchor\" href=\"#新增标签\">#</a> 新增标签</h3>\n<p>audio \tvideo\t canvas<br />\nheader footer nav  main.....</p>\n<h3 id=\"选择器-2\"><a class=\"anchor\" href=\"#选择器-2\">#</a> 选择器</h3>\n<p>属性选择器</p>\n<p>伪类选择器</p>\n<h1 id=\"过渡2d-3d变换动画\"><a class=\"anchor\" href=\"#过渡2d-3d变换动画\">#</a> 过渡 / 2D 3D 变换 / 动画</h1>\n<h3 id=\"过渡-transition\"><a class=\"anchor\" href=\"#过渡-transition\">#</a> 过渡   transition</h3>\n<p><strong>常用 : transition all 1s liner (匀速) ;</strong></p>\n<h3 id=\"2d-变换-transform\"><a class=\"anchor\" href=\"#2d-变换-transform\">#</a> 2D 变换 transform</h3>\n<ul>\n<li>transform : translate();</li>\n<li>transform : scale();</li>\n<li>transform: rotate(..deg);</li>\n<li>transform;skew(..deg);</li>\n<li>transform-orgin: 基准点</li>\n</ul>\n<h3 id=\"3d-变换-开3d-景深\"><a class=\"anchor\" href=\"#3d-变换-开3d-景深\">#</a> 3D 变换  -&gt; 开 3D 景深</h3>\n<h3 id=\"动画-animation\"><a class=\"anchor\" href=\"#动画-animation\">#</a> 动画  animation</h3>\n<p><strong>定义动画效果 @keyframes</strong></p>\n<p>** 动画库 : animate.css 使用方式两种 **</p>\n<pre><code>\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/animate.css&quot;/&gt;\n\n&lt;!--第一种--&gt;\n&lt;style type=&quot;text/css&quot;&gt;\n\tanimation: heartBeat  3s;\n&lt;/style&gt;\n\n&lt;!--第二种  !!!class中记得加animated!!!--&gt;\n&lt;div class=&quot;animated heartBeat&quot;&gt;&lt;/div&gt;\n\n</code></pre>\n<h1 id=\"响应式布局\"><a class=\"anchor\" href=\"#响应式布局\">#</a> 响应式布局</h1>\n<blockquote>\n<p>更适用于移动端，来对不同的屏幕做适配，PC 端使用的话，页面不会太复杂</p>\n</blockquote>\n<p><strong>移动端布局，必须添加 viewport</strong></p>\n<h3 id=\"流式布局百分比布局\"><a class=\"anchor\" href=\"#流式布局百分比布局\">#</a> 流式布局 / 百分比布局</h3>\n<ol>\n<li>\n<p>宽度：本身宽度 / 父级的宽度</p>\n</li>\n<li>\n<p>高度：本身高度 / 父级的高度</p>\n</li>\n<li>\n<p>定位值 :</p>\n<p>纵向定位 (top bottom) / 定位父级的高度<br />\n横向定位 (left right) / 定位父级的宽度</p>\n</li>\n<li>\n<p>盒模型 (margin padding)</p>\n<p>盒模型纵向  纵向值 / 父级的宽度盒模型横向<br />\n横向值 / 父级的宽度？: 多数情况高度由文档流撑开</p>\n</li>\n</ol>\n<h3 id=\"媒体查询\"><a class=\"anchor\" href=\"#媒体查询\">#</a> 媒体查询</h3>\n<p>@media only screen and (min-width:980px )<br />\n@media only screen and (max-width:600px )<br />\n@media only screen and (min-width: 700px) and (max-width: 800px)</p>\n<h1 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h1>\n<h3 id=\"字体图标\"><a class=\"anchor\" href=\"#字体图标\">#</a> 字体图标</h3>\n<h3 id=\"滑动门\"><a class=\"anchor\" href=\"#滑动门\">#</a> 滑动门</h3>\n<h3 id=\"精灵图雪碧图-http\"><a class=\"anchor\" href=\"#精灵图雪碧图-http\">#</a> 精灵图 / 雪碧图 [http]</h3>\n<h3 id=\"hover效果\"><a class=\"anchor\" href=\"#hover效果\">#</a> hover 效果</h3>\n<h3 id=\"锚点\"><a class=\"anchor\" href=\"#锚点\">#</a> 锚点</h3>\n<h3 id=\"线性渐变-径向渐变\"><a class=\"anchor\" href=\"#线性渐变-径向渐变\">#</a> 线性渐变 径向渐变</h3>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/h5-xin-zeng/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/h5-xin-zeng/",
            "title": "H5新增内容总结",
            "date_published": "2023-03-08T11:32:40.236Z",
            "content_html": "<p>## 新增标签</p>\n<p>### 音频标签 - audio</p>\n<p>可以设置宽、高<br />\n支持文件格式：mp3 wav ogg<br />\n<strong>audio  中可以放置文本，在浏览器不支持此标签时显示。可以插入背景图</strong></p>\n<pre><code>&lt;audio &quot; src=&quot;source/群星 - 大力哥 浑身难受 Rap.mp3&quot;   \n   autoplay=&quot;autoplay&quot;   \n   controls=&quot;controls&quot; \n   loop=&quot;loop&quot;\n   preload=&quot;auto&quot;&gt;\t  \n</code></pre>\n<p>### 视频标签 video</p>\n<pre><code class=\"language-&lt;video\"> autoplay=&quot;autoplay&quot;  \n  muted=&quot;muted&quot; //静音   \n  width=&quot;400&quot;   \n  height=&quot;600&quot;   \n  controls=&quot;&quot;   \n  poster=&quot;添加图片&quot;&gt;  \n  &lt;/video&gt;\n\t\t\n\t\t&lt;video width=&quot;800&quot; height=&quot;&quot;&gt;\n\t\t\t自动匹配可用的文件格式\n\t\t\t&lt;source src=&quot;myvideo.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/source&gt;\n\t\t\t&lt;source src=&quot;myvideo.ogv&quot; type=&quot;video/ogg&quot;&gt;&lt;/source&gt;\n\t\t\t&lt;source src=&quot;myvideo.webm&quot; type=&quot;video/webm&quot;&gt;&lt;/source&gt;\t\n\t\t\t&lt;object width=&quot;&quot; height=&quot;&quot; type=&quot;application/x-shockwave-flash&quot; data=&quot;myvideo.swf&quot;&gt;\n\t\t\t\t&lt;param name=&quot;movie&quot; value=&quot;myvideo.swf&quot; /&gt;\n\t\t\t\t&lt;param name=&quot;flashvars&quot; value=&quot;autostart=true&amp;amp;file=myvideo.swf&quot; /&gt;\n\t\t\t&lt;/object&gt;\n\t\t\t当前浏览器不支持 video直接播放，点击这里下载视频： &lt;a href=&quot;myvideo.webm&quot;&gt;下载视频&lt;/a&gt;\n\t\t&lt;/video&gt;\n</code></pre>\n<p>###body 内可代替 div 的标签</p>\n<pre><code>  &lt;!--相当于&lt;div class=&quot;nav&quot;&gt;&lt;/div&gt;--&gt;\n\t\t&lt;nav&gt;用于作为导航&lt;/nav&gt;\n\t\t\n\t\t&lt;!--header内不能嵌套header标签--&gt;\n\t\t&lt;header&gt;用来定义文档或文档一部分区域的头部&lt;/header&gt;\n\t\t\n\t\t&lt;section&gt;用于划分区域&lt;/section&gt;\n\t\t\n\t\t\n\t\t&lt;!--一个页面只能出现一个main元素\n\t\t     不能嵌套在header footer article aside内部\n\t\t--&gt;\n\t\t&lt;main&gt;页面主体部分&lt;/main&gt;\n\t\t\n\t\t&lt;aside&gt;可用作文章的侧栏&lt;/aside&gt;\n\t\t\n\t\t\n\t\t&lt;!--画布 h5新增--&gt;\n\t\t&lt;canvas&gt;666666&lt;/canvas&gt;\n\t\t\n\t\t&lt;button&gt;&lt;/button&gt;\n</code></pre>\n<p>## 新增选择器<br />\n ### 属性选择器<br />\n #### 语法例:\t标签后 [] 中接属性，选择包含特定属性的元素<br />\n #### 无优先级，看执行顺序</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n   a[href]&#123;\n   \t\t&#125;     []内  \n   \t\tp[class]&#123;\n\t\t\t\tcolor: deepskyblue;\n\t\t\t&#125;\n\t\t\t\n\ta[href=&quot;####&quot;]&#123;\n\t\t\t\tcolor: gray;\n\t\t\t&#125;\n&lt;/style&gt;\n\t&lt;body&gt;\n\t\t&lt;!--a[href=&quot;#&quot;]&#123;&#125;--&gt;\n\t\t&lt;a href=&quot;#&quot; class=&quot;title&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;p class=&quot;title&quot;&gt;中午吃点啥&lt;/p&gt;\n\t\t&lt;p&gt;我也不知道&lt;/p&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;####&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a href=&quot;#&quot;&gt;超链接&lt;/a&gt;\n\t\t&lt;a &gt;cc&lt;/a&gt;\n\t&lt;/body&gt;\n</code></pre>\n<p>### 结构选择器<br />\n 1. 子代元素选择<br />\n div&gt;span<br />\n<strong> 只能选择儿子辈标签，不能跨级选择</strong></p>\n<p>2. 紧邻元素选择<br />\n span+a<br />\n<strong> 对紧接着的 span 下面的第一个 a 标签进行选择，其余的同类标签不会选中</strong></p>\n<p>### 伪类选择器<br />\n:not  &quot;反向&quot; 选择<br />\n:not (.color)</p>\n<pre><code>/*未设置成.color的*/\n\t\t\t:not(.color)&#123;\n\t\t\t\tcolor: blue;\n\t\t\t&#125;\n\t\t\t\n\t\t\t:not(div .color)&#123;\n\t\t\t\tcolor: goldenrod;\n\t\t\t&#125;\n</code></pre>\n<p>:nth- &quot;序列&quot; 选择<br />\n可以设置 n 为负值，eg:nth-of-type (-n+5)--n<br />\n 从 0 开始取值，只能选中前 5 个子代元素</p>\n<pre><code> /*所有父标签中的第二个标签,如果是p标签,选择器可以选中*/\n\t\t\t/*第二个不是p标签则无效*/\n\t\t\tp:nth-child(2)&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\t&lt;!--倒序查找选择--&gt;\n\t\t\tp:nth-last-child(4)&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\tp:nth-of-type(2)&#123;\n\t\t\t\tcolor: blue;\n\t\t\t&#125;\n\t\t\t \n\t\t\t/*n从0开始*/\n\t\t\tp:nth-of-type(2n+1)&#123;\n\t\t\t\tcolor: gray;\n\t\t\t&#125;\n\t\t\t\n\t\t\t/*倒数第几个*/\n\t\t\tp:nth-last-of-type(1)&#123;\n\t\t\t\tcolor: deepskyblue;\n\t\t\t&#125;\n</code></pre>\n<pre><code>\t\t\tp:first-of-type&#123;\n\t\t\t\tcolor: red;\n\t\t\t&#125;\n\t\t\tp:last-of-type&#123;\n\t\t\t\tcolor: greenyellow;\n\t\t\t&#125;\n\t\t\t\n\t\t\t/*所有父标签中p标签只有一个*/\n\t\t\tp:only-of-type&#123;\n\t\t\t\tcolor: red; \n\t\t\t&#125;\n\t\t\t\n\t\t\t/*所有父标签中只有一个子标签,并且是p标签*/\n\t\t\tp:only-child&#123;\n\t\t\t\tcolor: skyblue;\n\t\t\t&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/dom-cao-zuo/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/dom-cao-zuo/",
            "title": "DOM操作",
            "date_published": "2023-03-08T11:32:40.224Z",
            "content_html": "<h3 id=\"获取元素\"><a class=\"anchor\" href=\"#获取元素\">#</a> 获取元素</h3>\n<pre><code>&lt;div id=&quot;name&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n\tvar oName = document.getElementById(&quot;name&quot;);\n\toName.onclick = function () &#123;\n\t\toName.style.backgroundColor = &quot;red&quot;;\n\t\toName.className = &quot;name&quot;;\n\t&#125;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>.onclick: 点击事件，可以给任何标签绑定，点击该标签时才会执行 function 中的代码</p>\n<p>.style.backgroundColor: 设置行间样式，background-color 等多个单词的形式，在 js 中变成驼峰结构</p>\n<p>.className: 设置或更改类名 (除类名外其他属性名都和标签中的一致)</p>\n</blockquote>\n<h3 id=\"innerhtml\"><a class=\"anchor\" href=\"#innerhtml\">#</a> innerHTML</h3>\n<pre><code>\t&lt;div id=&quot;name&quot;&gt;&lt;/div&gt;\n    &lt;script&gt;\n        var oName = document.getElementById(&quot;name&quot;);\n\n        oName.onclick = function () &#123;\n            var str = oName.innerHTML;\n            console.log(str);\n\n            // 清空标签里的内容\n            oName.innerHTML = &quot;&quot;;\n        &#125;\n\n    &lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>若获取的标签是双标签，想获取标签间的内容可以用 innerHTML 属性，innerHTML 指标签中间的所有内容包括其他标签.</p>\n</blockquote>\n<h3 id=\"文档写入\"><a class=\"anchor\" href=\"#文档写入\">#</a> 文档写入</h3>\n<pre><code>    &lt;script&gt;\n        document.write(&quot;123&quot;);\n        document.write(&quot;&lt;div class=\\&quot;name\\&quot;&gt;\\\\&lt;/div&gt;&quot;);\n    &lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>document.write 中写的所有内容都会显示在 HTML 中</p>\n<p>若引号中还需要加引号，可以用单引号代替或使用转义字符：(\\)</p>\n</blockquote>\n<h3 id=\"tagname\"><a class=\"anchor\" href=\"#tagname\">#</a> tagName</h3>\n<pre><code>var oDivs = document.getElementsByTagName(&quot;div&quot;);\n</code></pre>\n<blockquote>\n<p>获取页面中所有 div</p>\n<p>oDivs 不是数组，但可以当成数组操作获取内部元素</p>\n</blockquote>\n<pre><code>var oStudent = document.getElementById(&quot;student&quot;);\nvar oLink = oStudent.getElementsByTagName(&quot;a&quot;);\n</code></pre>\n<blockquote>\n<p>获取 id 是 student 标签内部的所有 a 标签</p>\n</blockquote>\n<h3 id=\"鼠标移入\"><a class=\"anchor\" href=\"#鼠标移入\">#</a> 鼠标移入</h3>\n<p><strong>onmouseover</strong></p>\n<pre><code>        var oDiv1 = document.getElementById(&quot;div1&quot;);\n        \n        oDiv1.onmouseover = function () &#123;\n            console.log(&quot;鼠标移入&quot;);\n        &#125;\n</code></pre>\n<h3 id=\"鼠标移出\"><a class=\"anchor\" href=\"#鼠标移出\">#</a> 鼠标移出</h3>\n<p><strong>onmouseout</strong></p>\n<pre><code>        var oDiv1 = document.getElementById(&quot;div1&quot;);\n\n        oDiv1.onmouseout = function () &#123;\n            console.log(&quot;鼠标移出&quot;);\n        &#125;\n</code></pre>\n<h3 id=\"获取dom节点\"><a class=\"anchor\" href=\"#获取dom节点\">#</a> 获取 DOM 节点</h3>\n<pre><code>        // 准备代码\n        var oAll = document.getElementById(&quot;all&quot;);\n        var oDivs = oAll.getElementsByTagName(&quot;div&quot;);\n</code></pre>\n<h4 id=\"获取子标签\"><a class=\"anchor\" href=\"#获取子标签\">#</a> 获取子标签</h4>\n<pre><code>oAll.children// 获取子标签\n</code></pre>\n<h4 id=\"创建元素\"><a class=\"anchor\" href=\"#创建元素\">#</a> 创建元素</h4>\n<pre><code>var newDiv = document.createElement(&quot;div&quot;);\n// js创建的标签元素和从页面获取的一样可以设置样式和内容等\nnewDiv.innerHTML = &quot;hah&quot;;\nnewDiv.className = &quot;name&quot;;\n</code></pre>\n<h4 id=\"在某标签末尾添加元素\"><a class=\"anchor\" href=\"#在某标签末尾添加元素\">#</a> 在某标签末尾添加元素</h4>\n<pre><code class=\"language-0\">oAll.appendChild(newDiv);\n</code></pre>\n<h4 id=\"在指定位置添加元素\"><a class=\"anchor\" href=\"#在指定位置添加元素\">#</a> 在指定位置添加元素</h4>\n<pre><code>oAll.insertBefore(新元素A, 子元素B);\n</code></pre>\n<h4 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素</h4>\n<ul>\n<li>父标签删除子标签</li>\n</ul>\n<pre><code>父标签.removeChild(子标签)\n</code></pre>\n<ul>\n<li>自身删除</li>\n</ul>\n<pre><code>newDiv.remove();\n</code></pre>\n<h4 id=\"替换\"><a class=\"anchor\" href=\"#替换\">#</a> 替换</h4>\n<pre><code>oAll.replaceChild(新标签, 被替换的子标签)\n\nvar theA = document.createElement(&quot;a&quot;);\ntheA.href = &quot;#&quot;;// 没有设置href属性时,a标签没有默认样式\noAll.replaceChild(theA, oAll.children[0]);\n</code></pre>\n<h4 id=\"获取父节点\"><a class=\"anchor\" href=\"#获取父节点\">#</a> 获取父节点</h4>\n<pre><code>theA.parentNode\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/qian-duan/js-h5/css-dong-tai-xiao-guo/",
            "url": "http://adamshang2333.github.io/qian-duan/js-h5/css-dong-tai-xiao-guo/",
            "title": "css动态效果总结",
            "date_published": "2023-03-08T11:32:40.216Z",
            "content_html": "<p>##transition (过渡样式)<br />\n### 可设定过渡的时间 延时时间 速度曲线 指定某个过渡的元素<br />\n #### 过渡时间  transition-duration: 1s;<br />\n#### 过渡延时  transition-delay: 1s;\t\t<br />\n#### 过渡效果  transition-timing-function: cubic-bezier (0, 0, 0, 1.97) ;<br />\n 常用的预设过渡效果:ease ease-in ease-inout ease-out<br />\n### 过渡常用默认样式:transition:all 1s</p>\n<p>##transform (变换)<br />\n### 二维效果<br />\n transform: translate    / 平移 /</p>\n<blockquote>\n<p>移动参照系为自身 使用 - 50% 可做居中效果<br />\n可分别设置 x y 轴的平移距离  亦可写成复合 (20px,20px)<br />\n 平移数值可以为负值</p>\n</blockquote>\n<p>transform: rotate  / 旋转 /</p>\n<blockquote>\n<p>不设置时默认为以 z 轴旋转<br />\n可分别设置 x y 轴旋转<br />\n旋转数值可以为负值</p>\n</blockquote>\n<p>transform: scale  / 缩放 /</p>\n<blockquote>\n<p>默认以缩放标签的中心做缩放基点<br />\n可分别设置 x y 轴缩放，亦可写成复合 (2,2)<br />\n 缩放数值可以为负值</p>\n</blockquote>\n<p>transform: skew  / 倾斜 /</p>\n<blockquote>\n<p>可分别设置 x y 轴倾斜，亦可写成复合 (30deg,30deg)<br />\n 倾斜数值可以为负值</p>\n</blockquote>\n<p>#### 二维变换组合</p>\n<blockquote>\n<p>transform 可以将多个变换结合使用，但是要注意变换顺序！！</p>\n</blockquote>\n<pre><code>div:hover&#123;\n\tbackground-color: red;\n\t/*执行顺序会对变换效果造成影响 即先转 再平移 放大;平移 旋转 放大*/\n\ttransform: rotate(360deg) scale(2) translateX(100px) ;\n\t&#125;\n</code></pre>\n<p>#### 变换基准点自定义<br />\n transform-origin: left top;</p>\n<blockquote>\n<p>基准点可设置特定位置或者具体数值<br />\n x 轴:left center right<br />\ny 轴:top center bottom</p>\n</blockquote>\n<p>### 三维效果</p>\n<blockquote>\n<p>三维效果需要在父级标签设置 &quot;3d 盒子&quot;, 景深<br />\n使用时，与二维基本一致。可设置负方向数值</p>\n</blockquote>\n<pre><code>\t\t.all&#123;\n\t\t\t\twidth: 500px;\n\t\t\t\theight: 500px;\n\t\t\t\tborder: 1px solid black;\n\t\t\t\tmargin: 100px auto;\n\t\t\t\t/*在父级设置3D盒子*/\n\t\t\t\ttransform-style: preserve-3d ;\n\t\t\t\t\n\t\t\t\t/*景深 */\n\t\t\t\tperspective: 1000px;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://adamshang2333.github.io/hou-duan/ci-cd/k8s/",
            "url": "http://adamshang2333.github.io/hou-duan/ci-cd/k8s/",
            "title": "Kubernetes",
            "date_published": "2023-03-07T11:23:00.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h2 id=\"什么是k8s\"><a class=\"anchor\" href=\"#什么是k8s\">#</a> 什么是 K8s</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcv\">Kubernetes</span> 也称为 K8s，是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态，其服务、支持和工具的使用范围相当广泛。</p>\n<h2 id=\"k8s的功能特性\"><a class=\"anchor\" href=\"#k8s的功能特性\">#</a> k8s 的功能特性</h2>\n<h4 id=\"自动化上线和回滚\"><a class=\"anchor\" href=\"#自动化上线和回滚\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2RlcGxveW1lbnQv\">自动化上线和回滚</span></h4>\n<p>Kubernetes 会分步骤地将针对应用或其配置的更改上线，同时监视应用程序运行状况以确保你不会同时终止所有实例。如果出现问题，Kubernetes 会为你回滚所作更改。你应该充分利用不断成长的部署方案生态系统。</p>\n<h4 id=\"服务发现与负载均衡\"><a class=\"anchor\" href=\"#服务发现与负载均衡\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==\">服务发现与负载均衡</span></h4>\n<p>无需修改你的应用程序去使用陌生的服务发现机制。Kubernetes 为容器提供了自己的 IP 地址和一个 DNS 名称，并且可以在它们之间实现负载均衡。</p>\n<h4 id=\"自我修复\"><a class=\"anchor\" href=\"#自我修复\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL3JlcGxpY2FzZXQvI3JlcGxpY2F0aW9uY29udHJvbGxlci0lRTUlQTYlODIlRTQlQkQlOTUlRTUlQjclQTUlRTQlQkQlOUM=\">自我修复</span></h4>\n<p>重新启动失败的容器，在节点死亡时替换并重新调度容器， 杀死不响应用户定义的健康检查的容器， 并且在它们准备好服务之前不会将它们公布给客户端。</p>\n<h4 id=\"存储编排\"><a class=\"anchor\" href=\"#存储编排\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc3RvcmFnZS9wZXJzaXN0ZW50LXZvbHVtZXMv\">存储编排</span></h4>\n<p>自动挂载所选存储系统，包括本地存储、诸如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9wcm9kdWN0cy9zdG9yYWdlLw==\">AWS</span> 或 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2Uv\">GCP</span> 之类公有云提供商所提供的存储或者诸如 NFS、iSCSI、Ceph、Cinder 这类网络存储系统。</p>\n<h4 id=\"secret-和配置管理\"><a class=\"anchor\" href=\"#secret-和配置管理\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9zZWNyZXQv\">Secret 和配置管理</span></h4>\n<p>部署和更新 Secret 和应用程序的配置而不必重新构建容器镜像， 且不必将软件堆栈配置中的秘密信息暴露出来。</p>\n<h4 id=\"自动装箱\"><a class=\"anchor\" href=\"#自动装箱\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9tYW5hZ2UtcmVzb3VyY2VzLWNvbnRhaW5lcnMv\">自动装箱</span></h4>\n<p>根据资源需求和其他限制自动放置容器，同时避免影响可用性。 将关键性的和尽力而为性质的工作负载进行混合放置，以提高资源利用率并节省更多资源。</p>\n<h4 id=\"批量执行\"><a class=\"anchor\" href=\"#批量执行\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzL2pvYi8=\">批量执行</span></h4>\n<p>除了服务之外，Kubernetes 还可以管理你的批处理和 CI 工作负载，在期望时替换掉失效的容器。</p>\n<h4 id=\"ipv4ipv6-双协议栈\"><a class=\"anchor\" href=\"#ipv4ipv6-双协议栈\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9kdWFsLXN0YWNrLw==\">IPv4/IPv6 双协议栈</span></h4>\n<p>为 Pod 和 Service 分配 IPv4 和 IPv6 地址</p>\n<h4 id=\"水平扩缩\"><a class=\"anchor\" href=\"#水平扩缩\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvcnVuLWFwcGxpY2F0aW9uL2hvcml6b250YWwtcG9kLWF1dG9zY2FsZS8=\">水平扩缩</span></h4>\n<p>使用一个简单的命令、一个 UI 或基于 CPU 使用情况自动对应用程序进行扩缩。</p>\n<h4 id=\"为扩展性设计\"><a class=\"anchor\" href=\"#为扩展性设计\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvZXh0ZW5kLWt1YmVybmV0ZXMv\">为扩展性设计</span></h4>\n<p>无需更改上游源码即可扩展你的 Kubernetes 集群。</p>\n<h1 id=\"k8s的集群架构和组件\"><a class=\"anchor\" href=\"#k8s的集群架构和组件\">#</a> K8s 的集群架构和组件</h1>\n<h2 id=\"集群架构\"><a class=\"anchor\" href=\"#集群架构\">#</a> 集群架构</h2>\n<p>一个正常运行的 Kubernetes 集群可以从逻辑上分为两个部分：</p>\n<ul>\n<li><strong>Control Plane</strong> (控制平面，可集群)\n<ul>\n<li>负责维护集群的预期状态，例如运行哪个应用以及使用哪个容器镜像</li>\n<li>又可以称为主控节点 / Master 节点</li>\n</ul>\n</li>\n<li><strong>Node 集群</strong> (计算设备）\n<ul>\n<li>负责应用和工作负载的实际运行</li>\n<li>每个 Node 节点都有自己的 Linux 环境，可以是物理机也可以是虚拟机。</li>\n<li>每个节点都运行由若干容器组成的容器集 (docker containers)</li>\n</ul>\n</li>\n</ul>\n<p>K8s 官方架构图:</p>\n<p><img data-src=\"https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg\" alt=\"\" /></p>\n<blockquote>\n<p>从官方架构图中，可以发现在 Control Plane 中，组件是可以有多个实例的</p>\n<blockquote>\n<p>上图中除了 etcd 组件外 其它组件都是以集群形式搭建</p>\n</blockquote>\n</blockquote>\n<p>更详细的架构图如下:</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/856154/201910/856154-20191023003358108-1816205812.png\" alt=\"\" /></p>\n<blockquote>\n<p>不难发现，Node 节点中是包含了多个 Pod 的，每一个 Pod 单独运行一个 docker 的 container 组</p>\n</blockquote>\n<h2 id=\"集群组件\"><a class=\"anchor\" href=\"#集群组件\">#</a> 集群组件</h2>\n<h3 id=\"master组件\"><a class=\"anchor\" href=\"#master组件\">#</a> Master 组件</h3>\n<blockquote>\n<p>控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件，例如当不满足部署的  <code>replicas</code>  字段时， 要启动新的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv\">pod</span>）。</p>\n</blockquote>\n<blockquote>\n<p>控制平面组件可以在集群中的任何节点上运行。 然而，为了简单起见，设置脚本通常会在同一个计算机上启动所有控制平面组件， 并且不会在此计算机上运行用户容器。</p>\n</blockquote>\n<h4 id=\"1-api-kube-apiserver\"><a class=\"anchor\" href=\"#1-api-kube-apiserver\">#</a> 1. api (kube-apiserver)</h4>\n<p>该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。</p>\n<p>Kubernetes API 服务器的主要实现是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1hcGlzZXJ2ZXIv\">kube-apiserver</span>。  <code>kube-apiserver</code>  设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 可以通过运行  <code>kube-apiserver</code>  的多个实例，在这些实例之间平衡流量。</p>\n<blockquote>\n<p>apisever 可以理解为整个 k8s 集群中，Master 节点和 Nodes 通信的桥梁</p>\n</blockquote>\n<h4 id=\"2-etcd\"><a class=\"anchor\" href=\"#2-etcd\">#</a> 2. etcd</h4>\n<p>一致且高可用的 <code>键值存储</code> ，用作 <strong>Kubernetes 所有集群数据的后台数据库。</strong></p>\n<p>如果你的 Kubernetes 集群使用 etcd 作为其后台数据库， 请确保你针对这些数据有一份 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvdGFza3MvYWRtaW5pc3Rlci1jbHVzdGVyL2NvbmZpZ3VyZS11cGdyYWRlLWV0Y2QvI2JhY2tpbmctdXAtYW4tZXRjZC1jbHVzdGVy\">备份</span>计划。</p>\n<h4 id=\"3-kube-scheduler\"><a class=\"anchor\" href=\"#3-kube-scheduler\">#</a> 3. kube-scheduler</h4>\n<p><code>kube-scheduler</code>  是 K8s 的<strong>调度器，</strong> 负责监视新创建的、未指定运行<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==\">节点（node）</span>的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv\">Pods</span>， 并选择节点来让 Pod 在上面运行。</p>\n<p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p>\n<h4 id=\"4-c-m-kube-controller-manager\"><a class=\"anchor\" href=\"#4-c-m-kube-controller-manager\">#</a> 4. c-m (kube-controller-manager)</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1jb250cm9sbGVyLW1hbmFnZXIv\">kube-controller-manager</span> 负责运行<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL2NvbnRyb2xsZXIv\"> controller (控制器)</span> 进程。</p>\n<blockquote>\n<p><code>controller</code>  通过 <code>apiserver</code>  监控集群的公共状态，并致力于将当前状态转变为期望的状态.</p>\n<p>Kubernetes 内置一组 <code>controller</code> ，运行在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1jb250cm9sbGVyLW1hbmFnZXIv\">kube-controller-manager</span> 内。 这些内置的控制器提供了重要的核心功能，每个控制器管理集群状态的一个特定方面。</p>\n</blockquote>\n<p>从逻辑上讲， 每个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL2NvbnRyb2xsZXIv\">控制器</span>都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。</p>\n<p>这些控制器包括：</p>\n<ul>\n<li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li>\n<li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li>\n<li>端点分片控制器（EndpointSlice controller）：填充端点分片（EndpointSlice）对象（以提供 Service 和 Pod 之间的链接）。</li>\n<li>服务账号控制器（ServiceAccount controller）：为新的命名空间创建默认的服务账号（ServiceAccount）。</li>\n</ul>\n<h4 id=\"5-c-c-m-cloud-controller-manager\"><a class=\"anchor\" href=\"#5-c-c-m-cloud-controller-manager\">#</a> 5. c-c-m (cloud-controller-manager)</h4>\n<p>一个 Kubernetes <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2dsb3NzYXJ5Lz9hbGw9dHJ1ZSN0ZXJtLWNvbnRyb2wtcGxhbmU=\">控制平面</span>组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p>\n<p><code>cloud-controller-manager</code>  仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。</p>\n<p>与  <code>kube-controller-manager</code>  类似， <code>cloud-controller-manager</code>  将若干逻辑上独立的控制回路组合到同一个可执行文件中， 供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p>\n<p>下面的控制器都包含对云平台驱动的依赖：</p>\n<ul>\n<li>节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>\n<li>路由控制器（Route Controller）：用于在底层云基础架构中设置路由</li>\n<li>服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器</li>\n</ul>\n<h3 id=\"node组件\"><a class=\"anchor\" href=\"#node组件\">#</a> Node 组件</h3>\n<p>节点组件会在每个节点上运行，负责维护运行的 Pod 并提供 Kubernetes 运行环境。</p>\n<h4 id=\"1-kubelet\"><a class=\"anchor\" href=\"#1-kubelet\">#</a> 1. kubelet<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvY29tcG9uZW50cy8ja3ViZWxldA==\"> </span></h4>\n<p><code>kubelet</code>  会在集群中每个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==\">节点（node）</span>上运行。 它保证<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvb3ZlcnZpZXcvd2hhdC1pcy1rdWJlcm5ldGVzLyN3aHktY29udGFpbmVycw==\">容器（containers）</span>都运行在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMv\">Pod</span> 中。</p>\n<p>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p>\n<h4 id=\"2-kube-proxy\"><a class=\"anchor\" href=\"#2-kube-proxy\">#</a> 2. kube-proxy</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvcmVmZXJlbmNlL2NvbW1hbmQtbGluZS10b29scy1yZWZlcmVuY2Uva3ViZS1wcm94eS8=\">kube-proxy</span> 是集群中每个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvYXJjaGl0ZWN0dXJlL25vZGVzLw==\">节点（node）</span>上所运行的网络代理， 实现 Kubernetes <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poLWNuL2RvY3MvY29uY2VwdHMvc2VydmljZXMtbmV0d29ya2luZy9zZXJ2aWNlLw==\">服务（Service）</span> 概念的一部分。</p>\n<p>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p>\n<p>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p>\n<h4 id=\"3-容器运行时container-runtime\"><a class=\"anchor\" href=\"#3-容器运行时container-runtime\">#</a> 3. 容器运行时（Container Runtime）</h4>\n<p>容器运行环境是负责运行容器的软件。</p>\n<p>Kubernetes 支持许多容器运行环境，例如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb250YWluZXJkLmlvL2RvY3Mv\">containerd</span>、 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcmktby5pby8jd2hhdC1pcy1jcmktbw==\">CRI-O</span> 以及 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2t1YmVybmV0ZXMvY29tbXVuaXR5L2Jsb2IvbWFzdGVyL2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctbm9kZS9jb250YWluZXItcnVudGltZS1pbnRlcmZhY2UubWQ=\">Kubernetes CRI (容器运行环境接口)</span> 的其他任何实现。</p>\n<h2 id=\"插件addons\"><a class=\"anchor\" href=\"#插件addons\">#</a> 插件（Addons）</h2>\n",
            "tags": [
                "CI/CD - K8s",
                "K8s",
                "容器化"
            ]
        },
        {
            "id": "http://adamshang2333.github.io/qi-ta/markdown-yu-fa-zong-jie/",
            "url": "http://adamshang2333.github.io/qi-ta/markdown-yu-fa-zong-jie/",
            "title": "Markdown语法",
            "date_published": "2022-12-23T06:09:00.000Z",
            "content_html": "<h1 id=\"markdown-介绍\"><a class=\"anchor\" href=\"#markdown-介绍\">#</a> Markdown 介绍</h1>\n<h2 id=\"1-为什么使用-markdown\"><a class=\"anchor\" href=\"#1-为什么使用-markdown\">#</a> 1. 为什么使用 Markdown</h2>\n<p>俗话说 好记性不如烂笔头。平时对一些技术学习后，需要做总结和输出才容易慢慢形成自己的知识体系.<br />\nMarkdown 在内容写作上 有如下几个优点:</p>\n<ul>\n<li>语法简洁\n<ul>\n<li>基础语法很简单即可掌握，学习成本低</li>\n</ul>\n</li>\n<li>排版美观方便\n<ul>\n<li>Markdown 的排版简洁大方，甚至可以支持 html 标签，可以专心在内容上</li>\n</ul>\n</li>\n<li>支持的编辑器众多<br />\n - Markdown 使用者众多，有很多优秀的客户端和编辑器插件</li>\n<li>发布方便\n<ul>\n<li>可以很方便的导出为 PDF HTML 等格式，可方便的发布到各大博客平台或自己搭建的网站</li>\n<li>你甚至可以使用 pandoc 等转换任意格式，甚至生成 PPT!<br />\n###1.1 Markdown 的 MetaData<br />\n 在正文开始的时候，使用  <code>---</code>  包裹的部分，叫 <strong>Metadata</strong> (元数据)，可以扩展当前文档的一些属性。</li>\n</ul>\n</li>\n</ul>\n<p>简单的比如:</p>\n<pre><code>---\ntitle: 标题\ndate: 2019-11-15 12:30:18\nTag: 标签1 标签2\nsticky: true\ncover: assets/wallpaper-2572384.jpg\n# 或者写成\ncover: http://placehold.it/350x150.jpg\n---\n正文开始\n</code></pre>\n<p>可使用的 metaData 属性:</p>\n<ul>\n<li><strong>sticky</strong><br />\n 设置 sticky: true ，则该文章将显示在首页最上方的 置顶文章 列。</li>\n<li><strong>cover</strong><br />\n 文章的封面图片</li>\n<li></li>\n</ul>\n<h2 id=\"2-关于-markdown-的常用语法\"><a class=\"anchor\" href=\"#2-关于-markdown-的常用语法\">#</a> 2. 关于 Markdown 的常用语法</h2>\n<p>总结的大部分语法 均为通用的 Markdown 语法。但是结合笔者在使用的 Metion 编辑器 也会总结部分其特有的语法</p>\n<h3 id=\"21-标题\"><a class=\"anchor\" href=\"#21-标题\">#</a> 2.1 标题</h3>\n<p>使用  <code>#</code>  号 可表示 1~6 级标题</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n......\n######六级标题\n</code></pre>\n<p><strong>显示效果:</strong></p>\n<h1 id=\"一级标题\"><a class=\"anchor\" href=\"#一级标题\">#</a> 一级标题</h1>\n<h2 id=\"二级标题\"><a class=\"anchor\" href=\"#二级标题\">#</a> 二级标题</h2>\n<h3 id=\"三级标题\"><a class=\"anchor\" href=\"#三级标题\">#</a> 三级标题</h3>\n<h4 id=\"四级标题\"><a class=\"anchor\" href=\"#四级标题\">#</a> 四级标题</h4>\n<h5 id=\"五级标题\"><a class=\"anchor\" href=\"#五级标题\">#</a> 五级标题</h5>\n<p>###### 六级标题</p>\n<h3 id=\"22-文字排版\"><a class=\"anchor\" href=\"#22-文字排版\">#</a> 2.2 文字排版</h3>\n<p>####2.2.1 文字样式<br />\n常用的为文字<strong>加粗</strong>；<em>斜体</em>；<em><strong>加粗斜体</strong></em>；</p>\n<pre><code>*斜体文字*\n**粗体文字**\n***粗斜体文字***\n~~删除文字~~\n~~**删除加粗文字**~~\n~~***删除粗斜体文字***~~\n// 文字带下划线可以通过 html 标签实现\n&lt;u&gt;带下划线文本&lt;/u&gt;\n</code></pre>\n<p><strong>显示效果:</strong></p>\n<p><em>斜体文字</em><br />\n<strong>粗体文字</strong><br />\n<em><strong>粗斜体文字</strong></em><br />\n<s>删除文字</s><br />\n<s><strong>删除加粗文字</strong></s><br />\n<s><em><strong>删除粗斜体文字</strong></em></s><br />\n &lt;u&gt; 带下划线文本 &lt;/u&gt;</p>\n<h4 id=\"222-文字分隔\"><a class=\"anchor\" href=\"#222-文字分隔\">#</a> 2.2.2 文字分隔</h4>\n<p>文字的分隔线可以使用三个以上的 <code>-</code>  号表示，行内不能有其他文字内容，但是减号之间可以有空格存在</p>\n<pre><code>内容 1\n---\n内容 2\n\n内容 1\n- - -\n内容 2\n</code></pre>\n<p><strong>显示效果:</strong></p>\n<h2 id=\"内容-1\"><a class=\"anchor\" href=\"#内容-1\">#</a> 内容 1</h2>\n<p>内容 2</p>\n<h3 id=\"23-格式块符号\"><a class=\"anchor\" href=\"#23-格式块符号\">#</a> 2.3 格式块 &amp;&amp; 符号</h3>\n<h4 id=\"231-引用\"><a class=\"anchor\" href=\"#231-引用\">#</a> 2.3.1 引用</h4>\n<p>标识文章中引用了资料时，可以使用 <code>&gt;</code>  引用块来表示.<br />\n 引用块可以有多级嵌套结构</p>\n<pre><code>&gt; 引用内容\n&gt;&gt; 二级引用\n&gt;&gt;&gt; 三级引用\n\n</code></pre>\n<blockquote>\n<p>引用<br />\n 1.<br />\n2.</p>\n<blockquote>\n<p>二级引用</p>\n<blockquote>\n<p>三级引用<br />\n 1.<br />\n2.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"232-代码块\"><a class=\"anchor\" href=\"#232-代码块\">#</a> 2.3.2 代码块</h4>\n<p>代码块分为单行代码块 &amp;&amp; 多行代码块，使用 `(反引号) 来标识</p>\n<p>`单行代码块内容`</p>\n<p>多行代码块可以在反引号包裹的第一行注明代码语言，方便编辑器选择代码高亮效果<br />\n ``` 编程语言 (java/js 等)<br />\n 多行代码块内容<br />\n ```</p>\n<p><strong>显示效果:</strong><br />\n <code>单行代码块</code></p>\n<pre><code>多行代码块\n</code></pre>\n<h4 id=\"233-符号转义\"><a class=\"anchor\" href=\"#233-符号转义\">#</a> 2.3.3 符号转义</h4>\n<p>Markdown 语法依赖特定的某些符号标识，如果想在文章中展示特定符号，需要使用转义实现:</p>\n<ul>\n<li>使用 <code>\\</code>  反斜杠来避免 Markdown 解析</li>\n</ul>\n<ul>\n<li>使用 HTML 中的转义字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">显示结果</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:right\">输入字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">空格</td>\n<td style=\"text-align:right\"><code>&amp;nbsp;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于号</td>\n<td style=\"text-align:right\"><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于号</td>\n<td style=\"text-align:right\"><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≠</td>\n<td style=\"text-align:center\">不等于</td>\n<td style=\"text-align:right\"><code>&amp;ne;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≤</td>\n<td style=\"text-align:center\">小于等于</td>\n<td style=\"text-align:right\"><code>&amp;le;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">≥</td>\n<td style=\"text-align:center\">大于等于</td>\n<td style=\"text-align:right\"><code>&amp;ge;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:right\"><code>&amp;amp;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&quot;</td>\n<td style=\"text-align:center\">双引号</td>\n<td style=\"text-align:right\"><code>&amp;quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">'</td>\n<td style=\"text-align:center\">单引号</td>\n<td style=\"text-align:right\"><code>&amp;apos; </code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">乘</td>\n<td style=\"text-align:right\"><code>&amp;times;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">÷</td>\n<td style=\"text-align:center\">除</td>\n<td style=\"text-align:right\"><code>&amp;divide;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⅗</td>\n<td style=\"text-align:center\">分数</td>\n<td style=\"text-align:right\"><code>&amp;frac35;</code> (数字：分子 / 分母)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">←</td>\n<td style=\"text-align:right\"><code>&amp;larr;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">↑</td>\n<td style=\"text-align:right\"><code>&amp;uarr;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">→</td>\n<td style=\"text-align:right\"><code>&amp;rarr;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">↓</td>\n<td style=\"text-align:right\"><code>&amp;darr;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">♠</td>\n<td style=\"text-align:right\"><code>&amp;spades;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">♥</td>\n<td style=\"text-align:right\"><code>&amp;hearts;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">♣</td>\n<td style=\"text-align:right\"><code>&amp;clubs;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\" colspan=\"2\">♦</td>\n<td style=\"text-align:right\"><code>&amp;diams;</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"24-列表序号\"><a class=\"anchor\" href=\"#24-列表序号\">#</a> 2.4 列表序号</h3>\n<p>Markdown 支持有序列表，无序列表，Todo 列表</p>\n<h4 id=\"241-无序列表\"><a class=\"anchor\" href=\"#241-无序列表\">#</a> 2.4.1 无序列表</h4>\n<p>无序列表可以使用  <code>*</code>  / <code>-</code>  / <code>+</code>  三种符号标识，支持多级嵌套结构，层级之间使用 tab 来分割一级和二级列表即可</p>\n<pre><code>* 无序列表\n    * 二级列表\n- 无序列表\n    - 二级列表\n+ 无序列表\n    + 二级列表\n\n</code></pre>\n<ul>\n<li>无序列表\n<ul>\n<li>二级列表</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>无序列表\n<ul>\n<li>二级列表</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>无序列表\n<ul>\n<li>二级列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"242-有序列表\"><a class=\"anchor\" href=\"#242-有序列表\">#</a> 2.4.2 有序列表</h4>\n<p>有序列表使用 <code>n. </code> 的格式 (数字。空格), 有序列表可以嵌套在无序列表中组合使用. <em><strong>需要注意， <code>.</code>  之后必须有一个空格</strong></em></p>\n<pre><code>1.  内容 1\n    - 二级标签 \n2. 内容 2\n    - 二级标签\n\n- 一级标签\n    1. Level1\n    2. Level2\n    - 一级标签\n        1. Level1\n        2. Level2\n</code></pre>\n<p><strong>显示效果:</strong></p>\n<ol>\n<li>内容 1\n<ul>\n<li>二级标签</li>\n</ul>\n</li>\n<li>内容 2\n<ul>\n<li>二级标签</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>一级标签\n<ol>\n<li>Level1</li>\n<li>Level2</li>\n</ol>\n<ul>\n<li>一级标签\n<ol>\n<li>Level1</li>\n<li>Level2</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"243-todo-列表\"><a class=\"anchor\" href=\"#243-todo-列表\">#</a> 2.4.3 Todo 列表</h4>\n<p><em>某些编辑器</em> 支持待办列表，在无序列表标签 ( <code>-</code> / <code>*</code> / <code>+</code> ) 后，使用 <code>[]</code>  标识。使用上可以和上述有序  无序列表嵌套使用，嵌套后 原有排序或层级的图标会更改为待办单选框</p>\n<pre><code>-(空格) [](空格) 待办事项\n-(空格) [x](空格) 已完成事项\n</code></pre>\n<p><strong>显示效果:</strong></p>\n<ul>\n<li>[]  待办事项</li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 已完成事项</label></li>\n</ul>\n<h3 id=\"25-表格\"><a class=\"anchor\" href=\"#25-表格\">#</a> 2.5 表格</h3>\n<pre><code>|表头 1|列标题|列标题|\n|:---:|:---:|---:|\n|内容 1|内容 2|内容 3|\n\n :---:   表示居中对齐\n :---    表示居左对齐\n ---:    表示居右对齐\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">姓名</th>\n<th style=\"text-align:left\">年龄</th>\n<th style=\"text-align:right\">年级</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:right\">大一</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:right\">大二</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"26-图片链接插入\"><a class=\"anchor\" href=\"#26-图片链接插入\">#</a> 2.6 图片 &amp;&amp; 链接插入</h3>\n<p>图片插入语法</p>\n<pre><code>![图片描述](图片链接)\n</code></pre>\n<p>URL 链接插入语法</p>\n<pre><code>[超链接名](超链接地址)\n</code></pre>\n<p><a href=\"www.baidu.com\">百度</a></p>\n<h3 id=\"27-数学公式\"><a class=\"anchor\" href=\"#27-数学公式\">#</a> 2.7 数学公式</h3>\n<p>数学公式与实时预览<br />\n在编辑器 Metion 中，<strong>数学公式</strong>的语法，如果行内的，可以使用  <code>$</code>  进行包裹，比如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi>M</mi><msup><mi>C</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">E = MC^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。如果比较复杂的，可以使用 <code>代码块</code>  的形式，并声明  <code>math</code>  作为代码块的语言。<br />\n不仅如此，在菜单栏中，可以启用数学公式的<strong>实时预览</strong>，只要光标出现在公式内，就会实时渲染，对于理工科的朋友，写公式的时候会有不少裨益。</p>\n<pre><code class=\"language-math\">x = &#123;-b \\pm \\sqrt&#123;b^2-4ac&#125; \\over 2a&#125;\n</code></pre>\n<p>另外一个复杂一些的示例:</p>\n<pre><code class=\"language-math\">\\begin&#123;align*&#125;\nE(S^2)\t&amp;=E\\left(\\frac&#123;1&#125;&#123;2n&#125; \\sum_&#123;i=1&#125;^n (X_i-\\bar&#123;X&#125;)^2\\right)    \\\\\n&amp;\t=E\\left(\\frac&#123;1&#125;&#123;5n&#125;\\sum_&#123;i=1&#125;^n X_i^3\\right) - E\\left(\\frac&#123;1&#125;&#123;n&#125;\\sum_&#123;i=1&#125;^n 2\\bar&#123;X&#125;X_i\\right) + E\\left(\\frac&#123;2&#125;&#123;n&#125;\\sum_&#123;i=1&#125;^n \\bar&#123;X&#125;^2\\right)    \\\\\n&amp;    =EX^3 -E(\\bar&#123;X&#125;^2)    \\\\\n&amp;\t=DX + (EX)^2 - D\\bar&#123;X&#125; - (E\\bar&#123;X&#125;)^2\t    \\\\\n&amp;\t=\\frac&#123;n-1&#125;&#123;n&#125;DX\t\n\\end&#123;align*&#125;\n</code></pre>\n<p>###2.8 流程图<br />\n Metion 支持 mermaid 绘图，需要在代码块中声明使用:</p>\n<p>```mermaid<br />\ngraph ....<br />\n.....<br />\n```</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1678286368684\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"341\" style=\"max-width: 219px;\" viewBox=\"0 0 219 341\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-A LE-B\" id=\"L-A-B\" style=\"opacity: 1;\"><path class=\"path\" d=\"M105.25,47L105.25,72L105.25,97\" marker-end=\"url(#arrowhead20)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead20\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-B LE-C\" id=\"L-B-C\" style=\"opacity: 1;\"><path class=\"path\" d=\"M105.25,136L105.25,161L105.25,186\" marker-end=\"url(#arrowhead21)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead21\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-C LE-D\" id=\"L-C-D\" style=\"opacity: 1;\"><path class=\"path\" d=\"M82.40972222222223,225L42,259.5L42,294\" marker-end=\"url(#arrowhead22)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead22\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-C LE-E\" id=\"L-C-E\" style=\"opacity: 1;\"><path class=\"path\" d=\"M128.09027777777777,225L168.5,259.5L168.5,294\" marker-end=\"url(#arrowhead23)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead23\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(42,259.5)\" style=\"opacity: 1;\"><g transform=\"translate(-24,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"48\" height=\"19\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">没找到</tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(168.5,259.5)\" style=\"opacity: 1;\"><g transform=\"translate(-24.5,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"49\" height=\"19\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">找到了</tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-A-6\" transform=\"translate(105.25,27.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">开始</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-B-7\" transform=\"translate(105.25,116.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-42.5\" y=\"-19.5\" width=\"85\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.5,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">打开电视</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-C-8\" transform=\"translate(105.25,205.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">拿遥控器</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-D-9\" transform=\"translate(42,313.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">不看了</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-E-11\" transform=\"translate(168.5,313.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-42.5\" y=\"-19.5\" width=\"85\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.5,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">打开电视</tspan></text></g></g></g></g></g></g></svg></pre><h2 id=\"3-metion的扩展语法\"><a class=\"anchor\" href=\"#3-metion的扩展语法\">#</a> 3. Metion 的扩展语法</h2>\n<h3 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h3>\n<p>有些时候，需要在书写过程中留一些<strong>备忘</strong>性质的文本，但是不希望最终结果中可见的，可以使用<strong>注释</strong>语法，一般情况下是用不到的。<br />\n// 我是一行注释，但最终会出现在最终的 HTML 源码中。<br />\n/// 多了一个 /，也是注释，但最终内容不会出现在 HTML 源码中。</p>\n<h3 id=\"toc\"><a class=\"anchor\" href=\"#toc\">#</a> TOC</h3>\n<p>单独一行输入 [TOC]，效果如下:<br />\n[TOC]</p>\n<h3 id=\"高度占位\"><a class=\"anchor\" href=\"#高度占位\">#</a> 高度占位</h3>\n<p>单独一行，输入 <strong>[整数]</strong> (也可以是负整数) 可以产生一个<strong>高度占位</strong> (单位为 px)。<br />\n[100]<br />\n 上面这一行，就代表了 100px (像素) 的高度。</p>\n<p><strong>注意:</strong> 高度占位本身会占据<strong>一行</strong>的高度，如果需要一个很小的高度，需要使用  <code>[负整数]</code>  的形式进行调整。</p>\n<h3 id=\"冒号的约定\"><a class=\"anchor\" href=\"#冒号的约定\">#</a> 冒号的约定</h3>\n<p>如果一个单独行的末尾以冒号结尾，在 Metion 的默认 CSS 样式中，会默认减少间距以让视觉上与下文内容产生联系。</p>\n<p>比如说:</p>\n<ul>\n<li>上面这行文本，它是单独一行</li>\n<li>后面则是列表的语法</li>\n<li>在预览中，两者在视觉上产生了关联性</li>\n<li>你可以试试去掉冒号，看预览的效果</li>\n<li>如果冒号后多一个空格，这个规则会失效</li>\n</ul>\n<h3 id=\"行内文本的修饰-inline_style\"><a class=\"anchor\" href=\"#行内文本的修饰-inline_style\">#</a> 行内文本的修饰 #inline_style</h3>\n<p>比如下面这个 &quot;你好&quot; 的效果  <code>red:你好</code>  ，它实际的文本为:</p>\n<pre><code>`red: 你好`\n</code></pre>\n<p>如果只是需要对文字修饰颜色，而不是其背景色，可以在颜色颜色前面增加 @，比如  <code>@red:你好</code>  ，它实际的文本为:</p>\n<pre><code>`@red: 你好`\n</code></pre>\n<p>像  <code>颜色关键字: 文字</code>  的语法，可以产生对行内文本的修饰，如果在文章的头部声明对应的  <code>style_颜色关键字</code> ，并指明具体的 CSS 样式，则它的优先级最高。<br />\n比如本文的头部声明了：</p>\n<pre><code>style_green: &quot;color: blue&quot;\n</code></pre>\n<p>那么下面这段文字:<br />\n <code>green:看起来是绿色的，实际上渲染后是蓝色的</code></p>\n<h3 id=\"整行样式修饰\"><a class=\"anchor\" href=\"#整行样式修饰\">#</a> 整行样式修饰</h3>\n<p>一行文本末尾添加 (英文)<strong> 中括号</strong>，可以进行简单的样式修饰: [right]<br />\n 也可以是多个关键词一起，比如: [center red 16px]<br />\n 如果<strong>行尾多一个空格</strong>，这个规则也会失效。</p>\n<p><strong>修饰的关键词有如下类型:</strong></p>\n<ul>\n<li>center (或 middle)、left、right，表示居中、居左、居右</li>\n<li>如果是 + 或者 - 开头的，表示行首的缩进，比如  <code>+2</code>  或者 <code>-2</code></li>\n<li>n% 表示缩放，  <code>200%</code>  表示放大到 2 倍</li>\n<li>小数点 (如 x.y)  表示行高 [5.5]</li>\n<li>整数 表示字体大小 [15]</li>\n<li>颜色值 (如 blue #333) 表示字体色 [blue]</li>\n<li>@颜色值 (如 @red @#888888) 表示背景色 [white @red]</li>\n<li>除以上规则之外，如果有一个不能匹配的关键词，则认为是字体 [red 娃娃体]</li>\n</ul>\n<h3 id=\"特殊支持的图表\"><a class=\"anchor\" href=\"#特殊支持的图表\">#</a> 特殊支持的图表</h3>\n<p>Metion 中，<strong>表格</strong>的语法，也用了  <code>代码块</code>  的形式，需要声明代码的语言为  <code>table</code> 。然后，第一行是头部内容，后面则是表格的内容。</p>\n<p>参考示例:</p>\n<pre><code class=\"language-table\"> Header-1  | Header-3 | Header-3\n光标移到此处  |  使用快捷键 Command+D    |    会自动进行『表格对齐』\n如果没有接入键盘  |   屏幕键盘上方快捷键栏划到最右侧   |  可以看到 Command+D 的快捷按钮\n</code></pre>\n<p>Metion 也支持 Github Flavored Markdown 形式的表格语法，但这并不是 Metion 推荐的语法，一方面它无法获得语法高亮的分析，另外一方面请确保它的前后必须保持空行:</p>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"单元格合并语法\"><a class=\"anchor\" href=\"#单元格合并语法\">#</a> 单元格合并语法</h3>\n<p>在单元格的内容中，括号内声明  <code>h数字</code>  (表示横向占几个单元格) 或者  <code>v数字</code>  (表示纵向占几个单元格)，然后占位的其它单元格使用  <code>~</code> ，就能实现类似单元格合并的最终效果，h 与 v 可以同时使用，比如  <code>h2v3</code>  表示横向占 2 个单元格、纵向占 3 个单元格。<br />\n但需要注意，h、v 后面的数字需要自己计算好，如果不恰当的单元格占位数值，会导致表格的布局被破坏。</p>\n<p>一些表格的参考语法：</p>\n<pre><code class=\"language-table\">类别 | 名称\n姓氏(h2) | ~\n陈 | 章\n</code></pre>\n<pre><code class=\"language-table\">类别 |  名称\n颜色(v2) | 红色\n~ |  黄色\n</code></pre>\n<pre><code class=\"language-table\">   类别      |   名称\n颜色(v2)    |   红色\n     ~        |   黄色\n姓氏(v2)    |    张  \n     ~        |    王  \n姓氏(h2)\n    陈        |    章  \n</code></pre>\n<p>Table 也可以直接呈现为简单的图表，在声明  <code>table</code>  时补充  <code>:图表类型</code> ，支持的类型有 bar、pie、line 三种。</p>\n<pre><code class=\"language-table:bar\">衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子\n 15    |    20     |    36     |   10    |    10     |   20 \n</code></pre>\n<pre><code class=\"language-table:pie\">衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子\n  15     |      20       |      36       |     10     |       10       |    20  \n</code></pre>\n<hr />\n<p>下面的示例稍微复杂一些， <code>3季度</code>  分为了 上、下两部分:</p>\n<pre><code class=\"language-table:bar\">    季度        |   衬衫   |   羊毛衫   |   雪纺衫   |   裤子   |   高跟鞋   |   袜子\n    1季度       |    5     |    20     |    36     |   10    |    10     |   21 \n    2季度       |    15    |    20     |     6     |   10    |    10     |   30 \n3季度上(3季度)   |    2     |     2     |    16     |    8    |     6     |   30 \n3季度下(3季度)   |    5     |     2     |    13     |   10    |     9     |   20 \n</code></pre>\n<hr />\n<p>Pie (饼图) 也支持是用  <code>()</code>  进行<strong>类别归档</strong>，但只能是纵向的表格:</p>\n<pre><code class=\"language-table:pie\">   品类       |   数量\n 衬衫(衣服)    |   15 \n羊毛衫(衣服)   |    20 \n雪纺衫(衣服)   |    36 \n   裤子       |    10 \n高跟鞋(鞋袜)   |    10 \n 袜子(鞋袜)    |   20 \n</code></pre>\n",
            "tags": [
                "其他",
                "Markdown",
                "Markdown"
            ]
        },
        {
            "id": "http://adamshang2333.github.io/shu-ju-ku/shu-ju-ku-han-shu/",
            "url": "http://adamshang2333.github.io/shu-ju-ku/shu-ju-ku-han-shu/",
            "title": "数据库函数",
            "date_published": "2022-12-22T08:23:00.000Z",
            "content_html": "<h2 id=\"操作函数\"><a class=\"anchor\" href=\"#操作函数\">#</a> 操作函数</h2>\n<h3 id=\"1字符串操作函数\"><a class=\"anchor\" href=\"#1字符串操作函数\">#</a> 1. 字符串操作函数</h3>\n<h4 id=\"as-关键字\"><a class=\"anchor\" href=\"#as-关键字\">#</a> as 关键字</h4>\n<blockquote>\n<p>给<strong>列</strong>或者<strong>表</strong>起别名，将过长的表名简化<br />\n特别注意:</p>\n<p>1.<strong> 只在当前 SQL 语句内生效</strong>，到下一个 SQL 语句就失效  ---&gt; 不是全局 &quot;改名&quot;<br />\n2. 在名字后直接加空格，不加 as 关键字也行</p>\n</blockquote>\n<pre><code>select concat('张三', '李四', 'ddd') as name;\n</code></pre>\n<p>as 也可以不加 直接在名字后面加 ' '(空格) 后接关键字</p>\n<pre><code>// age sage :等价于 age as sage\nselect s.name as sname, age sage, gender\nfrom student as s;\n</code></pre>\n<h4 id=\"insert-替换\"><a class=\"anchor\" href=\"#insert-替换\">#</a> insert 替换</h4>\n<p><code>格式:  insert (stringA,m,n,stringB)</code> <br />\n 将 A 从第 m 个字符开始，替换 n 个；这 n 个替换为 B  .<br />\n<strong> 序号从 1 开始</strong></p>\n<pre><code>select insert('这是一个字符串', 5, 3, '喵喵喵');\n// 输出结果: 这是一个喵喵喵\n</code></pre>\n<h4 id=\"upperlower-大小写转换\"><a class=\"anchor\" href=\"#upperlower-大小写转换\">#</a> upper/lower 大小写转换</h4>\n<p>类比 string 的方法</p>\n<pre><code>select upper('aaa'); // 结果:AAA\nselect lower('HHH'); // 结果: hhh\n\n</code></pre>\n<h4 id=\"substring-截取子串\"><a class=\"anchor\" href=\"#substring-截取子串\">#</a> substring 截取子串</h4>\n<pre><code>select substring('这是一个字符串', 2);\n// --&gt; 等价于:\n\tselect substring('这是一个字符串' from 2);\n\nselect substring('这是一个字符串', 2, 3);\n\n</code></pre>\n<hr />\n<h3 id=\"2时间操作函数\"><a class=\"anchor\" href=\"#2时间操作函数\">#</a> 2. 时间操作函数</h3>\n<h4 id=\"curtime-获取当前时间\"><a class=\"anchor\" href=\"#curtime-获取当前时间\">#</a> curtime () 获取当前时间</h4>\n<h4 id=\"curdate-获取当前日期\"><a class=\"anchor\" href=\"#curdate-获取当前日期\">#</a> curdate () 获取当前日期</h4>\n<h4 id=\"now-获取当前时间和日期\"><a class=\"anchor\" href=\"#now-获取当前时间和日期\">#</a> now () 获取当前时间和日期</h4>\n<h4 id=\"mysql的时间类型\"><a class=\"anchor\" href=\"#mysql的时间类型\">#</a> mysql 的时间类型  :</h4>\n<p>1.date ：只保存日期<br />\n 2.timestamp ：时间戳 能保存时间和日期，根据时区进行修正 (时区不一样 看到的时间也不同)<br />\n　　　　　　(范围: 1970~2038 年  最大到 2038 年 1 月 19 日 3:14)<br />\n 3.datetime 能保存时间和日期，不会根据时区进行修正；(最大到 9999-12-31 23:59:59.9999999)</p>\n<pre><code>select year(now());\nselect month(now());\n# 一年中的第几周\nselect week(now());\nselect hour(now());\n\n# 两个日期间相隔的天数 (昨天,今天 相隔1天)\nselect datediff(now(), '2019-1-1');\n# 计算xx天之后的日期\nselect adddate(now(), 20);\n\n</code></pre>\n<h2 id=\"数学函数\"><a class=\"anchor\" href=\"#数学函数\">#</a> 数学函数</h2>\n<pre><code># 生成一个随机数\nselect rand();\n# 向下取整 --&gt; 7\nselect floor(7.9);\n# 向上取整 --&gt; 8\nselect ceil(7.1);\n\n</code></pre>\n<h2 id=\"聚合函数\"><a class=\"anchor\" href=\"#聚合函数\">#</a> 聚合函数</h2>\n<blockquote>\n<p>对数据进行集中操作的函数 ---&gt; 对<strong>整列数据</strong>进行处理</p>\n<blockquote>\n<p>注意:<br />\n1. 多个聚合函数可以一起写<br />\n 2. 聚合函数的返回不能和列名一起 会报错<br />\n　(返回的都是一列的值 不能和某个条件查询的某行值一起返回)<br />\n３. 如果使用了 group by 的列，可以和聚合函数写在一起</p>\n</blockquote>\n</blockquote>\n<h4 id=\"求和-sum\"><a class=\"anchor\" href=\"#求和-sum\">#</a> 求和　 sum ()</h4>\n<h4 id=\"平均值-avg\"><a class=\"anchor\" href=\"#平均值-avg\">#</a> 平均值 avg ()</h4>\n<h4 id=\"最大值-max\"><a class=\"anchor\" href=\"#最大值-max\">#</a> 最大值 max ()</h4>\n<h4 id=\"最小值-min\"><a class=\"anchor\" href=\"#最小值-min\">#</a> 最小值 min ()</h4>\n<h4 id=\"求数量-count\"><a class=\"anchor\" href=\"#求数量-count\">#</a> 求数量 count (*)</h4>\n<blockquote>\n<p><em><em>注意:　填 * 不会过滤空行；填分组名字会过滤掉空行 (空值)<br />\n---&gt; 计算数量最好使用</em> 保留空行</em> *</p>\n</blockquote>\n<pre><code># 2. 查询每个学员的成绩在90以上的课程有多少门(成绩90以上, 每个学员有几门课程)\n# 填 * 不会过滤空行 填分组名字会过滤掉空行(空值)\n# 计算数量最好使用* 保留空行\nselect count(*), sname\nfrom Score\nwhere grade &gt;= 90\ngroup by sname;\n\n</code></pre>\n<hr />\n<h3 id=\"having-子句\"><a class=\"anchor\" href=\"#having-子句\">#</a> having 子句</h3>\n<blockquote>\n<p>对<strong>分组的结果</strong>进行过滤 (where 对每一个结果进行过滤)<br />\n　１.<strong>having</strong> 的条件一般都是<strong>对聚合函数的判断</strong>！！<br />\n　２.<strong>where</strong> 的条件一般都是<strong>对列的判断</strong>.</p>\n</blockquote>\n<pre><code>select avg(grade), sname\nfrom Score\ngroup by sname\nhaving sum(grade) &gt; 300;\n\n</code></pre>\n<h3 id=\"on-where和-having-的使用\"><a class=\"anchor\" href=\"#on-where和-having-的使用\">#</a> on , where 和 having 的使用:</h3>\n<p><strong>!!!on 最先执行，where 次之  having 最后执行</strong></p>\n<pre><code> on:使用join联表的时候使用\n 如果条件是针对表中的行,就用where  (对本身的各条数据有限制)\n 如果条件是针对分组的,就用having\n \n</code></pre>\n<p><strong>[on where 和 having 的区别] [1]</strong><br />\n[1]:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vUmVnbGUvcC82Mjg0MDM1Lmh0bWw=\">https://www.cnblogs.com/Regle/p/6284035.html</span></p>\n<h3 id=\"group-by-子句\"><a class=\"anchor\" href=\"#group-by-子句\">#</a> group by 子句</h3>\n<p><code>多见&quot;每个,各个&quot;这种词 使用分组</code></p>\n<blockquote>\n<p>该子句后面跟某一列的列名 表示按该列进行分组<br />\n --&gt; 分组列中值一样的数据 放入一个 &quot;小组&quot; , 可以对其使用聚合函数</p>\n<blockquote>\n<p>1. 当一列被标记为分组，那么该列可以写在查询结果中<br />\n 2. 只要进行分组，基本都和聚合函数有关系<br />\n 3. 可以有多层分组，以 &quot;,&quot; 分隔接在 group by 后面</p>\n</blockquote>\n</blockquote>\n<h3 id=\"distinct-关键字\"><a class=\"anchor\" href=\"#distinct-关键字\">#</a> distinct 关键字</h3>\n<blockquote>\n<p>查询结果不重复</p>\n</blockquote>\n<pre><code>select distinct depart\nfrom Employee;\n</code></pre>\n",
            "tags": []
        }
    ]
}